bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  jsdocBuilder.set(fileOverviewJSDocInfo);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.set(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.set(fileOverviewJSDocInfo);	  jsdocBuilder.reset();    	non-compiled	[CE]  	92	None	replace
2	[BUG]  [BUGGY]  jsdocBuilder.addChildToBack(fileOverviewJSDocInfo);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.addChildToBack(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.addChildToBack(fileOverviewJSDocInfo);	  jsdocBuilder.reset();    	non-compiled	[CE]  	92	None	replace
3	[BUG]  [BUGGY]  jsdocBuilder.addChildToFront(fileOverviewJSDocInfo);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.addChildToFront(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.addChildToFront(fileOverviewJSDocInfo);	  jsdocBuilder.reset();    	non-compiled	[CE]  	92	None	replace
4	[BUG]  [BUGGY]  jsdocBuilder.reset(null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.reset(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.reset(null);	  jsdocBuilder.reset();    	non-compiled	[CE]  	92	None	replace
5	[BUG]  [BUGGY]  jsdocBuilder.set(fileOverviewJSDocInfo,  true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.set(fileOverviewJSDocInfo,  true);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.set(fileOverviewJSDocInfo,  true);	  jsdocBuilder.reset();    	non-compiled	[CE]  	92	None	replace
6	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  Object[]  {  stream.getLineno()  },  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  Object[]  {  stream.getLineno()  },  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  new  Object[]  {  stream.getLineno()  },  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  JSDocInfo( "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  JSDocInfo( "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()));  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  new  JSDocInfo( "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()));	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	42	None	replace
11	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ", "Unexpected  type: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ", "Unexpected  type: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ", "Unexpected  type: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	42	None	replace
12	[BUG]  [BUGGY]  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	stream.getCharno(),  stream.getLineno());	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
13	[BUG]  [BUGGY]  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	stream.getLineno(),  stream.getCharno()  +  1);	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
14	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
15	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
16	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
17	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  }	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
18	[BUG]  [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.build();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.build();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileOverviewJSDocInfo.build();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
19	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(false);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.build(false);	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
20	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.createJSDocToken();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.createJSDocToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.createJSDocToken();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
21	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.createJSDocToken(null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.createJSDocToken(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.createJSDocToken(null);	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
22	[BUG]  [BUGGY]  JsDocToken  stream  =  parser.build();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  parser.build();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  parser.build();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
23	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  sourceName,  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  sourceName,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  sourceName,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
24	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo  +  lineno,  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo  +  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
25	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  charno,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  charno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  charno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
26	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  fileOverviewJSDocInfo,  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  fileOverviewJSDocInfo,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  fileOverviewJSDocInfo,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
27	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  String.valueOf(lineno),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  String.valueOf(lineno),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  String.valueOf(lineno),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
28	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  1  +  lineno,  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  1  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  1  +  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
29	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
30	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.fileoverview, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
31	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.fileoverview ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.fileoverview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.fileoverview ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
32	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.fileoverview: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
33	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview.sourceName ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview.sourceName ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.fileoverview.sourceName ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	22	None	replace
34	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	71	None	replace
35	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  charno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  charno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  charno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	71	None	replace
36	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "lineno: "  +  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "lineno: "  +  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "lineno: "  +  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	71	None	replace
37	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	96	None	replace
38	[BUG]  [BUGGY]  parser.addParserWarning( "msg.incompat.reporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.incompat.reporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.incompat.reporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	96	None	replace
39	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.incompat.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	96	None	replace
40	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	96	None	replace
41	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".toString(),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	24	None	replace
42	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  fileOverviewJSDocInfo.toString(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  fileOverviewJSDocInfo.toString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ",  fileOverviewJSDocInfo.toString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".toString(),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	24	None	replace
43	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ".toString(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ".toString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview. ".toString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".toString(),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	24	None	replace
44	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview, ".toString(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview, ".toString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview, ".toString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".toString(),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	24	None	replace
45	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  stream.toString(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  stream.toString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ",  stream.toString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".toString(),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	24	None	replace
46	[BUG]  [BUGGY]  parser.addParserError( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	85	None	replace
47	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	85	None	replace
48	[BUG]  [BUGGY]  parser.addParser( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	85	None	replace
49	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.source ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	85	None	replace
50	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  lineno,  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.source ",  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	85	None	replace
51	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	53	None	replace
52	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.source ",  lineno,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.source ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.source ",  lineno,  stream.getCharno());	  parser.addParser(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	53	None	replace
53	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.charno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
54	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno "  +  getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno "  +  getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno "  +  getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
55	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno "  +  this.lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno "  +  this.lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno "  +  this.lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
56	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno "  +  this.lineno,  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno "  +  this.lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno "  +  this.lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
57	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	72	None	replace
58	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.retrieveAndResetParsedJSDocInfo();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.retrieveAndResetParsedJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.retrieveAndResetParsedJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
59	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  getParsedFileOverviewJSDocInfo();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  getParsedFileOverviewJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  getParsedFileOverviewJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
60	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.resetParsedJSDocInfo();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.resetParsedJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.resetParsedJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
61	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.resetAndResetParsedJSDocInfo();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.resetAndResetParsedJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.resetAndResetParsedJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
62	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.restoreAndResetParsedJSDocInfo();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.restoreAndResetParsedJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.restoreAndResetParsedJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
63	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  parseAndResetParsedJSDocInfo();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  parseAndResetParsedJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  parseAndResetParsedJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
64	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  hasParsedFileOverviewDocInfo();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  hasParsedFileOverviewDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  hasParsedFileOverviewDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
65	[BUG]  [BUGGY]  jsdocBuilder.setExtendedTypes(fileOverviewJSDocInfo);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setExtendedTypes(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setExtendedTypes(fileOverviewJSDocInfo);	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  	52	None	replace
66	[BUG]  [BUGGY]  jsdocBuilder.setExtendedTypes(extendedTypes,  fileOverviewJSDocInfo);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setExtendedTypes(extendedTypes,  fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setExtendedTypes(extendedTypes,  fileOverviewJSDocInfo);	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  	52	None	replace
67	[BUG]  [BUGGY]  jsdocBuilder.setExtendedTypes(exportedTypes);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setExtendedTypes(exportedTypes);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setExtendedTypes(exportedTypes);	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  	52	None	replace
68	[BUG]  [BUGGY]  jsdocBuilder.setExtendedTypes(null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setExtendedTypes(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setExtendedTypes(null);	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  	52	None	replace
69	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.nextToken();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.nextToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.nextToken();	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
70	[BUG]  [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.getCurrentToken();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.getCurrentToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileOverviewJSDocInfo.getCurrentToken();	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
71	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.currentToken();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.currentToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.currentToken();	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
72	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.firstToken();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.firstToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.firstToken();	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
73	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getNextToken();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getNextToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getNextToken();	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
74	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
75	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
76	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ".length(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ".length(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty ".length(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
77	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty-type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty-type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty-type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
78	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
79	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
80	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error.reporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	10	None	replace
81	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	10	None	replace
82	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	10	None	replace
83	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	10	None	replace
84	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.fileoverview. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
85	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.fileoverview, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
86	[BUG]  [BUGGY]  parser.addParserWarning( "msg.incompat.fileoverview ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.incompat.fileoverview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.incompat.fileoverview ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
87	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	74	None	replace
88	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
89	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
90	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	2	None	replace
91	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	2	None	replace
92	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	2	None	replace
93	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.invalid. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.invalid. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.invalid. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	2	None	replace
94	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	2	None	replace
95	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.invalid.sourceName ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.invalid.sourceName ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.invalid.sourceName ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	2	None	replace
96	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	67	None	replace
97	[BUG]  [BUGGY]  parser.addParserWarning( "msg.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	67	None	replace
98	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	14	None	replace
99	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	14	None	replace
100	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  this.name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  this.name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  this.name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	14	None	replace
101	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  charno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  charno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  charno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	14	None	replace
102	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  name,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  name,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  name,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	14	None	replace
103	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	40	None	replace
104	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.type ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.type ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.type ",  stream.getCharno(),  stream.getLineno());	  parser.addParser(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	40	None	replace
105	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.type, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.type, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.type, ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	40	None	replace
106	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.line ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
107	[BUG]  [BUGGY]  parser.addParserError( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
108	[BUG]  [BUGGY]  parser.addParserWarning( "JsDocInfo.illegal.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "JsDocInfo.illegal.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "JsDocInfo.illegal.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
109	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.line ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
110	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	57	None	replace
111	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	57	None	replace
112	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error, ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	57	None	replace
113	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	78	None	replace
114	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	78	None	replace
115	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	78	None	replace
116	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  lineno  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  lineno  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  lineno  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	78	None	replace
117	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.source   ",    lineno,    stream.getCharno());    	non-compiled	[CE]  	54	None	replace
118	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    lineno,    stream.getCharno());    	non-compiled	[CE]  	54	None	replace
119	[BUG]  [BUGGY]  parser.addParserError( "msg.extended.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.extended.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.extended.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.extended.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	84	None	replace
120	[BUG]  [BUGGY]  parser.addParser( "msg.extended.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.extended.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.extended.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.extended.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	84	None	replace
121	[BUG]  [BUGGY]  parser.addParserWarning( "msg.extended.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.extended.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.extended.type ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.extended.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	84	None	replace
122	[BUG]  [BUGGY]  parser.addParserWarning( "msg.extended.type ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.extended.type ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.extended.type ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.extended.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	84	None	replace
123	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error.reporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error.reporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error.reporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	11	None	replace
124	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParser(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	11	None	replace
125	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.file ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.file ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.file ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	88	None	replace
126	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.file "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.file "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.file "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	88	None	replace
127	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.file "  +  File.separator  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.file "  +  File.separator  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.file "  +  File.separator  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	88	None	replace
128	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.file "  +  File.separator  +  lineno,  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.file "  +  File.separator  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.file "  +  File.separator  +  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	88	None	replace
129	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
130	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.invalid ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
131	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
132	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
133	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.invalid. ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
134	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	28	None	replace
135	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	28	None	replace
136	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	58	None	replace
137	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	58	None	replace
138	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	58	None	replace
139	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	58	None	replace
140	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error. ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	58	None	replace
141	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ");  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error.reporter ");	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
142	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.reporter ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.reporter ");  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.reporter ");	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
143	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  state);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  state);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  state);	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
144	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  errorReporter);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  errorReporter);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  errorReporter);	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
145	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.errorReporter ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.errorReporter ");  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.errorReporter ");	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
146	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  EOF);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  EOF);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  EOF);	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
147	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
148	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
149	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
150	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
151	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  line: "+line+ ",  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  line: "+line+ ",  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ", "Unexpected  line: "+line+ ",  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
152	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	43	None	replace
153	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	43	None	replace
154	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error ",  stream.getCharno(),  stream.getLineno());	  parser.addParserError(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	43	None	replace
155	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.fileoverview, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
156	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.fileoverview. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
157	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.source.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
158	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.lineno "  +  this.lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.lineno "  +  this.lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.lineno "  +  this.lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
159	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.lineno "  +  getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.lineno "  +  getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.lineno "  +  getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
160	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.lineno "  +  lineno,  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.lineno "  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.lineno "  +  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
161	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	19	None	replace
162	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	19	None	replace
163	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.line   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	19	None	replace
164	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.exporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.exporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.exporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
165	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.exporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.exporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.exporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
166	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.exporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.exporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.exporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
167	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.export ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.export ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.export ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
168	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.exporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.exporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.exporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
169	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  stream.getLineno()  +  1,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  stream.getLineno()  +  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.exporter ",  stream.getLineno()  +  1,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
170	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	80	None	replace
171	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineno,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	80	None	replace
172	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	80	None	replace
173	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	55	None	replace
174	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.fileoverview, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.fileoverview, ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	55	None	replace
175	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.fileoverview ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	55	None	replace
176	[BUG]  [BUGGY]  parser.addParserError( "msg.incompat.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.incompat.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.incompat.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
177	[BUG]  [BUGGY]  parser.addParserWarning( "Jsdoc.incompat.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "Jsdoc.incompat.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "Jsdoc.incompat.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
178	[BUG]  [BUGGY]  parser.addParser( "msg.incompat.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.incompat.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.incompat.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
179	[BUG]  [BUGGY]  parser.addParserWarning( "JsDocInfo.incompat.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "JsDocInfo.incompat.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "JsDocInfo.incompat.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
180	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(fileOverviewJSDocInfo);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(fileOverviewJSDocInfo);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
181	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(false);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(false);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
182	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(state);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(state);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(state);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
183	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  parser.build(null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  parser.build(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  parser.build(null);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
184	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  state);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  state);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  state);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
185	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  state.build(null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  state.build(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  state.build(null);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
186	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	6	None	replace
187	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	6	None	replace
188	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
189	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
190	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
191	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  lineno,  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
192	[BUG]  [BUGGY]  parser.addParserWarning( "Jsdoc.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "Jsdoc.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "Jsdoc.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
193	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	26	None	replace
194	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	26	None	replace
195	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	26	None	replace
196	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.annotation.type, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.annotation.type, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.annotation.type, ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
197	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
198	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParser(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
199	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(fileOverviewJSDocInfo);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.build(fileOverviewJSDocInfo);	  JsDocToken    stream    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	31	None	replace
200	[BUG]  [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.build(null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.build(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileOverviewJSDocInfo.build(null);	  JsDocToken    stream    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	31	None	replace
201	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(null,  fileOverviewJSDocInfo);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(null,  fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.build(null,  fileOverviewJSDocInfo);	  JsDocToken    stream    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	31	None	replace
202	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(null,  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.build(null,  null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.build(null,  null);	  JsDocToken    stream    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	31	None	replace
203	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.build(null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.build(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.build(null);	  JsDocToken    stream    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	31	None	replace
204	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
205	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	79	None	replace
206	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.incompat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
207	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.incompat.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.incompat.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.incompat.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
208	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	66	None	replace
209	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	66	None	replace
210	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	66	None	replace
211	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getLineno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.line   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	82	None	replace
212	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	9	None	replace
213	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ".getMessage(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ".getMessage(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ".getMessage(),  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	9	None	replace
214	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(false);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(false);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
215	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  false);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  false);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
216	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  true);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  true);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  true);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
217	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  null);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
218	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build();	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
219	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(true);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(true);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(true);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
220	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  name,  stream.getLine(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  name,  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  name,  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
221	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
222	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getLine(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
223	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separatorChar  +  stream.getLine(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separatorChar  +  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separatorChar  +  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
224	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	45	None	replace
225	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	45	None	replace
226	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	45	None	replace
227	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,   "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,   "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  sourceName,   "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	45	None	replace
228	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	18	None	replace
229	[BUG]  [BUGGY]  parser.addParserError( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	94	None	replace
230	[BUG]  [BUGGY]  parser.addParser( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	94	None	replace
231	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.illegal.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	94	None	replace
232	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.annotation.type ", "Unknown  type: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.annotation.type ", "Unknown  type: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.annotation.type ", "Unknown  type: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	94	None	replace
233	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno: "+stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno: "+stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ",  charno: "+stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
234	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ",  charno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
235	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  expected: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  expected: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ",  expected: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
236	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir "  + ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir "  + ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir "  + ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
237	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir "  +  File.separator  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir "  +  File.separator  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir "  +  File.separator  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
238	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir "  +  File.separatorChar  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir "  +  File.separatorChar  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir "  +  File.separatorChar  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
239	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	32	None	replace
240	[BUG]  [BUGGY]  if(!hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(!hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(!hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	32	None	replace
241	[BUG]  [BUGGY]  if(hasParsedFileOverviewJSDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewJSDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewJSDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	32	None	replace
242	[BUG]  [BUGGY]  if(isBracketedParam)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(isBracketedParam)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(isBracketedParam)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	32	None	replace
243	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	32	None	replace
244	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  return  false;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  return  false;  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  return  false;  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	32	None	replace
245	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	77	None	replace
246	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ".doubleValue(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ".doubleValue(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.invalid ".doubleValue(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	77	None	replace
247	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	77	None	replace
248	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.invalid. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	77	None	replace
249	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview.html ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview.html ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview.html ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
250	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview.jsdoc.description.extended ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview.jsdoc.description.extended ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview.jsdoc.description.extended ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
251	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview. ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.fileoverview.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
252	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  sourceName  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	44	None	replace
253	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	44	None	replace
254	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	39	None	replace
255	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.sourceName   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	48	None	replace
256	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.sourceName "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.sourceName "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.sourceName "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.sourceName   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	48	None	replace
257	[BUG]  [BUGGY]  parser.addError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.sourceName   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	48	None	replace
258	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ".toString(),  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ".toString(),  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ".toString(),  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	75	None	replace
259	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
260	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
261	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
262	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.invalid. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
263	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.invalid, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
264	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
265	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid ".toString(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid ".toString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.invalid ".toString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
266	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	60	None	replace
267	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
268	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
269	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
270	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  messageId,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  messageId,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  messageId,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
271	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  errorReporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  errorReporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview,  errorReporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview,   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	23	None	replace
272	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  charno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  charno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview,  charno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview,   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	23	None	replace
273	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  lineno,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ",  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview,   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	23	None	replace
274	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.key ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.key ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.invalid.key ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
275	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.expression ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.expression ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.invalid.expression ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
276	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno.invalid. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno.invalid. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno.invalid. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
277	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
278	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
279	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  String.valueOf(stream.getLineno()),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  String.valueOf(stream.getLineno()),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  String.valueOf(stream.getLineno()),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
280	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
281	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno()  +  File.separator,  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno()  +  File.separator,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno()  +  File.separator,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
282	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  lineno  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  lineno  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  lineno  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
283	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
284	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  lineno,  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
285	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  String[]  {   "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno()  }  );  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  String[]  {   "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno()  }  );  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  new  String[]  {   "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno()  }  );	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
286	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  JSDocInfo( "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  JSDocInfo( "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  new  JSDocInfo( "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
287	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
288	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.line ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	59	None	replace
289	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.line ",  lineno,  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.line ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.line ",  lineno,  stream.getCharno());	  parser.addParser(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	59	None	replace
290	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getNext();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getNext();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  	93	None	replace
291	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getJSDocToken();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getJSDocToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getJSDocToken();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  	93	None	replace
292	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.next();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.next();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.next();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  	93	None	replace
293	[BUG]  [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocInfo.getParent();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileOverviewJSDocInfo.getParent();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  	93	None	replace
294	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getState();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getState();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getState();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  	93	None	replace
295	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation.type ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	56	None	replace
296	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation.type "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	56	None	replace
297	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation.type ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	56	None	replace
298	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	47	None	replace
299	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	47	None	replace
300	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	47	None	replace
301	[BUG]  [BUGGY]  parser.addParserError( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
302	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
303	[BUG]  [BUGGY]  parser.addParserWarning( "JsDocInfo.illegal.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "JsDocInfo.illegal.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "JsDocInfo.illegal.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
304	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.type ",  stream.toString(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.type ",  stream.toString(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.type ",  stream.toString(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
305	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
306	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  line,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  line,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  line,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
307	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  lineno,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  lineno,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  lineno,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
308	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
309	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
310	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  lineNumber  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  lineNumber  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,  lineNumber  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
311	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	62	None	replace
312	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	62	None	replace
313	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  lineNumber,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
314	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
315	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineNumber  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineNumber  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  lineNumber  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
316	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  line,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
317	[BUG]  [BUGGY]  jsdocBuilder.build(fileOverviewJSDocInfo);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.build(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.build(fileOverviewJSDocInfo);	  jsdocBuilder.build(null);    	non-compiled	[CE]  	35	None	replace
318	[BUG]  [BUGGY]  jsdocBuilder.append(fileOverviewJSDocInfo);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.append(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.append(fileOverviewJSDocInfo);	  jsdocBuilder.build(null);    	non-compiled	[CE]  	35	None	replace
319	[BUG]  [BUGGY]  jsdocBuilder.addChildToFront(fileOverviewJSDocInfo,  false);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.addChildToFront(fileOverviewJSDocInfo,  false);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.addChildToFront(fileOverviewJSDocInfo,  false);	  jsdocBuilder.build(null);    	non-compiled	[CE]  	35	None	replace
320	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	65	None	replace
321	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	65	None	replace
322	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	65	None	replace
323	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	65	None	replace
324	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.invalid. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.invalid. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.invalid. ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	65	None	replace
325	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	49	None	replace
326	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	49	None	replace
327	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	49	None	replace
328	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
329	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
330	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
331	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  lineno,  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
332	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
333	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview, ".getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview, ".getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview, ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	25	None	replace
334	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ".getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ".getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview. ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	25	None	replace
335	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  stream.getLineno()  +  1,  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  stream.getLineno()  +  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ",  stream.getLineno()  +  1,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".getLineno(),    stream.getCharno());    	non-compiled	[CE]  	25	None	replace
336	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ",  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	41	None	replace
337	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.type "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.type "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.type "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	41	None	replace
338	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  charno,  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  charno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type "  +  charno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	41	None	replace
339	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.type ",  name,  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.type ",  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.type ",  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	41	None	replace
340	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error. "  + ", ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error. "  + ", ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error. "  + ", ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	86	None	replace
341	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error. ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	86	None	replace
342	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.source.line ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.source.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.source.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	81	None	replace
343	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  line,  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  line,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.line ",  line,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	81	None	replace
344	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.exporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
345	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.exporter ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
346	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.incompat.reporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	96	None	replace
347	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.incompat.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	96	None	replace
348	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.type ",  lineno,  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.type ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.type ",  lineno,  stream.getCharno());	  parser.addParserError(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	39	None	replace
349	[BUG]  [BUGGY]  parser.addParser( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.illegal.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
350	[BUG]  [BUGGY]  parser.addParserWarning( "JsDocToken.illegal.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "JsDocToken.illegal.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "JsDocToken.illegal.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
351	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.type ", "Unknown  type: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.type ", "Unknown  type: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.type ", "Unknown  type: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
352	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ",  lineno,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source ",  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    lineno,    stream.getCharno());    	non-compiled	[CE]  	54	None	replace
353	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.internal ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.internal ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.internal ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	65	None	replace
354	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	14	None	replace
355	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.dir "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.dir "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.dir "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	14	None	replace
356	[BUG]  [BUGGY]  ParserParser.addParserWarning( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  ParserParser.addParserWarning( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	ParserParser.addParserWarning( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	60	None	replace
357	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid ",  lineno,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.invalid ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.invalid ",  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
358	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ", "lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error. ", "lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	86	None	replace
359	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error. ", "lineno,  lineno,  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error. ", "lineno,  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error. ", "lineno,  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	86	None	replace
360	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	19	None	replace
361	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ", "lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno ", "lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
362	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
363	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ");  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ");  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno ");	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
364	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ".getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ".getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.invalid ".getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	77	None	replace
365	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  stream);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  stream);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  stream);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
366	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  fileOverviewJSDocInfo);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	State.SEARCHING_ANNOTATION  =  jsdocBuilder.build(null,  fileOverviewJSDocInfo);	  State.SEARCHING_ANNOTATION    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	50	None	replace
367	[BUG]  [BUGGY]  parser.addParserError( "msg.illegal.source ", "Unknown  source:  {  0  }   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.illegal.source ", "Unknown  source:  {  0  }   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.illegal.source ", "Unknown  source:  {  0  }   ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	85	None	replace
368	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.annotation.type ",  lineno,  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.annotation.type ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.annotation.type ",  lineno,  stream.getCharno());	  parser.addParser(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
369	[BUG]  [BUGGY]  parser.addParserWarning( "msg.extended.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.extended.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.extended.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.extended.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	84	None	replace
370	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
371	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ", "lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
372	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "lineno: "  +  lineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "lineno: "  +  lineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ", "lineno: "  +  lineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
373	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "Source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
374	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
375	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  retrieveAndResetParsedFileOverviewDocInfo();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  retrieveAndResetParsedFileOverviewDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  retrieveAndResetParsedFileOverviewDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
376	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  parsedFileOverviewJSDocInfo();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  parsedFileOverviewJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  parsedFileOverviewJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  	30	None	replace
377	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.annotation.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	94	None	replace
378	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo,  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  fileOverviewJSDocInfo,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
379	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  lineno,  stream.getLineno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  lineno,  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  lineno,  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
380	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  errorReporter, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  errorReporter, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview,  errorReporter, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview,   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	23	None	replace
381	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.type ",  lineno,  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.type ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.type ",  lineno,  stream.getCharno());	  parser.addParser(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	40	None	replace
382	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.compat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.compat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.compat.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	67	None	replace
383	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source ", "Unexpected  source: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
384	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error ",  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error ",  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error ",  fileOverviewJSDocInfo.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	57	None	replace
385	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  lineno,   "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
386	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  lineno  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
387	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
388	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserError(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	9	None	replace
389	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "file.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "file.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "file.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	72	None	replace
390	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  fileOverviewJSDocInfo  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	78	None	replace
391	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.build();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.build();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.build();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
392	[BUG]  [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocBuilder.build();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocBuilder.build();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileOverviewJSDocBuilder.build();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
393	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	18	None	replace
394	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.line ",  line.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.line ",  line.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.line ",  line.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	18	None	replace
395	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno  +  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	49	None	replace
396	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.errorReporter ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.errorReporter ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.errorReporter ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	11	None	replace
397	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	11	None	replace
398	[BUG]  [BUGGY]  stream.setLineno(lineno);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  stream.setLineno(lineno);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	stream.setLineno(lineno);	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	29	None	replace
399	[BUG]  [BUGGY]  stream.reset(),  stream.getCharno());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  stream.reset(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	stream.reset(),  stream.getCharno());	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	29	None	replace
400	[BUG]  [BUGGY]  stream.setCharno(lineno);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  stream.setCharno(lineno);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	stream.setCharno(lineno);	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	29	None	replace
401	[BUG]  [BUGGY]  stream.clearLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  stream.clearLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	stream.clearLineno(),  stream.getCharno());	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	29	None	replace
402	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	59	None	replace
403	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(null);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getCurrentToken(null);	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  not  a  statement	34	None	replace
404	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.START_OBJECT);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.START_OBJECT);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.START_OBJECT);	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  not  a  statement	34	None	replace
405	[BUG]  [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocBuilder.build(null);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  fileOverviewJSDocBuilder.build(null);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  fileOverviewJSDocBuilder.build(null);	  JsDocToken    stream    =    jsdocBuilder.build(null);    	non-compiled	[CE]  not  a  statement	31	None	replace
406	[BUG]  [BUGGY]  parser.addParserWarning( "msg.incompat.type ",  lineno,  stream.getCharno());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.incompat.type ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.incompat.type ",  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	38	None	replace
407	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
408	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  fileLevelJsDocBuilder.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  fileLevelJsDocBuilder.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  fileLevelJsDocBuilder.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
409	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
410	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ",  lineno,  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.sourceName ",  lineno,  stream.getCharno());	  parser.addParserError(   "msg.unexpected.sourceName   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	48	None	replace
411	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getLineno()  -  1,  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getLineno()  -  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  stream.getLineno()  -  1,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	10	None	replace
412	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getCharno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getCharno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getCharno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	28	None	replace
413	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
414	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  String( "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  String( "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  new  String( "Unexpected  source  name,  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
415	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.dir ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.dir ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.invalid.dir ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
416	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
417	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "],  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "],  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + "],  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
418	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno,  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
419	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(null  +  1);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
420	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  stream);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  stream);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(null,  stream);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	33	None	replace
421	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.sourceName ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
422	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation.invalid ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
423	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.incompat.type ",  lineno,  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.incompat.type ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.incompat.type ",  lineno,  stream.getCharno());	  parser.addParser(   "msg.unexpected.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	37	None	replace
424	[BUG]  [BUGGY]  jsdocBuilder.addChildrenToFront(fileOverviewJSDocInfo);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.addChildrenToFront(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.addChildrenToFront(fileOverviewJSDocInfo);	  jsdocBuilder.build(null);    	non-compiled	[CE]  	35	None	replace
425	[BUG]  [BUGGY]  jsdocBuilder.close();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.close();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.close();	  jsdocBuilder.build(null);    	non-compiled	[CE]  	35	None	replace
426	[BUG]  [BUGGY]  jsdocBuilder.reset(fileOverviewJSDocInfo);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.reset(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.reset(fileOverviewJSDocInfo);	  jsdocBuilder.reset();    	non-compiled	[CE]  	92	None	replace
427	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  stream.getLine(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
428	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
429	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "= ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "= ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + "= ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
430	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLine(),  stream.getCharno()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLine(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  stream.getLine(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
431	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.reporter ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
432	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  stream.getLine(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ",  sourceName,  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
433	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  stream.getSourceName(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ",  stream.getSourceName(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ",  stream.getSourceName(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
434	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.source.fileoverview ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	55	None	replace
435	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
436	[BUG]  [BUGGY]  parser.addParserError( "msg.invalid.dirty ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.invalid.dirty ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.invalid.dirty ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	76	None	replace
437	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error.reporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
438	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName "  +  sourceName,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
439	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
440	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	41	None	replace
441	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.type "  +  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.type "  +  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.type "  +  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	41	None	replace
442	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  Lineno.valueOf(lineno),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  Lineno.valueOf(lineno),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  Lineno.valueOf(lineno),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	71	None	replace
443	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lines,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  lines,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  lines,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	71	None	replace
444	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  lineNumber,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
445	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  line.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  sourceName,  line.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  sourceName,  line.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
446	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.reporter ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.reporter ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	62	None	replace
447	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  sourceName,  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
448	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  String( "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  String( "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()));  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  new  String( "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno()));	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
449	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	13	None	replace
450	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno:   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno:   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ",  charno:   ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
451	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "  at  line   ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "  at  line   ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + "  at  line   ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
452	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno= ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  charno= ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ",  charno= ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
453	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  charno  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  charno  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  charno  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
454	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.incompat.type ",  lineno,  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.incompat.type ",  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.incompat.type ",  lineno,  stream.getCharno());	  parser.addParserError(   "msg.unexpected.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	36	None	replace
455	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  lineno,  stream.getCharno(),  stream.getLineno());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  lineno,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  lineno,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.line   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  not  a  statement	82	None	replace
456	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getParentNode();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getParentNode();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getParentNode();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  not  a  statement	93	None	replace
457	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getParentOperator();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getParentOperator();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getParentOperator();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  not  a  statement	93	None	replace
458	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	47	None	replace
459	[BUG]  [BUGGY]  ParserParser.addParserWarning( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  ParserParser.addParserWarning( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	ParserParser.addParserWarning( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  not  a  statement	8	None	replace
460	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getCharno(),  stream.getLineno());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  not  a  statement	75	None	replace
461	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.file ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.file ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.file ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	88	None	replace
462	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.file ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.file ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.file ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	88	None	replace
463	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.file ",  stream.getCharno(),  stream.getLineno());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.file ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.file ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	88	None	replace
464	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.file ", "lineno: "  +  lineno,  stream.getCharno());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.file ", "lineno: "  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.file ", "lineno: "  +  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.file   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	88	None	replace
465	[BUG]  [BUGGY]  if(!hasParsedFileOverviewJSDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(!hasParsedFileOverviewJSDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(!hasParsedFileOverviewJSDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  not  a  statement	32	None	replace
466	[BUG]  [BUGGY]  if(fileOverviewJSDocInfo!=  null)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(fileOverviewJSDocInfo!=  null)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(fileOverviewJSDocInfo!=  null)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  not  a  statement	32	None	replace
467	[BUG]  [BUGGY]  if(fileOverviewJSDocInfo  ==  null)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(fileOverviewJSDocInfo  ==  null)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(fileOverviewJSDocInfo  ==  null)  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  not  a  statement	32	None	replace
468	[BUG]  [BUGGY]  jsdocBuilder.setFileOverviewJSDocInfo(fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setFileOverviewJSDocInfo(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setFileOverviewJSDocInfo(fileOverviewJSDocInfo);	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  not  a  statement	52	None	replace
469	[BUG]  [BUGGY]  jsdocBuilder.setExtendedTypes(new  ArrayList  <  ExtendedTypeInfo>());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setExtendedTypes(new  ArrayList  <  ExtendedTypeInfo>());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setExtendedTypes(new  ArrayList  <  ExtendedTypeInfo>());	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  	52	None	replace
470	[BUG]  [BUGGY]  jsdocBuilder.setExtendedTypes(type);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setExtendedTypes(type);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setExtendedTypes(type);	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  	52	None	replace
471	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  Lineno(stream.getLineno(),  stream.getCharno()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  Lineno(stream.getLineno(),  stream.getCharno()));  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  new  Lineno(stream.getLineno(),  stream.getCharno()));	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	45	None	replace
472	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error. ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	86	None	replace
473	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error. ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.error.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	86	None	replace
474	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	75	None	replace
475	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.lineoverview ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.lineoverview ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.lineoverview ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	75	None	replace
476	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dirty.reporter ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dirty.reporter ");  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dirty.reporter ");	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
477	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  jsdocBuilder);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ",  jsdocBuilder);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ",  jsdocBuilder);	  parser.addParserError(   "msg.unexpected.reporter   ");    	non-compiled	[CE]  	63	None	replace
478	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.buildFor(fileOverviewJSDocInfo);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.buildFor(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.buildFor(fileOverviewJSDocInfo);	  JsDocToken    stream    =    jsdocBuilder.build(null);    	non-compiled	[CE]  	31	None	replace
479	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.line ",  line.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.line ",  line.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.line ",  line.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	59	None	replace
480	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineNumber,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineNumber,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  lineNumber,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	49	None	replace
481	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getName(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getName(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  stream.getName(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
482	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileName  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  fileName  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  fileName  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	16	None	replace
483	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	47	None	replace
484	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName ",  sourceName,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.sourceName   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	47	None	replace
485	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  new  String( "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  new  String( "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()));  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  new  String( "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno()));	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
486	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	89	None	replace
487	[BUG]  [BUGGY]  stream.skipLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  stream.skipLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	stream.skipLineno(),  stream.getCharno());	  stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	29	None	replace
488	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  this.lineno,  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  this.lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  +  File.separator  +  this.lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
489	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno()  +  lineno,  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno()  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno()  +  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +    File.separator    +    lineno,    stream.getCharno());    	non-compiled	[CE]  	17	None	replace
490	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.line ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.line ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.line ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.line   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	82	None	replace
491	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.line   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	82	None	replace
492	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.source ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.source ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	64	None	replace
493	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.file ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.file ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.invalid.file ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
494	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.source ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.invalid.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.invalid.source ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.invalid.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	5	None	replace
495	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",   "Unexpected  source  name,  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",   "Unexpected  source  name,  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",   "Unexpected  source  name,  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	87	None	replace
496	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  lineno,   "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name,    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	87	None	replace
497	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(fileOverviewJSDocInfo);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.build(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.build(fileOverviewJSDocInfo);	  fileOverviewJSDocInfo    =    jsdocBuilder.build(null);    	non-compiled	[CE]  not  a  statement	33	None	replace
498	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.introspect.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.introspect.type ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.introspect.type ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	67	None	replace
499	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.error: ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.error: ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.error: ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	57	None	replace
500	[BUG]  [BUGGY]  parser.addParser( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	57	None	replace
501	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.annotation.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.annotation.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.annotation.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	65	None	replace
502	[BUG]  [BUGGY]  parser.addParser( "msg.invalid.dir ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.invalid.dir ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.invalid.dir ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	65	None	replace
503	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.invalid.dirty ",  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.jsdoc.invalid.dirty ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.jsdoc.invalid.dirty ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	76	None	replace
504	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ".charno,  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ".charno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty ".charno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	76	None	replace
505	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ".charno(),  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dirty ".charno(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dirty ".charno(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.invalid.dirty   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  not  a  statement	76	None	replace
506	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.start();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.start();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.start();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
507	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.buildFromNonExtendedTypes();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.buildFromNonExtendedTypes();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.buildFromNonExtendedTypes();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
508	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.first();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.first();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.first();	  JsDocToken    stream    =    jsdocBuilder.build();    	non-compiled	[CE]  	51	None	replace
509	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source ", "Unexpected  source  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
510	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
511	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.source ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.source ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	27	None	replace
512	[BUG]  [BUGGY]  parser.addParserWarning( "msg.export.unexpected ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.export.unexpected ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.export.unexpected ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
513	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  stream.getLineno()  -  1,  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.exporter ",  stream.getLineno()  -  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.exporter ",  stream.getLineno()  -  1,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.exporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	95	None	replace
514	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	42	None	replace
515	[BUG]  [BUGGY]  parser.addParserWarning( "msg.undef.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.undef.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.undef.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	42	None	replace
516	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno()  +  1,  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno()  +  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ",  stream.getLineno()  +  1,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	42	None	replace
517	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.incompat.type ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.jsdoc.incompat.type ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.jsdoc.incompat.type ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.incompat.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	38	None	replace
518	[BUG]  [BUGGY]  jsdocBuilder.setExtendedTypes(new  LinkedList  <  ExtendedTypeInfo>());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.setExtendedTypes(new  LinkedList  <  ExtendedTypeInfo>());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.setExtendedTypes(new  LinkedList  <  ExtendedTypeInfo>());	  jsdocBuilder.setExtendedTypes(extendedTypes);    	non-compiled	[CE]  	52	None	replace
519	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.annotation. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.annotation. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.annotation. ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	7	None	replace
520	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Stream  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Stream  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "Stream  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	72	None	replace
521	[BUG]  [BUGGY]  ParserParser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  ParserParser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	ParserParser.addParserWarning( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	72	None	replace
522	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  sourceName,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ",  sourceName,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ",  sourceName,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	66	None	replace
523	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	66	None	replace
524	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type, ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type, ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type, ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	66	None	replace
525	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  file.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  sourceName,  file.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  sourceName,  file.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	80	None	replace
526	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineno,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	80	None	replace
527	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.annotation.invalid ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.annotation.invalid ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.annotation.invalid ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	2	None	replace
528	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  line.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
529	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  stream.getLineno()  -  1,  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ",  stream.getLineno()  -  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ",  stream.getLineno()  -  1,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	15	None	replace
530	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.sourceName ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.sourceName   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	48	None	replace
531	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.sourceName ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserError(   "msg.unexpected.sourceName   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	48	None	replace
532	[BUG]  [BUGGY]  parser.addParserWarning( "msg.extended.type ", "Extended  type: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.extended.type ", "Extended  type: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.extended.type ", "Extended  type: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.extended.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	84	None	replace
533	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation.type, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno()    +    1);    	non-compiled	[CE]  	8	None	replace
534	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.type ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserError(   "msg.unexpected.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	39	None	replace
535	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line,  lineno,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  line,  lineno,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  line,  lineno,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	71	None	replace
536	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  statement,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  statement,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  statement,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",   "lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	71	None	replace
537	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ".getMessage(),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ".getMessage(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ".getMessage(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
538	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview. ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
539	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ".getLine(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ".getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ".getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview.   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	21	None	replace
540	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + " ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + " ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + " ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
541	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ": ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ": ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ": ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
542	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "  at  line "  +  lineno,  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + "  at  line "  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + "  at  line "  +  lineno,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   "    +   ",   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	90	None	replace
543	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.VALUE_STRING);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.VALUE_STRING);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.VALUE_STRING);	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
544	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.startCurrentToken();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.startCurrentToken();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.startCurrentToken();	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
545	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.STRING);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.STRING);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getCurrentToken(JsDocToken.STRING);	  JsDocToken    stream    =    jsdocBuilder.getCurrentToken();    	non-compiled	[CE]  	34	None	replace
546	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Added  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Added  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "Added  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
547	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  stream.getCharno(),  stream.getLineno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  sourceName,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
548	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "going  to  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "going  to  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "going  to  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	69	None	replace
549	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	26	None	replace
550	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Added  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Added  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ", "Added  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	26	None	replace
551	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Added  source: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Added  source: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ", "Added  source: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	26	None	replace
552	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  sourceName, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview,  sourceName, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview,  sourceName, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview,   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	23	None	replace
553	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  line.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview ",  line.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview ",  line.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview,   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	23	None	replace
554	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source: "  +  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source: "  +  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source: "  +  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	79	None	replace
555	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  not  a  statement	79	None	replace
556	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name: "  +  stream.getCharno(),  stream.getLineno());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name: "  +  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ", "Unexpected  source  name: "  +  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.source   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  not  a  statement	79	None	replace
557	[BUG]  [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	if(hasParsedFileOverviewDocInfo())  {  stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  }  else  {  throw  new  IllegalStateException( " ");  }	  stream.getLineno(),    stream.getCharno());    checkExtendedTypes(extendedTypes);    	non-compiled	[CE]  	32	None	replace
558	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
559	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  line  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.line ",  line  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.line ",  line  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.line   ",   "Unexpected    line:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	20	None	replace
560	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.jsdoc.unexpected.charno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.jsdoc.unexpected.charno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
561	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.string.charno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.string.charno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.string.charno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
562	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
563	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.charno ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.charno ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.charno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	3	None	replace
564	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getParentFile();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getParentFile();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	JsDocToken  stream  =  jsdocBuilder.getParentFile();	  JsDocToken    stream    =    jsdocBuilder.getParent();    	non-compiled	[CE]  	93	None	replace
565	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	43	None	replace
566	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	43	None	replace
567	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.error ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserError(   "msg.unexpected.error   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	43	None	replace
568	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  JSDocInfo( "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  JSDocInfo( "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  new  JSDocInfo( "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	46	None	replace
569	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  Object[]  {  sourceName,  stream.getLineno(),  stream.getCharno()  }  );  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  Object[]  {  sourceName,  stream.getLineno(),  stream.getCharno()  }  );  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  new  Object[]  {  sourceName,  stream.getLineno(),  stream.getCharno()  }  );	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	46	None	replace
570	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  String( "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error ",  new  String( "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error ",  new  String( "Unexpected  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	46	None	replace
571	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.incompat.reporter ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.incompat.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	96	None	replace
572	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation.type ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	56	None	replace
573	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation.type ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation.type ", "Unexpected  source  name: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	56	None	replace
574	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.annotation. ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.annotation. ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.annotation.type   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	56	None	replace
575	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.file ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.file ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.file ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
576	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ", ",  stream.getLine(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir "  + ", ",  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir "  + ", ",  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
577	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
578	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "expected  line: "  +  stream.getLine(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ", "expected  line: "  +  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ", "expected  line: "  +  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
579	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineNumber(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineNumber(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.dir ",  stream.getLineNumber(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.dir   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	91	None	replace
580	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.line ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	18	None	replace
581	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.line ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserError(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	18	None	replace
582	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.line ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.line ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.line ",  stream.getCharno(),  stream.getLineno());	  parser.addParserError(   "msg.unexpected.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	18	None	replace
583	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	77	None	replace
584	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.source ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.source ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.source ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	77	None	replace
585	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.invalid ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.unexpected.source.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	77	None	replace
586	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.invalid.fileoverview ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.invalid.fileoverview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.invalid.fileoverview ",  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	22	None	replace
587	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview ",  stream.getCharno(),  stream.getLineno());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.fileoverview ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.fileoverview ",  stream.getCharno(),  stream.getLineno());	  parser.addParserError(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	22	None	replace
588	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source: "  +  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	28	None	replace
589	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  lineNumber,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",   "Unexpected    source:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	28	None	replace
590	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.rporter ",  stream.getCharno(),  stream.getLineno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.rporter ",  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.rporter ",  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getCharno(),    stream.getLineno());    	non-compiled	[CE]  	62	None	replace
591	[BUG]  [BUGGY]  jsdocBuilder.init(fileOverviewJSDocInfo);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.init(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.init(fileOverviewJSDocInfo);	  jsdocBuilder.reset();    	non-compiled	[CE]  	92	None	replace
592	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.rporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.rporter ",  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.rporter ",  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	61	None	replace
593	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  lineno: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
594	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  lineNumber,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  lineNumber,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "lineno:   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	12	None	replace
595	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ");  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.fileoverview ");	  parser.addParserWarning(   "msg.unexpected.source.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
596	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getLineno()  -  1,  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getLineno()  -  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.fileoverview ",  stream.getLineno()  -  1,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	73	None	replace
597	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
598	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
599	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ", "Unexpected  source  name,  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
600	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
601	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "lineno: "  +  lineno,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.dir ", "lineno: "  +  lineno,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.dir ", "lineno: "  +  lineno,  stream.getCharno());	  parser.addParserError(   "msg.unexpected.dir   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	70	None	replace
602	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
603	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.description.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.description.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.description.reporter ", "Unexpected  line: "  +  stream.getLine(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.reporter   ",    stream.getLine(),    stream.getCharno());    	non-compiled	[CE]  	97	None	replace
604	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source.line ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
605	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.lineno ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.lineno ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.lineno ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.lineno   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	4	None	replace
606	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  this.sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.sourceName "  +  this.sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.sourceName "  +  this.sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
607	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.sourceName "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.sourceName   "    +    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	68	None	replace
608	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.line ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
609	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.line ", "expected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.line ", "expected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.line ", "expected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
610	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.line ", "Unknown  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.line ", "Unknown  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.line ", "Unknown  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
611	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  stream.getLineno()  -  1,  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.line ",  stream.getLineno()  -  1,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.line ",  stream.getLineno()  -  1,  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.line   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	81	None	replace
612	[BUG]  [BUGGY]  parser.addParserWarning( "msg.invalid.dir ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.invalid.dir ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.invalid.dir ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.invalid   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	1	None	replace
613	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.message ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.message ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.message ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	10	None	replace
614	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.source ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParser(   "msg.unexpected.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	53	None	replace
615	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source  name ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source  name ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source  name ", "Unexpected  source  name: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",   "Unexpected    source    name:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	44	None	replace
616	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  Object[]  {  stream.getLineno(),  stream.getCharno()  }  );  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error.reporter ",  new  Object[]  {  stream.getLineno(),  stream.getCharno()  }  );  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error.reporter ",  new  Object[]  {  stream.getLineno(),  stream.getCharno()  }  );	  parser.addParserWarning(   "msg.unexpected.error.reporter   ",   "Unexpected    lineno:   "    +    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	13	None	replace
617	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview: ".toString(),  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.fileoverview: ".toString(),  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.fileoverview: ".toString(),  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.fileoverview   ".toString(),    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	24	None	replace
618	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.annotation.type ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserError(   "msg.unexpected.annotation.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	6	None	replace
619	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.getParsedFileOverviewJSDocInfo();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.getParsedFileOverviewJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.getParsedFileOverviewJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  orphaned  case	30	None	replace
620	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.reset();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  jsdocBuilder.reset();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  jsdocBuilder.reset();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  orphaned  case	30	None	replace
621	[BUG]  [BUGGY]  fileOverviewJSDocInfo  =  findParsedFileOverviewJSDocInfo();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  fileOverviewJSDocInfo  =  findParsedFileOverviewJSDocInfo();  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	fileOverviewJSDocInfo  =  findParsedFileOverviewJSDocInfo();	  fileOverviewJSDocInfo    =    retrieveAndResetParsedJSDocInfo();    	non-compiled	[CE]  orphaned  case	30	None	replace
622	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  typeString,  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  typeString,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type "  +  typeString,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	41	None	replace
623	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  name,  stream.getCharno(),  stream.getLineno());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.type "  +  name,  stream.getCharno(),  stream.getLineno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.type "  +  name,  stream.getCharno(),  stream.getLineno());	  parser.addParserWarning(   "msg.unexpected.type   "    +    name,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	41	None	replace
624	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.source ", "Unknown  source: "  +  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.source ", "Unknown  source: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.source ", "Unknown  source: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	85	None	replace
625	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno()  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno()  +  1);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.source ",  stream.getLineno(),  stream.getCharno()  +  1);	  parser.addParserWarning(   "msg.illegal.source   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	85	None	replace
626	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  line,  stream.getCharno());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.source ",  line,  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.source ",  line,  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.source   ",    lineno,    stream.getCharno());    	non-compiled	[CE]  orphaned  case	54	None	replace
627	[BUG]  [BUGGY]  parser.addParser( "msg.unexpected.lineoverview ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParser( "msg.unexpected.lineoverview ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParser( "msg.unexpected.lineoverview ",  stream.getLineno(),  stream.getCharno());	  parser.addParser(   "msg.unexpected.fileoverview   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  orphaned  case	55	None	replace
628	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ", "Unexpected  line: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	9	None	replace
629	[BUG]  [BUGGY]  parser.addParserError( "msg.unexpected.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserError( "msg.unexpected.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserError( "msg.unexpected.reporter ", "Unexpected  lineno: "  +  stream.getLineno(),  stream.getCharno());	  parser.addParserError(   "msg.unexpected.reporter   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	9	None	replace
630	[BUG]  [BUGGY]  parser.addParserWarning( "msg.unexpected.error: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.unexpected.error: "  +  sourceName,  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.unexpected.error: "  +  sourceName,  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.unexpected.error   ",    sourceName,    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	58	None	replace
631	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.type, ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.type, ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.type, ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
632	[BUG]  [BUGGY]  parser.addParserWarning( "msg.illegal.type. ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  parser.addParserWarning( "msg.illegal.type. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	parser.addParserWarning( "msg.illegal.type. ",  stream.getLineno(),  stream.getCharno());	  parser.addParserWarning(   "msg.illegal.type   ",    stream.getLineno(),    stream.getCharno());    	non-compiled	[CE]  	83	None	replace
633	[BUG]  [BUGGY]  jsdocBuilder.addParsedFileOverview(fileOverviewJSDocInfo);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  EOC:  if  (hasParsedFileOverviewDocInfo())  {  fileOverviewJSDocInfo  =  retrieveAndResetParsedJSDocInfo();  }  checkExtendedTypes(extendedTypes);  return  true;  case  EOF:  jsdocBuilder.build(null);      [BUGGY]  jsdocBuilder.addParsedFileOverview(fileOverviewJSDocInfo);  [BUGGY]      stream.getLineno(),  stream.getCharno());  checkExtendedTypes(extendedTypes);  return  false;  case  EOL:  if  (state  ==  State.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  token  =  next();  continue  retry;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  sourceName  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	887	888	1	replace	jsdocBuilder.addParsedFileOverview(fileOverviewJSDocInfo);	  jsdocBuilder.build(null);    	non-compiled	[CE]  	35	None	replace
