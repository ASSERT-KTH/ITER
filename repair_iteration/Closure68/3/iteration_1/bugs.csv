bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ");  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ");  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ");  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ");  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ");  [CE]  [FE]            AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ");  [CE]  [FE]              AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]    [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	  	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ");  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ");  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token);  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token);  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token);	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  orphaned  case	5	None	replace
11	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ");  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  orphaned  case	5	None	replace
12	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ");  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  orphaned  case	5	None	replace
13	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rl ");  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rl ");  [BUGGY]  }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rl ");	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ");  	non-compiled	[CE]  orphaned  case	5	None	replace
