bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  orphaned  case	12	None	replace
2	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ");  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  orphaned  case	12	None	replace
3	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  orphaned  case	12	None	replace
4	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  orphaned  case	12	None	replace
5	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token));  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  orphaned  case	12	None	replace
6	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ");  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
7	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token));  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
8	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ");  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
9	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
10	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ");  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.function ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  orphaned  case	3	None	replace
11	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ");    	non-compiled	[CE]  orphaned  case	5	None	replace
12	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.foo ");  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.foo ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.foo ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ");    	non-compiled	[CE]  orphaned  case	5	None	replace
13	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font ");  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ");    	non-compiled	[CE]  orphaned  case	5	None	replace
14	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label ");  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ");    	non-compiled	[CE]  orphaned  case	5	None	replace
15	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  orphaned  case	8	None	replace
16	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ");  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  orphaned  case	8	None	replace
17	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  orphaned  case	8	None	replace
18	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token));  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  orphaned  case	8	None	replace
19	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  orphaned  case	8	None	replace
20	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rl ",  token);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rl ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rl ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  orphaned  case	13	None	replace
21	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rl ");  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rl ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.rl ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  orphaned  case	13	None	replace
22	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lt ");  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lt ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lt ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  orphaned  case	13	None	replace
23	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lpt ");  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lpt ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lpt ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  orphaned  case	13	None	replace
24	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ",  token);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  orphaned  case	2	None	replace
25	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ");  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  orphaned  case	2	None	replace
26	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  orphaned  case	2	None	replace
27	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.lp ");  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.lp ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.lp ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  orphaned  case	2	None	replace
28	[BUG]  [BUGGY]  parseFunctionType(token);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  parseFunctionType(token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token);	      	non-compiled	[CE]  orphaned  case	7	None	replace
29	[BUG]  [BUGGY]  JsDocToken  next  =  token.next();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  JsDocToken  next  =  token.next();  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.next();	      	non-compiled	[CE]  orphaned  case	7	None	replace
30	[BUG]  [BUGGY]  return  parseFunctionType(token);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  parseFunctionType(token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token);	      	non-compiled	[CE]  orphaned  case	7	None	replace
31	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  orphaned  case	7	None	replace
32	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  orphaned  case	7	None	replace
33	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  orphaned  case	7	None	replace
34	[BUG]  [BUGGY]  JsDocToken  next  =  token.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  JsDocToken  next  =  token.getNext();  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
35	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  orphaned  case	11	None	replace
36	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ");  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  orphaned  case	11	None	replace
37	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  orphaned  case	11	None	replace
38	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token, "msg.jsdoc.missing.buffer ");  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning(token, "msg.jsdoc.missing.buffer ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token, "msg.jsdoc.missing.buffer ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  orphaned  case	11	None	replace
39	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token));  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  orphaned  case	11	None	replace
40	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token);    	non-compiled	[CE]  orphaned  case	10	None	replace
41	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  hasParams);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  hasParams);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token);    	non-compiled	[CE]  orphaned  case	10	None	replace
42	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token);    	non-compiled	[CE]  orphaned  case	10	None	replace
43	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token));  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token);    	non-compiled	[CE]  orphaned  case	10	None	replace
44	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.png ");  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.png ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.png ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ");    	non-compiled	[CE]  orphaned  case	6	None	replace
45	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ",  token);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ");    	non-compiled	[CE]  orphaned  case	6	None	replace
46	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.policy ");  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.policy ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.policy ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ");    	non-compiled	[CE]  orphaned  case	6	None	replace
47	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rp ");  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rp ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.rp ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rp   ");    	non-compiled	[CE]  orphaned  case	4	None	replace
48	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rp   ");    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.name ");  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.name ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.name ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   ");    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.buffer ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.buffer ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.buffer ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.language ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.language ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.language ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  	12	None	replace
59	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  	12	None	replace
60	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ");  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ");    	non-compiled	[CE]  	6	None	replace
61	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ");  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ");    	non-compiled	[CE]  	6	None	replace
62	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  	13	None	replace
64	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Token.FUNCTION);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	3	None	replace
65	[BUG]  [BUGGY]  if(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	7	None	replace
66	[BUG]  [BUGGY]  if(hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(hasParams)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	7	None	replace
67	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	7	None	replace
68	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	9	None	replace
69	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  	12	None	replace
70	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  	13	None	replace
71	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	11	None	replace
72	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	7	None	replace
74	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	7	None	replace
76	[BUG]  [BUGGY]  if(token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  if(token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	if(token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.document ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	2	None	replace
78	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token);  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token);    	non-compiled	[CE]  	10	None	replace
79	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.function ");  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.function ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.function ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	3	None	replace
80	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {    [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ");  [BUGGY]    }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   ");    	non-compiled	[CE]  	1	None	replace
