bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  hasParams);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   "    +    token);    	non-compiled	[CE]  	40	None	replace
2	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp "  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lp "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   "    +    token);    	non-compiled	[CE]  	40	None	replace
3	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   "    +    token);    	non-compiled	[CE]  	40	None	replace
4	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  JsDocToken.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   "    +    token);    	non-compiled	[CE]  	40	None	replace
5	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  isThis);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   "    +    token);    	non-compiled	[CE]  	40	None	replace
6	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.foo ",  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.foo ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.foo ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.foo   ");    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.label ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.label ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.label ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.foo   ");    	non-compiled	[CE]  	12	None	replace
8	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  hasParams));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  hasParams));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  hasParams));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token));    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FUNCTION));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FUNCTION));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FUNCTION));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token));    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FIELD_NAME));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FIELD_NAME));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FIELD_NAME));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token));    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ",  token));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token));    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  true));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  true));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  true));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token));    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ",  token,  hasParams);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lp ",  token,  hasParams);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.lp   ",    token);    	non-compiled	[CE]  	24	None	replace
14	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp "  +  JsDocToken.LP,  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lp "  +  JsDocToken.LP,  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lp "  +  JsDocToken.LP,  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.lp   ",    token);    	non-compiled	[CE]  	24	None	replace
15	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  hasParams);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	49	None	replace
16	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	49	None	replace
17	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	49	None	replace
18	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token)+  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token)+  1;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	49	None	replace
19	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  isThis);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	49	None	replace
20	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  hasParams));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  hasParams));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  hasParams));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FIELD_NAME));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FIELD_NAME));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FIELD_NAME));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FALSE));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FALSE));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FALSE));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  token));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token,  hasParams);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.process   ",    token);    	non-compiled	[CE]  	69	None	replace
27	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.process   ",    token);    	non-compiled	[CE]  	69	None	replace
28	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token)  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token)	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.process   ",    token);    	non-compiled	[CE]  	69	None	replace
29	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.process   ",    token);    	non-compiled	[CE]  	69	None	replace
30	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token)+  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.process ",  token)+  1;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.process   ",    token);    	non-compiled	[CE]  	69	None	replace
31	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.process ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.process ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.process ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.process   ",    token);    	non-compiled	[CE]  	69	None	replace
32	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.name ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.name ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.name ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	50	None	replace
33	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name "  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name "  +  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	50	None	replace
34	[BUG]  [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.name ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.name ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError(token, "msg.jsdoc.missing.name ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	50	None	replace
35	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name. ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name. ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	50	None	replace
36	[BUG]  [BUGGY]  return  reportSyntaxError( "msg.jsdoc.missing.name ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxError( "msg.jsdoc.missing.name ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxError( "msg.jsdoc.missing.name ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	50	None	replace
37	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  hasParams);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  hasParams);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	26	None	replace
38	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token));	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	26	None	replace
39	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  true);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	26	None	replace
40	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	26	None	replace
41	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	26	None	replace
42	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  token);	  return    reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	38	None	replace
43	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token,  null,   "msg.jsdoc.missing.buffer ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning(token,  null,   "msg.jsdoc.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token,  null,   "msg.jsdoc.missing.buffer ");	  return    reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	38	None	replace
44	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token,  JsDocToken.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning(token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	38	None	replace
45	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  null);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  null);	  return    reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	38	None	replace
46	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning(token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	38	None	replace
47	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  hasParams);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer ",  hasParams);	  return    reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	38	None	replace
48	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  hasParams);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  hasParams);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  true);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token)  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token)	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ",  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rule   ");    	non-compiled	[CE]  	63	None	replace
54	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rule ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rule ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.rule ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rule   ");    	non-compiled	[CE]  	63	None	replace
55	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule "  +  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rule   ");    	non-compiled	[CE]  	63	None	replace
56	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.rule ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.rule ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.rule ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rule   ");    	non-compiled	[CE]  	63	None	replace
57	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ",  token));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rule ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rule   ");    	non-compiled	[CE]  	63	None	replace
58	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  hasParams);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  hasParams);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
59	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  true);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
60	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token));	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
61	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  isThis);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token,  isThis);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
62	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token)  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name ",  token)	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
63	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.name ",  token);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.name ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.name ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
64	[BUG]  [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
65	[BUG]  [BUGGY]  While(token!=  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token!=  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token!=  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
66	[BUG]  [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  if(!hasParams)  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  if(!hasParams)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.EXPR_RESULT)  {  if(!hasParams)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
67	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
68	[BUG]  [BUGGY]  safeGet(token)  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeGet(token)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeGet(token)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
69	[BUG]  [BUGGY]  safeToken(token)  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(token)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(token)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
70	[BUG]  [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( "Failed  to  parse  function  type: "  +  token);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( "Failed  to  parse  function  type: "  +  token);  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( "Failed  to  parse  function  type: "  +  token);  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
71	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font ",  token);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.font   ");    	non-compiled	[CE]  orphaned  case	13	None	replace
72	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.font ");  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.font ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.font ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.font   ");    	non-compiled	[CE]  orphaned  case	13	None	replace
73	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font "  +  token);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.font "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.font   ");    	non-compiled	[CE]  orphaned  case	13	None	replace
74	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ",  token);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  orphaned  case	80	None	replace
75	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document "  +  token);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  orphaned  case	80	None	replace
76	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ",  token));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  orphaned  case	80	None	replace
77	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ".getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ".getString());  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document ".getString());	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  orphaned  case	80	None	replace
78	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document. ");  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.document. ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  orphaned  case	80	None	replace
79	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node ",  token);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.node   ");    	non-compiled	[CE]  orphaned  case	70	None	replace
80	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.node ");  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.node ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.node ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.node   ");    	non-compiled	[CE]  orphaned  case	70	None	replace
81	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node "  +  token);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.node   ");    	non-compiled	[CE]  orphaned  case	70	None	replace
82	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node. ");  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node. ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.node   ");    	non-compiled	[CE]  orphaned  case	70	None	replace
83	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node, ");  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node, ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.node, ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.node   ");    	non-compiled	[CE]  orphaned  case	70	None	replace
84	[BUG]  [BUGGY]  safeToken(token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(token)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
85	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(JsDocToken.class);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(JsDocToken.class);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().setContextClassLoader(JsDocToken.class);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
86	[BUG]  [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.FIELD_NAME,  token);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.FIELD_NAME,  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyParser  parser  =  new  JsDocParser(Token.FIELD_NAME,  token);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
87	[BUG]  [BUGGY]  JellyParser  parser  =  new  JsDocParser(token);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyParser  parser  =  new  JsDocParser(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyParser  parser  =  new  JsDocParser(token);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
88	[BUG]  [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.FUNCTION,  token);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.FUNCTION,  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyParser  parser  =  new  JsDocParser(Token.FUNCTION,  token);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
89	[BUG]  [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.FUNCTION);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyParser  parser  =  new  JsDocParser(Token.FUNCTION);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
90	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(JsDocToken.FUNCTION);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().setContextClassLoader(JsDocToken.FUNCTION);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	31	None	replace
91	[BUG]  [BUGGY]  return  parseFunctionType(token,  parameters);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  parameters);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  parameters);	  return    parseFunctionType(token);    	non-compiled	[CE]  orphaned  case	30	None	replace
92	[BUG]  [BUGGY]  return  parseFunctionType(token,  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  true);	  return    parseFunctionType(token);    	non-compiled	[CE]  orphaned  case	30	None	replace
93	[BUG]  [BUGGY]  return  parseFunctionType(Token.FUNCTION,  token);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(Token.FUNCTION,  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(Token.FUNCTION,  token);	  return    parseFunctionType(token);    	non-compiled	[CE]  orphaned  case	30	None	replace
94	[BUG]  [BUGGY]  return  parseDocToken(token);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseDocToken(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseDocToken(token);	  return    parseFunctionType(token);    	non-compiled	[CE]  orphaned  case	30	None	replace
95	[BUG]  [BUGGY]  return  parseFunctionType(token,  null);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  null);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  null);	  return    parseFunctionType(token);    	non-compiled	[CE]  orphaned  case	30	None	replace
96	[BUG]  [BUGGY]  return  parseFunctionType(Token.FUNCTION);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(Token.FUNCTION);	  return    parseFunctionType(token);    	non-compiled	[CE]  orphaned  case	30	None	replace
97	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token));    	non-compiled	[CE]  orphaned  case	43	None	replace
98	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token));    	non-compiled	[CE]  orphaned  case	43	None	replace
99	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  token));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp "  +  token,  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token));    	non-compiled	[CE]  orphaned  case	43	None	replace
100	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.function ",  token);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.function ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.function ",  token);	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  orphaned  case	79	None	replace
101	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "JsDocToken.missing.function ");  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "JsDocToken.missing.function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "JsDocToken.missing.function ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  orphaned  case	79	None	replace
102	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.function ",  token));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.function ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.function ",  token));	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  orphaned  case	79	None	replace
103	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing ",  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing ",  token);	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  	79	None	replace
104	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.function ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.function ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.function ",  token);	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  	79	None	replace
105	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing_function ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing_function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing_function ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  	79	None	replace
106	[BUG]  [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
107	[BUG]  [BUGGY]  While(token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
108	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
109	[BUG]  [BUGGY]  While(token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
110	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lpt ",  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lpt ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lpt ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lpt   ");    	non-compiled	[CE]  	23	None	replace
111	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lpt ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lpt ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lpt ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lpt   ");    	non-compiled	[CE]  	23	None	replace
112	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.state.lpt ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.state.lpt ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.state.lpt ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lpt   ");    	non-compiled	[CE]  	23	None	replace
113	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  hasParams);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	3	None	replace
114	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token)  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token)	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	3	None	replace
115	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	3	None	replace
116	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	3	None	replace
117	[BUG]  [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
118	[BUG]  [BUGGY]  While(token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
119	[BUG]  [BUGGY]  While(token!=  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token!=  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token!=  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
120	[BUG]  [BUGGY]  safeGet(token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeGet(token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeGet(token)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
121	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ",    token);    	non-compiled	[CE]  	45	None	replace
122	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.png ",  token);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.png ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.png ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ",    token);    	non-compiled	[CE]  	45	None	replace
123	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.ng ",  token);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.ng ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.ng ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ",    token);    	non-compiled	[CE]  	45	None	replace
124	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ",  token,  hasParams);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.png ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.png   ",    token);    	non-compiled	[CE]  	45	None	replace
125	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lt ",  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lt ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lt ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lt   ");    	non-compiled	[CE]  	22	None	replace
126	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lt ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lt ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lt ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lt   ");    	non-compiled	[CE]  	22	None	replace
127	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.length ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.length ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.length ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lt   ");    	non-compiled	[CE]  	22	None	replace
128	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  hasParams);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   "    +    token);    	non-compiled	[CE]  	51	None	replace
129	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  isThis);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   "    +    token);    	non-compiled	[CE]  	51	None	replace
130	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  null);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  null);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   "    +    token);    	non-compiled	[CE]  	51	None	replace
131	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   "    +    token);    	non-compiled	[CE]  	51	None	replace
132	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.lp ",  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.lp ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.lp ",  token);	  return    reportTypeError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	27	None	replace
133	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.line ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.line ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.line ");	  return    reportTypeError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	27	None	replace
134	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.line ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.line ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.line ",  token);	  return    reportTypeError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	27	None	replace
135	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.node.lp ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.node.lp ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.node.lp ");	  return    reportTypeError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	27	None	replace
136	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.language ");  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.language ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.language ");	  return    reportTypeError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	27	None	replace
137	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.png ");  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.png ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.png ");	  return    reportTypeError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	27	None	replace
138	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
139	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  if(!hasParams)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  if(!hasParams)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FIELD_NAME)  {  if(!hasParams)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
140	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  if(hasParams)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  if(hasParams)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FIELD_NAME)  {  if(hasParams)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
141	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
142	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  token  =  next();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  token  =  next();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FIELD_NAME)  {  token  =  next();	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
143	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "jsdoc.missing.buffer ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "jsdoc.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "jsdoc.missing.buffer ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.buffer   ");    	non-compiled	[CE]  	55	None	replace
144	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.buffer ",  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.buffer ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.buffer ",  token);	  return    reportTypeSyntaxWarning(   "jsdoc.missing.buffer   ");    	non-compiled	[CE]  	55	None	replace
145	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "Jsdoc.missing.buffer ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "Jsdoc.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "Jsdoc.missing.buffer ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.buffer   ");    	non-compiled	[CE]  	55	None	replace
146	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.missing.buffer ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.missing.buffer ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.buffer   ");    	non-compiled	[CE]  	55	None	replace
147	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.buffer "  +  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.buffer "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.buffer "  +  token);	  return    reportTypeSyntaxWarning(   "jsdoc.missing.buffer   ");    	non-compiled	[CE]  	55	None	replace
148	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lpt ",  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.lpt ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.lpt ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  	21	None	replace
149	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName ",  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.sourceName   ");    	non-compiled	[CE]  	68	None	replace
150	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.sourceName ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.sourceName ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.sourceName ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.sourceName   ");    	non-compiled	[CE]  	68	None	replace
151	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source ",  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.sourceName   ");    	non-compiled	[CE]  	68	None	replace
152	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourcename ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourcename ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourcename ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.sourceName   ");    	non-compiled	[CE]  	68	None	replace
153	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName "  +  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.sourceName "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.sourceName   ");    	non-compiled	[CE]  	68	None	replace
154	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source_name ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source_name ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source_name ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.sourceName   ");    	non-compiled	[CE]  	68	None	replace
155	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  hasParams);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   "    +    token);    	non-compiled	[CE]  	17	None	replace
156	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language "  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   "    +    token);    	non-compiled	[CE]  	17	None	replace
157	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   "    +    token);    	non-compiled	[CE]  	17	None	replace
158	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  isThis);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   "    +    token);    	non-compiled	[CE]  	17	None	replace
159	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   "    +    token);    	non-compiled	[CE]  	17	None	replace
160	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token));    	non-compiled	[CE]  	39	None	replace
161	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token));    	non-compiled	[CE]  	39	None	replace
162	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ",  token));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token));    	non-compiled	[CE]  	39	None	replace
163	[BUG]  [BUGGY]  JsDocToken  next  =  token.getNext()  -  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.getNext()  -  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.getNext()  -  1;	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
164	[BUG]  [BUGGY]  JsDocToken  next  =  token.getNext()  +  1;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.getNext()  +  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.getNext()  +  1;	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
165	[BUG]  [BUGGY]  JsDocToken  next  =  token.getNext()  :  null;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.getNext()  :  null;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.getNext()  :  null;	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
166	[BUG]  [BUGGY]  JsDocToken  next  =  token.removeFirst();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.removeFirst();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.removeFirst();	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
167	[BUG]  [BUGGY]  JsDocToken  next  =  token.getParent();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.getParent();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.getParent();	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
168	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  if(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  if(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FIELD_NAME)  {  if(token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
169	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
170	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FALSE)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
171	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
172	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.language ",  token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.language ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.language ",  token);	  return    reportTypeSyntaxWarning(   "jsdoc.missing.language   ");    	non-compiled	[CE]  	57	None	replace
173	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "jsdoc.missing.language ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "jsdoc.missing.language ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "jsdoc.missing.language ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.language   ");    	non-compiled	[CE]  	57	None	replace
174	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "Jsdoc.missing.language ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "Jsdoc.missing.language ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "Jsdoc.missing.language ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.language   ");    	non-compiled	[CE]  	57	None	replace
175	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "Jsdoc.missing.language ",  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "Jsdoc.missing.language ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "Jsdoc.missing.language ",  token);	  return    reportTypeSyntaxWarning(   "jsdoc.missing.language   ");    	non-compiled	[CE]  	57	None	replace
176	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ",  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
177	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer "  +  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.buffer "  +  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
178	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.buffer ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.buffer ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
179	[BUG]  [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.buffer ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError(token, "msg.jsdoc.missing.buffer ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
180	[BUG]  [BUGGY]  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  reportTypeSyntaxError( "msg.jsdoc.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	reportTypeSyntaxError( "msg.jsdoc.missing.buffer ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
181	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffered.buffer ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.buffered.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.buffered.buffer ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
182	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  hasParams));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  hasParams));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  hasParams));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token));    	non-compiled	[CE]  	18	None	replace
183	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token));    	non-compiled	[CE]  	18	None	replace
184	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token));    	non-compiled	[CE]  	18	None	replace
185	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FIELD_NAME));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FIELD_NAME));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FIELD_NAME));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token));    	non-compiled	[CE]  	18	None	replace
186	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label "  +  token);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.label "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.label   ");    	non-compiled	[CE]  	14	None	replace
187	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token,  hasParams);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ",    token);    	non-compiled	[CE]  	11	None	replace
188	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ",    token);    	non-compiled	[CE]  	11	None	replace
189	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.foo ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ",    token);    	non-compiled	[CE]  	11	None	replace
190	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.name ",  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.name ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.name ",  token);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	53	None	replace
191	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.name "  +  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.name "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.name "  +  token);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	53	None	replace
192	[BUG]  [BUGGY]  return  reportError( "msg.jsdoc.missing.name ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportError( "msg.jsdoc.missing.name ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportError( "msg.jsdoc.missing.name ");	  return    reportSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	53	None	replace
193	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.label ");  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.label ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.label ");	  return    reportSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	53	None	replace
194	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token,  hasParams);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.method   ",    token);    	non-compiled	[CE]  	58	None	replace
195	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.method ",  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.method ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.method ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.method   ",    token);    	non-compiled	[CE]  	58	None	replace
196	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.method   ",    token);    	non-compiled	[CE]  	58	None	replace
197	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.method   ",    token);    	non-compiled	[CE]  	58	None	replace
198	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token)  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token)	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.method   ",    token);    	non-compiled	[CE]  	58	None	replace
199	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token)+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token)+  1;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.method   ",    token);    	non-compiled	[CE]  	58	None	replace
200	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rp ",  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rp ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.rp ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.rp   ");    	non-compiled	[CE]  	47	None	replace
201	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ",  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.rp   ");    	non-compiled	[CE]  	47	None	replace
202	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token,  hasParams);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token);    	non-compiled	[CE]  	35	None	replace
203	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token);    	non-compiled	[CE]  	35	None	replace
204	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.alias ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.alias ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.alias ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.alias   ");    	non-compiled	[CE]  	62	None	replace
205	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ",  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.alias   ");    	non-compiled	[CE]  	62	None	replace
206	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias "  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.alias   ");    	non-compiled	[CE]  	62	None	replace
207	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.alias ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.alias ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.alias ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.alias   ");    	non-compiled	[CE]  	62	None	replace
208	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias. ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias. ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.alias   ");    	non-compiled	[CE]  	62	None	replace
209	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.alias ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.alias ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.alias ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.alias   ");    	non-compiled	[CE]  	62	None	replace
210	[BUG]  [BUGGY]  parent  ==  null  ||!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||!hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
211	[BUG]  [BUGGY]  While(hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
212	[BUG]  [BUGGY]  While(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
213	[BUG]  [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams  &&  token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
214	[BUG]  [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FALSE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams  &&  token!=  JsDocToken.FALSE)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
215	[BUG]  [BUGGY]  tries  |=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  tries  |=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	tries  |=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
216	[BUG]  [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.language ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.language ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError(token, "msg.jsdoc.missing.language ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  	16	None	replace
217	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language. ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language. ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  	16	None	replace
218	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ".getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ".getString());  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ".getString());	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  	16	None	replace
219	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  hasParams);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token);    	non-compiled	[CE]  	1	None	replace
220	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token);    	non-compiled	[CE]  	1	None	replace
221	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token);    	non-compiled	[CE]  	1	None	replace
222	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  isThis);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token);    	non-compiled	[CE]  	1	None	replace
223	[BUG]  [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.line ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.line ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError(token, "msg.jsdoc.missing.line ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ");    	non-compiled	[CE]  	25	None	replace
224	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line "  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.line "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.line "  +  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ");    	non-compiled	[CE]  	25	None	replace
225	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.function ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.function ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	6	None	replace
226	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function, ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function, ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function, ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	6	None	replace
227	[BUG]  [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.function ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError(token, "msg.jsdoc.missing.function ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	6	None	replace
228	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function. ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function. ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	6	None	replace
229	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer ",  token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer ",  token);	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
230	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "JsDocToken.missing.buffer ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "JsDocToken.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "JsDocToken.missing.buffer ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
231	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNREAD_TOKEN ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNREAD_TOKEN ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.UNREAD_TOKEN ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
232	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer "  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.buffer "  +  token);	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
233	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JSDocToken.missing.buffer ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JSDocToken.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JSDocToken.missing.buffer ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
234	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.line ",  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.line ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.line ",  token);	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
235	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document ",  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.document ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  	77	None	replace
236	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document. ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.document. ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  	77	None	replace
237	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.document ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.document ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.document ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  	77	None	replace
238	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document ".getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document ".getString());  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.document ".getString());	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  	77	None	replace
239	[BUG]  [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.document ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError(token, "msg.jsdoc.missing.document ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError(token, "msg.jsdoc.missing.document ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  	77	None	replace
240	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document "  +  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.document "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.document "  +  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.document   ");    	non-compiled	[CE]  	77	None	replace
241	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  hasParams);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  hasParams);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	19	None	replace
242	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  true);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	19	None	replace
243	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	19	None	replace
244	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	19	None	replace
245	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  isThis);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  isThis);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	19	None	replace
246	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  null);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token,  null);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	19	None	replace
247	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  hasParams);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
248	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
249	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
250	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  isThis);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
251	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  null);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  null);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
252	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  hasParams);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	42	None	replace
253	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	42	None	replace
254	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token)+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token)+  1;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	42	None	replace
255	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	42	None	replace
256	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rb ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.rb ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.rb ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rb   ");    	non-compiled	[CE]  	60	None	replace
257	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rb   ");    	non-compiled	[CE]  	60	None	replace
258	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lb ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lb ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lb ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rb   ");    	non-compiled	[CE]  	60	None	replace
259	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ", "msg.jsdoc.missing.rb ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ", "msg.jsdoc.missing.rb ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rb ", "msg.jsdoc.missing.rb ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rl   ",    token);    	non-compiled	[CE]  	20	None	replace
260	[BUG]  [BUGGY]  parseFunctionType(token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  JsDocToken.FIELD_NAME);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
261	[BUG]  [BUGGY]  parseDocToken(token);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseDocToken(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseDocToken(token);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
262	[BUG]  [BUGGY]  parseFunctionType(token,  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  true);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
263	[BUG]  [BUGGY]  parseFunctionType(token,  parameters);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  parameters);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  parameters);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
264	[BUG]  [BUGGY]  parseFunctionType(token,  JsDocToken.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  JsDocToken.FUNCTION);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
265	[BUG]  [BUGGY]  parseFunctionType(token,  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  null);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  null);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
266	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ",  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.property   ");    	non-compiled	[CE]  	59	None	replace
267	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.property ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.property ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.property ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.property   ");    	non-compiled	[CE]  	59	None	replace
268	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.properties ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.properties ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.properties ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.property   ");    	non-compiled	[CE]  	59	None	replace
269	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property "  +  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.property   ");    	non-compiled	[CE]  	59	None	replace
270	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.property ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.property ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.property ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.property   ");    	non-compiled	[CE]  	59	None	replace
271	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype "  +  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype "  +  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  	2	None	replace
272	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype, ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype, ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype, ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  	2	None	replace
273	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype. ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.prototype. ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.prototype   ");    	non-compiled	[CE]  	2	None	replace
274	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.string   ");    	non-compiled	[CE]  	61	None	replace
275	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.string ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.string ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.string ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.string   ");    	non-compiled	[CE]  	61	None	replace
276	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string "  +  token);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.string   ");    	non-compiled	[CE]  	61	None	replace
277	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string. ");  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string. ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.string   ");    	non-compiled	[CE]  	61	None	replace
278	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  hasParams);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   "    +    token);    	non-compiled	[CE]  	37	None	replace
279	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   "    +    token);    	non-compiled	[CE]  	37	None	replace
280	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   "    +    token);    	non-compiled	[CE]  	37	None	replace
281	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   "    +    token);    	non-compiled	[CE]  	37	None	replace
282	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
283	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
284	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token),  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token),  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token),  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
285	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "function ",  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "function ",  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "function ",  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
286	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
287	[BUG]  [BUGGY]  return  reportSyntaxError( "msg.jsdoc.missing.function ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxError( "msg.jsdoc.missing.function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxError( "msg.jsdoc.missing.function ");	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
288	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token));	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
289	[BUG]  [BUGGY]  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
290	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function, ");  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function, ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.function, ");	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
291	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function "  +  token);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.function "  +  token);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
292	[BUG]  [BUGGY]  JsDocToken  next  =  token.nextToken();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.nextToken();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.nextToken();	  JsDocToken    next    =    token.next();    	non-compiled	[CE]  	29	None	replace
293	[BUG]  [BUGGY]  JsDocToken  next  =  token.next()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.next()  -  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.next()  -  1;	  JsDocToken    next    =    token.next();    	non-compiled	[CE]  	29	None	replace
294	[BUG]  [BUGGY]  JsDocToken  next  =  token.peek();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.peek();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.peek();	  JsDocToken    next    =    token.next();    	non-compiled	[CE]  	29	None	replace
295	[BUG]  [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  token  ==  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
296	[BUG]  [BUGGY]  While(token!=  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token!=  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token!=  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
297	[BUG]  [BUGGY]  While(token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
298	[BUG]  [BUGGY]  safeToken()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken()  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
299	[BUG]  [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
300	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
301	[BUG]  [BUGGY]  parent  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
302	[BUG]  [BUGGY]  While(token  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
303	[BUG]  [BUGGY]  While(token!=  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token!=  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token!=  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
304	[BUG]  [BUGGY]  parent  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FIELD_NAME);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  JsDocToken.FLOAT  ||  token  ==  JsDocToken.FIELD_NAME);	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
305	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.token ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.token ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.token ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.token   ");    	non-compiled	[CE]  	56	None	replace
306	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token. ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token. ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.token   ");    	non-compiled	[CE]  	56	None	replace
307	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.LP ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.LP ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.LP ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.png   ");    	non-compiled	[CE]  	44	None	replace
308	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token,  hasParams);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.token   ",    token);    	non-compiled	[CE]  	78	None	replace
309	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.token   ",    token);    	non-compiled	[CE]  	78	None	replace
310	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.token ",  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.token ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.token ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.token   ",    token);    	non-compiled	[CE]  	78	None	replace
311	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.policy ",  token);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.policy ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.policy ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.policy   ");    	non-compiled	[CE]  	46	None	replace
312	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.policy ");  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.policy ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.policy ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.policy   ");    	non-compiled	[CE]  	46	None	replace
313	[BUG]  [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
314	[BUG]  [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  if(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  if(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.EXPR_RESULT)  {  if(!hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
315	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(JsDocToken.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(JsDocToken.EXPR_RESULT);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().setContextClassLoader(JsDocToken.EXPR_RESULT);	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
316	[BUG]  [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  token  =  next();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(token  ==  JsDocToken.EXPR_RESULT)  {  token  =  next();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(token  ==  JsDocToken.EXPR_RESULT)  {  token  =  next();	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
317	[BUG]  [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.EXPR_RESULT,  token);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.EXPR_RESULT,  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyParser  parser  =  new  JsDocParser(Token.EXPR_RESULT,  token);	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
318	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp "  +  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rp   ",    token);    	non-compiled	[CE]  	48	None	replace
319	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token,  hasParams);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.rp   ",    token);    	non-compiled	[CE]  	48	None	replace
320	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  hasParams);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   "    +    token);    	non-compiled	[CE]  	54	None	replace
321	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  isThis);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   "    +    token);    	non-compiled	[CE]  	54	None	replace
322	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.line "  +  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.line   "    +    token);    	non-compiled	[CE]  	54	None	replace
323	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function,  token, ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function,  token, ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function,  token, ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function,   ");    	non-compiled	[CE]  	8	None	replace
324	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  null);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  null);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function,   ");    	non-compiled	[CE]  	8	None	replace
325	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function,   ");    	non-compiled	[CE]  	8	None	replace
326	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.FIELD_NAME);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token,    hasParams);    	non-compiled	[CE]  	41	None	replace
327	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token,    hasParams);    	non-compiled	[CE]  	41	None	replace
328	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  isThis);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token,    hasParams);    	non-compiled	[CE]  	41	None	replace
329	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  hasParams);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   "    +    token);    	non-compiled	[CE]  	4	None	replace
330	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  isThis);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   "    +    token);    	non-compiled	[CE]  	4	None	replace
331	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  true);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype "  +  token,  true);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   "    +    token);    	non-compiled	[CE]  	4	None	replace
332	[BUG]  [BUGGY]  While(hasParams  &&  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams  &&  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams  &&  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
333	[BUG]  [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams  &&  token!=  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
334	[BUG]  [BUGGY]  tryFunction(token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  tryFunction(token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	tryFunction(token)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
335	[BUG]  [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FIELD)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams  &&  token!=  JsDocToken.FIELD)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams  &&  token!=  JsDocToken.FIELD)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
336	[BUG]  [BUGGY]  tries  |=  hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  tries  |=  hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	tries  |=  hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
337	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.loop ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.loop ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.loop ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.rl   ");    	non-compiled	[CE]  	21	None	replace
338	[BUG]  [BUGGY]  safeToken(JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
339	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.BLOCK)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
340	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
341	[BUG]  [BUGGY]  aughtExceptionHandler(JsDocToken.FIELD_NAME,  token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(JsDocToken.FIELD_NAME,  token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(JsDocToken.FIELD_NAME,  token)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
342	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.BLOCK);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.BLOCK);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.BLOCK);	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
343	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME);	  if(token    ==    JsDocToken.BLOCK)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
344	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning(token,  JsDocToken.FIELD_NAME, "msg.jsdoc.missing.buffer ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning(token,  JsDocToken.FIELD_NAME, "msg.jsdoc.missing.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning(token,  JsDocToken.FIELD_NAME, "msg.jsdoc.missing.buffer ");	  return    reportTypeSyntaxWarning(token,   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	38	None	replace
345	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token),  hasParams);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token),  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.method ",  token),  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.method   ",    token);    	non-compiled	[CE]  	58	None	replace
346	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name, ",  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.name, ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.name, ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
347	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FLOAT)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
348	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FLOAT);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FLOAT);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FLOAT);	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
349	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FUNCTION);	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
350	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME,  true)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME,  true)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME,  true)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FLOAT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
351	[BUG]  [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
352	[BUG]  [BUGGY]  safeGet(token,  JsDocToken.EXPR_RESULT))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeGet(token,  JsDocToken.EXPR_RESULT))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeGet(token,  JsDocToken.EXPR_RESULT))  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
353	[BUG]  [BUGGY]  safeGet(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeGet(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeGet(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
354	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
355	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT);	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
356	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Integer.MIN_VALUE);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Integer.MIN_VALUE);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Integer.MIN_VALUE);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
357	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  null,  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  null,  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  null,  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
358	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.function ",  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.function ",  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.function ",  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
359	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.label ",  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.label ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.label ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.line   ",    token);    	non-compiled	[CE]  	26	None	replace
360	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token)+  1;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	3	None	replace
361	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNKNOWN_TYPE ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNKNOWN_TYPE ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.UNKNOWN_TYPE ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
362	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNREADING_TOKEN ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNREADING_TOKEN ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.UNREADING_TOKEN ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
363	[BUG]  [BUGGY]  return  parseFunctionType(token,  0);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  0);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  0);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
364	[BUG]  [BUGGY]  return  parseFunctionType(token,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  false);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  false);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
365	[BUG]  [BUGGY]  return  parseFunctionType(token,  hasParams);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  hasParams);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
366	[BUG]  [BUGGY]  return  parseFunctionType(token,  state);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  state);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  state);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
367	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function "  +  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   "    +    token);    	non-compiled	[CE]  	4	None	replace
368	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "msg.jsdoc.missing.foo ",  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "msg.jsdoc.missing.foo ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "msg.jsdoc.missing.foo ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.foo   ",    token);    	non-compiled	[CE]  	11	None	replace
369	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,   ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,   ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,   ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function,   ");    	non-compiled	[CE]  	8	None	replace
370	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Token.NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Token.NAME);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function,   ");    	non-compiled	[CE]  	8	None	replace
371	[BUG]  [BUGGY]  safeToken(JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
372	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
373	[BUG]  [BUGGY]  safeToken(JsDocToken.FIELD_NAME,  token)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.FIELD_NAME,  token)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.FIELD_NAME,  token)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
374	[BUG]  [BUGGY]  safeToken(JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ".);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.FIELD_NAME)  {  throw  new  IllegalStateException( " ".);  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
375	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.STRING);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.STRING);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token,  JsDocToken.STRING);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   "    +    token);    	non-compiled	[CE]  	17	None	replace
376	[BUG]  [BUGGY]  aughtExceptionHandler(Token.FIELD_NAME,  token);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(Token.FIELD_NAME,  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(Token.FIELD_NAME,  token);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
377	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( ". ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
378	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ".);  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
379	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME).throwException( " ");  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME).throwException( " ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME).throwException( " ");	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
380	[BUG]  [BUGGY]  parent  ==  null  &&!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  &&!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  &&!hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
381	[BUG]  [BUGGY]  While(!hasParams  &&  token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(!hasParams  &&  token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(!hasParams  &&  token!=  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
382	[BUG]  [BUGGY]  While(!hasParams  &&  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(!hasParams  &&  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(!hasParams  &&  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
383	[BUG]  [BUGGY]  While(!hasParams  &&  token!=  JsDocToken.FIELD)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(!hasParams  &&  token!=  JsDocToken.FIELD)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(!hasParams  &&  token!=  JsDocToken.FIELD)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
384	[BUG]  [BUGGY]  While(!hasParams  &&  token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(!hasParams  &&  token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(!hasParams  &&  token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
385	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token),  hasParams);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token),  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token),  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
386	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
387	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
388	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.NAME);	  if(token    ==    JsDocToken.NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	74	None	replace
389	[BUG]  [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
390	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
391	[BUG]  [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( ". ");  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
392	[BUG]  [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken(JsDocToken.EXPR_RESULT)  {  throw  new  IllegalArgumentException( " ".);  }	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
393	[BUG]  [BUGGY]  aughtExceptionHandler(token);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token);	  if(token    ==    JsDocToken.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
394	[BUG]  [BUGGY]  parent  ==  null  ||  hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
395	[BUG]  [BUGGY]  While(hasParams  &&  token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams  &&  token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams  &&  token!=  JsDocToken.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
396	[BUG]  [BUGGY]  While(hasParams  &&  token!=  JsDocToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  While(hasParams  &&  token!=  JsDocToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	While(hasParams  &&  token!=  JsDocToken.STRING)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
397	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.function ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.function ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.buffer   ");    	non-compiled	[CE]  	55	None	replace
398	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.source.buffer ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.source.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.source.buffer ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
399	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name, "  +  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name, "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name, "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   "    +    token);    	non-compiled	[CE]  	51	None	replace
400	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.STRING));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.STRING));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.STRING));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token));    	non-compiled	[CE]  	18	None	replace
401	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.reporter ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.reporter ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.reporter ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.rp   ");    	non-compiled	[CE]  	47	None	replace
402	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.NO_UNREAD_TOKEN ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.NO_UNREAD_TOKEN ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.NO_UNREAD_TOKEN ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  	79	None	replace
403	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNKNOWN.function ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.UNKNOWN.function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.UNKNOWN.function ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  	79	None	replace
404	[BUG]  [BUGGY]  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	6	None	replace
405	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  isThis);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  isThis);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   "    +    token);    	non-compiled	[CE]  	37	None	replace
406	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token)+  1;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   "    +    token);    	non-compiled	[CE]  	37	None	replace
407	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token)  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token)	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
408	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token)+  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token)+  1;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
409	[BUG]  [BUGGY]  JsDocToken  next  =  token.next()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.next()  +  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.next()  +  1;	  JsDocToken    next    =    token.next();    	non-compiled	[CE]  	29	None	replace
410	[BUG]  [BUGGY]  JsDocToken  next  =  token.nextEOL();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.nextEOL();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.nextEOL();	  JsDocToken    next    =    token.next();    	non-compiled	[CE]  	29	None	replace
411	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  Token.FUNCTION);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
412	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FOR)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
413	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FOR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FOR);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FOR);	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
414	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token)  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name ",  token)	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	49	None	replace
415	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.missing.language ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.missing.language ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.missing.language ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.language   ");    	non-compiled	[CE]  	57	None	replace
416	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.language ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.language ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.language ");	  return    reportSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	53	None	replace
417	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token)  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.language ",  token)	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	19	None	replace
418	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  isThis);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  isThis);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token,  isThis);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	9	None	replace
419	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token)+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token)+  1;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.function ",  token)+  1;	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	9	None	replace
420	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token),  hasParams);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token),  hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ",  token),  hasParams);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token));    	non-compiled	[CE]  	39	None	replace
421	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  hasParams));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  hasParams));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  hasParams));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token));    	non-compiled	[CE]  	39	None	replace
422	[BUG]  [BUGGY]  JsDocToken  next  =  token.parseJsDocToken(token);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.parseJsDocToken(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.parseJsDocToken(token);	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
423	[BUG]  [BUGGY]  JsDocToken  next  =  token.removeFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.removeFirstChild();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.removeFirstChild();	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
424	[BUG]  [BUGGY]  JsDocToken  next  =  token.cloneTree();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.cloneTree();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.cloneTree();	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
425	[BUG]  [BUGGY]  parseFunctionType(token,  state);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  state);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  state);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
426	[BUG]  [BUGGY]  parseFunctionType(token,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  false);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  false);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
427	[BUG]  [BUGGY]  parseFunctionType(token,  errorReporter);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  errorReporter);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  errorReporter);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
428	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Integer.toString(Token.FUNCTION));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Integer.toString(Token.FUNCTION));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  Integer.toString(Token.FUNCTION));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
429	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  Token.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function, ",  Token.FUNCTION);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    Token.FUNCTION);    	non-compiled	[CE]  	64	None	replace
430	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.token ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "jsdoc.missing.token ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "jsdoc.missing.token ");	  return    reportTypeSyntaxWarning(   "jsdoc.missing.buffer   ");    	non-compiled	[CE]  	55	None	replace
431	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ",  token));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.string ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.string   ");    	non-compiled	[CE]  	61	None	replace
432	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.string ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.string ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.string ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.string   ");    	non-compiled	[CE]  	61	None	replace
433	[BUG]  [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.node ");  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeError( "msg.jsdoc.missing.node ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeError( "msg.jsdoc.missing.node ");	  return    reportTypeError(   "msg.jsdoc.missing.lp   ");    	non-compiled	[CE]  	27	None	replace
434	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.FUNCTION));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.FUNCTION));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.FUNCTION));	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
435	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.FUNCTION,  token));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.FUNCTION,  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.FUNCTION,  token));	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
436	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(token);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().getContextClassLoader().addChildToFront(token);	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
437	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().addToFront(token);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().addToFront(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().getContextClassLoader().addToFront(token);	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
438	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.EXPR_RESULT));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.EXPR_RESULT));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().getContextClassLoader().addChildToFront(new  Node(Token.EXPR_RESULT));	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
439	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().interrupt();	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
440	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.source.name ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.source.name ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.source.name ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.png   ");    	non-compiled	[CE]  	44	None	replace
441	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token):  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token):  null;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token):  null;	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token);    	non-compiled	[CE]  	3	None	replace
442	[BUG]  [BUGGY]  return  parseFunctionType(token,  JsDocToken.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  JsDocToken.FUNCTION);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  JsDocToken.FUNCTION);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
443	[BUG]  [BUGGY]  return  parseFunctionType(token,  JsDocToken.FIELD_NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  JsDocToken.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  JsDocToken.FIELD_NAME);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
444	[BUG]  [BUGGY]  return  parseFunctionType(token,  JsDocToken.BLOCK);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  JsDocToken.BLOCK);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  JsDocToken.BLOCK);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
445	[BUG]  [BUGGY]  return  parseFunctionType(token,  JsDocToken.STRING);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  JsDocToken.STRING);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  JsDocToken.STRING);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
446	[BUG]  [BUGGY]  return  parseFunctionType(token,  JsDocToken.LP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  parseFunctionType(token,  JsDocToken.LP);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  parseFunctionType(token,  JsDocToken.LP);	  return    parseFunctionType(token);    	non-compiled	[CE]  	30	None	replace
447	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token)  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.token ",  token)	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.token   ",    token);    	non-compiled	[CE]  	78	None	replace
448	[BUG]  [BUGGY]  oricarn(token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  oricarn(token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	oricarn(token)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
449	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(Token.FUNCTION,  token.toString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(Token.FUNCTION,  token.toString()));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(Token.FUNCTION,  token.toString()));	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
450	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(Token.FOR,  token.toString()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(Token.FOR,  token.toString()));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(Token.FOR,  token.toString()));	  if(token    ==    JsDocToken.FOR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
451	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token)  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token)  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.prototype ",  token)	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token);    	non-compiled	[CE]  	1	None	replace
452	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	throw  new  IllegalStateException( " ");	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
453	[BUG]  [BUGGY]  aughtException( " ");  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtException( " ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtException( " ");	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
454	[BUG]  [BUGGY]  JellyToken  nextToken  =  new  JsDocToken(Token.FIELD_NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyToken  nextToken  =  new  JsDocToken(Token.FIELD_NAME);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyToken  nextToken  =  new  JsDocToken(Token.FIELD_NAME);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	67	None	replace
455	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.LP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.LP);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.lp ",  token,  JsDocToken.LP);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token,    hasParams);    	non-compiled	[CE]  	41	None	replace
456	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing. ");  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing. ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing. ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.function   ");    	non-compiled	[CE]  	79	None	replace
457	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  token: "  +  token));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  token: "  +  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  token: "  +  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token));    	non-compiled	[CE]  	39	None	replace
458	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  a  value ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  a  value ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  a  value ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token));    	non-compiled	[CE]  	39	None	replace
459	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ", "expected  a  value ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ", "expected  a  value ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.alias ", "expected  a  value ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.alias   ");    	non-compiled	[CE]  	62	None	replace
460	[BUG]  [BUGGY]  safeToken  =  JsDocToken.EXPR_RESULT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  safeToken  =  JsDocToken.EXPR_RESULT;  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	safeToken  =  JsDocToken.EXPR_RESULT;	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
461	[BUG]  [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyParser  parser  =  new  JsDocParser(Token.EXPR_RESULT);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyParser  parser  =  new  JsDocParser(Token.EXPR_RESULT);	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
462	[BUG]  [BUGGY]  JellyParser  parser  =  new  JsDocToken(Token.EXPR_RESULT);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JellyParser  parser  =  new  JsDocToken(Token.EXPR_RESULT);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JellyParser  parser  =  new  JsDocToken(Token.EXPR_RESULT);	  if(token    ==    JsDocToken.EXPR_RESULT)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
463	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.sourceName ",  token);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.sourceName ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.sourceName ",  token);	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.name   ",    token);    	non-compiled	[CE]  	52	None	replace
464	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.factory ");  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.factory ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.factory ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.font   ");    	non-compiled	[CE]  	13	None	replace
465	[BUG]  [BUGGY]  MutableToken.isFunctionDeclaration(token)||!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  MutableToken.isFunctionDeclaration(token)||!hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	MutableToken.isFunctionDeclaration(token)||!hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
466	[BUG]  [BUGGY]  MutableToken.isFunctionDeclaration(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  MutableToken.isFunctionDeclaration(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	MutableToken.isFunctionDeclaration(token))  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
467	[BUG]  [BUGGY]  parent  ==  null  ||  isThis)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  isThis)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  isThis)  {  throw  new  IllegalArgumentException( " ");  }	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
468	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  [Delete]  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	[Delete]	  if(!hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	65	None	replace
469	[BUG]  [BUGGY]  JsDocToken  next  =  token.parse();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.parse();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.parse();	  JsDocToken    next    =    token.getNext();    	non-compiled	[CE]  	34	None	replace
470	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.name "  +  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.name   "    +    token);    	non-compiled	[CE]  	51	None	replace
471	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language "  +  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   "    +    token);    	non-compiled	[CE]  	17	None	replace
472	[BUG]  [BUGGY]  tries  ||  hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  tries  ||  hasParams)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	tries  ||  hasParams)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
473	[BUG]  [BUGGY]  triesToReturn(token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  triesToReturn(token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	triesToReturn(token)  {  throw  new  IllegalArgumentException( " ");  }	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
474	[BUG]  [BUGGY]  Parchet.checkState(hasParams);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Parchet.checkState(hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Parchet.checkState(hasParams);	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
475	[BUG]  [BUGGY]  ParchetState.checkState(hasParams);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  ParchetState.checkState(hasParams);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	ParchetState.checkState(hasParams);	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
476	[BUG]  [BUGGY]  Parchet.hasError(token);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Parchet.hasError(token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Parchet.hasError(token);	  if(hasParams)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	66	None	replace
477	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  token: "  +  token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  token: "  +  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer ", "expected  token: "  +  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   ",    token);    	non-compiled	[CE]  	35	None	replace
478	[BUG]  [BUGGY]  JsDocToken  next  =  token.trim();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  JsDocToken  next  =  token.trim();  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	JsDocToken  next  =  token.trim();	  JsDocToken    next    =    token.next();    	non-compiled	[CE]  	29	None	replace
479	[BUG]  [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.method ",  token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "msg.jsdoc.missing.method ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "msg.jsdoc.missing.method ",  token);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.name   ");    	non-compiled	[CE]  	53	None	replace
480	[BUG]  [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  token  ==  JsDocToken.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FUNCTION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	32	None	replace
481	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.STRING));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.STRING));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.function ",  token,  JsDocToken.STRING));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.function   ",    token));    	non-compiled	[CE]  	7	None	replace
482	[BUG]  [BUGGY]  parseFunctionType(token,  JsDocToken.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  JsDocToken.BLOCK);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  JsDocToken.BLOCK);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
483	[BUG]  [BUGGY]  parseFunctionType(token,  JsDocToken.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  JsDocToken.EXPR_RESULT);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  JsDocToken.EXPR_RESULT);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
484	[BUG]  [BUGGY]  parseFunctionType(token,  JsDocToken.STRING);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  JsDocToken.STRING);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  JsDocToken.STRING);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
485	[BUG]  [BUGGY]  parseFunctionType(token,  JsDocToken.SEMI);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parseFunctionType(token,  JsDocToken.SEMI);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parseFunctionType(token,  JsDocToken.SEMI);	  parseFunctionType(token);    	non-compiled	[CE]  	28	None	replace
486	[BUG]  [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  parent  ==  null  ||  token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	parent  ==  null  ||  token  ==  JsDocToken.FIELD_NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
487	[BUG]  [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME,  token);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  aughtExceptionHandler(token,  JsDocToken.FIELD_NAME,  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	aughtExceptionHandler(token,  JsDocToken.FIELD_NAME,  token);	  if(token    ==    JsDocToken.FIELD_NAME)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
488	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.STRING);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.STRING);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.buffer "  +  token,  JsDocToken.STRING);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.buffer   "    +    token);    	non-compiled	[CE]  	37	None	replace
489	[BUG]  [BUGGY]  Return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  Return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	Return  reportSyntaxWarning( "msg.jsdoc.missing.function ",  token);	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
490	[BUG]  [BUGGY]  return  reportSyntaxWarning( "JsDocToken.missing.function ");  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportSyntaxWarning( "JsDocToken.missing.function ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportSyntaxWarning( "JsDocToken.missing.function ");	  return    reportSyntaxWarning(   "msg.jsdoc.missing.function   ");    	non-compiled	[CE]  	10	None	replace
491	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.plural ",  token);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.plural ",  token);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.plural ",  token);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.policy   ");    	non-compiled	[CE]  	46	None	replace
492	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.LP));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.LP));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.LP));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token));    	non-compiled	[CE]  	18	None	replace
493	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.source ");	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.sourceName   ");    	non-compiled	[CE]  	68	None	replace
494	[BUG]  [BUGGY]  return  reportTypeSyntaxError(Token.NAME, "msg.jsdoc.missing.language ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError(Token.NAME, "msg.jsdoc.missing.language ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError(Token.NAME, "msg.jsdoc.missing.language ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.language   ");    	non-compiled	[CE]  	16	None	replace
495	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.prototype ");  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "JsDocToken.missing.prototype ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "JsDocToken.missing.prototype ");	  return    reportTypeSyntaxWarning(   "JsDocToken.missing.buffer   ");    	non-compiled	[CE]  	71	None	replace
496	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.STRING);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.STRING);  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.language ",  token,  JsDocToken.STRING);	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.language   ",    token);    	non-compiled	[CE]  	15	None	replace
497	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.input.buffer ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.input.buffer ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.input.buffer ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.buffer   ");    	non-compiled	[CE]  	36	None	replace
498	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ",  token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.property ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.prototype   ",    token));    	non-compiled	[CE]  	5	None	replace
499	[BUG]  [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token));  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxWarning( "msg.jsdoc.missing.rp ",  token));	  return    reportTypeSyntaxWarning(   "msg.jsdoc.missing.lp   ",    token));    	non-compiled	[CE]  	43	None	replace
500	[BUG]  [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.java.foo ");  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  parseFunctionType(JsDocToken  token)  {    if  (token  !=  JsDocToken.LP)  {      [BUGGY]  return  reportTypeSyntaxError( "msg.jsdoc.missing.java.foo ");  [BUGGY]      }  Node  functionType  =  newNode(Token.FUNCTION);  Node  parameters  =  null;  skipEOLs();  if  (!match(JsDocToken.RP))  {  token  =  next();  boolean  hasParams  =  true;  if  (token  ==  JsDocToken.STRING)  {  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parseFunctionType  [RETURN_TYPE]  Node  JsDocToken  token  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  Node  basicTypeExpr  contextType  functionType  memberType  n  parameters  resultType  templateNode  typeExpr  typeList  typeNameNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  s  sourceName  string  templateTypeName  tokenStr  typeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  trimCount  ErrorReporter  errorReporter  boolean  hasParams  isNew  isThis  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  Map  annotationNames  	projects/Closure68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7071067811865475	1761	1761	1	replace	return  reportTypeSyntaxError( "msg.jsdoc.missing.java.foo ");	  return    reportTypeSyntaxError(   "msg.jsdoc.missing.foo   ");    	non-compiled	[CE]  	12	None	replace
