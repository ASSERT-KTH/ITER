bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  +  1;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  2  +  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    2;    	non-compiled	[CE]  	27	None	replace
2	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  4;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  4;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  4;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    2;    	non-compiled	[CE]  	27	None	replace
3	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  3;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    2;    	non-compiled	[CE]  	27	None	replace
4	[BUG]  [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  0)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	70	None	replace
5	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')+  2;	  Integer    decPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    	non-compiled	[CE]  	24	None	replace
6	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')/  1;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')/  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')/  1;	  Integer    decPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    	non-compiled	[CE]  	24	None	replace
7	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	37	None	replace
8	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ',  mant);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('  ',  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('  ',  mant);	  int    decPos    =    str.indexOf('    ',    lastChar);    	non-compiled	[CE]  	44	None	replace
9	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('  ',  lastChar);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('  ',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('  ',  lastChar);	  int    decPos    =    str.indexOf('    ',    lastChar);    	non-compiled	[CE]  	44	None	replace
10	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('  ',  lastChar);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  decPos  =  str.indexOf('  ',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  decPos  =  str.indexOf('  ',  lastChar);	  int    decPos    =    str.indexOf('    ',    lastChar);    	non-compiled	[CE]  	44	None	replace
11	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ',  lastChar)+  1;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('  ',  lastChar)+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('  ',  lastChar)+  1;	  int    decPos    =    str.indexOf('    ',    lastChar);    	non-compiled	[CE]  	44	None	replace
12	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-',  mant);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-',  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-',  mant);	  int    decPos    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('-',  lastChar);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('-',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('-',  lastChar);	  int    decPos    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-',  lastChar)+  1;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-',  lastChar)+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-',  lastChar)+  1;	  int    decPos    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.'  +  mant);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.'  +  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.'  +  mant);	  int    expPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  	54	None	replace
16	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  lastChar;  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.')+  lastChar;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.')+  lastChar;	  int    expPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  	54	None	replace
17	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	  Integer    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	50	None	replace
18	[BUG]  [BUGGY]  nisip  =  str.charAt(decPos  +  1);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  nisip  =  str.charAt(decPos  +  1);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	nisip  =  str.charAt(decPos  +  1);	  if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	66	None	replace
19	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  mant);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.',  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.',  mant);	  int    expPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	11	None	replace
20	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  lastChar);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('.',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.lastIndexOf('.',  lastChar);	  int    expPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-',  decPos  +  1);  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-',  decPos  +  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-',  decPos  +  1);	  int    decPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  	69	None	replace
22	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('-',  decPos);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('-',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('-',  decPos);	  int    decPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  	69	None	replace
23	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-',  DEC_POP);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-',  DEC_POP);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-',  DEC_POP);	  int    decPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  	69	None	replace
24	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  mant);  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.',  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.',  mant);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	36	None	replace
25	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  lastChar);  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('.',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('.',  lastChar);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	36	None	replace
26	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('.',  lastChar);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  decPos  =  str.indexOf('.',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  decPos  =  str.indexOf('.',  lastChar);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	36	None	replace
27	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  1;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  	19	None	replace
28	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	57	None	replace
29	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	74	None	replace
30	[BUG]  [BUGGY]  if(decPos  <  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	74	None	replace
31	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	74	None	replace
32	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('e')+  1;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('e')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('e')+  1;	  int    decPos    =    str.indexOf('e')+    1;    	non-compiled	[CE]  	16	None	replace
33	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('.',  decPos);	  Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	51	None	replace
34	[BUG]  [BUGGY]  Integer  decPos  =  str.lastIndexOf('.');  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.lastIndexOf('.');  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.lastIndexOf('.');	  Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	51	None	replace
35	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('.',  exp);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('.',  exp);	  Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	51	None	replace
36	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_PREFIX);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_PREFIX);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('.',  DEC_PREFIX);	  Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	51	None	replace
37	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  expPos  =  str.indexOf('.',  decPos);	  Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	21	None	replace
38	[BUG]  [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  expPos  =  str.lastIndexOf('.');  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  expPos  =  str.lastIndexOf('.');	  Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	21	None	replace
39	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  lastChar);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  expPos  =  str.indexOf('.',  lastChar);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  expPos  =  str.indexOf('.',  lastChar);	  Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	21	None	replace
40	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  dec);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  expPos  =  str.indexOf('.',  dec);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  expPos  =  str.indexOf('.',  dec);	  Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	21	None	replace
41	[BUG]  [BUGGY]  Integer  str  =  createInteger(str,  decPos);  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str,  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str,  decPos);	  Integer    str    =    createInteger(mant);    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	55	None	replace
43	[BUG]  [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  }	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	55	None	replace
44	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.length());  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.length());  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.length());	  Integer    str    =    createInteger(str);    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	34	None	replace
46	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	34	None	replace
47	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  	61	None	replace
48	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')/  2;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')/  2;	  int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  	61	None	replace
49	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')+  2;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')+  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  	61	None	replace
50	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  DEC_POP)+  str.indexOf('E')+  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  DEC_POP)+  str.indexOf('E')+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  DEC_POP)+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  	61	None	replace
51	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-')+  2;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-')+  2;	  int    decPos    =    str.indexOf('-')+    0;    	non-compiled	[CE]  	58	None	replace
52	[BUG]  [BUGGY]  (str.indexOf('e')+  str.indexOf('E')+  1);  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  (str.indexOf('e')+  str.indexOf('E')+  1);  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	(str.indexOf('e')+  str.indexOf('E')+  1);  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	31	None	replace
53	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	31	None	replace
54	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('E')+  str.indexOf('E')-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('E')+  str.indexOf('E')-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.lastIndexOf('E')+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')-    1;    	non-compiled	[CE]  	26	None	replace
55	[BUG]  [BUGGY]  int  decPos  =  str.indexOf(''+  mant);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf(''+  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf(''+  mant);	  int    decPos    =    str.indexOf(''+    lastChar);    	non-compiled	[CE]  	46	None	replace
56	[BUG]  [BUGGY]  int  decPos  =  str.indexOf(''+  lastChar)+  1;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf(''+  lastChar)+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf(''+  lastChar)+  1;	  int    decPos    =    str.indexOf(''+    lastChar);    	non-compiled	[CE]  	46	None	replace
57	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  	65	None	replace
58	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)-  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  	65	None	replace
59	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.'  +  mant);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.'  +  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.'  +  mant);	  int    decPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  	38	None	replace
60	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  lastChar;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.')+  lastChar;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.')+  lastChar;	  int    decPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  	38	None	replace
61	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  lastChar);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.')+  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.')+  lastChar);	  int    decPos    =    str.indexOf('.'    +    lastChar);    	non-compiled	[CE]  	38	None	replace
62	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-'  +  mant);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-'  +  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-'  +  mant);	  int    decPos    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-')+  lastChar;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-')+  lastChar;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-')+  lastChar;	  int    decPos    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  	4	None	replace
64	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-')+  lastChar);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-')+  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-')+  lastChar);	  int    decPos    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  	4	None	replace
65	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e')+  3;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e')+  3;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e')+  3;	  int    decPos    =    str.indexOf('e')+    2;    	non-compiled	[CE]  	49	None	replace
66	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	23	None	replace
67	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E');  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E');  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E');	  int    expPos    =    str.indexOf('e');    	non-compiled	[CE]  	40	None	replace
68	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('E')+  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('E')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('E')+  1;	  Integer    decPos    =    str.indexOf('E');    	non-compiled	[CE]  	41	None	replace
69	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('E'  +  1);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('E'  +  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('E'  +  1);	  Integer    decPos    =    str.indexOf('E');    	non-compiled	[CE]  	41	None	replace
70	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('E',  decPos);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('E',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('E',  decPos);	  Integer    decPos    =    str.indexOf('E');    	non-compiled	[CE]  	41	None	replace
71	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ')+  2;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('  ')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('  ')+  2;	  int    decPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  	45	None	replace
72	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('  ')+  1;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('  ')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('  ')+  1;	  int    decPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  	45	None	replace
73	[BUG]  [BUGGY]  Integer  str  =  createInteger(decPos  +  1);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(decPos  +  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(decPos  +  1);	  Integer    str    =    createInteger(decPos);    	non-compiled	[CE]  	10	None	replace
74	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e',  lastChar);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e',  lastChar);	  int    decPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  	60	None	replace
75	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e',  decPos  +  1);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e',  decPos  +  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e',  decPos  +  1);	  int    decPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  	60	None	replace
76	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('e',  decPos);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('e',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('e',  decPos);	  int    decPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  	60	None	replace
77	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e',  DEC_POP);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e',  DEC_POP);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e',  DEC_POP);	  int    decPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  	60	None	replace
78	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
79	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
80	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  1;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.lastIndexOf('.')+  1;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	53	None	replace
81	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  2;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.')+  2;	  int    expPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	53	None	replace
82	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  3;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  3;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    2;    	non-compiled	[CE]  	18	None	replace
83	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ',  decPos  +  1);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('  ',  decPos  +  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('  ',  decPos  +  1);	  int    decPos    =    str.indexOf('    ',    decPos);    	non-compiled	[CE]  	73	None	replace
84	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('  ',  decPos);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('  ',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('  ',  decPos);	  int    decPos    =    str.indexOf('    ',    decPos);    	non-compiled	[CE]  	73	None	replace
85	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ',  DEC_POP);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('  ',  DEC_POP);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('  ',  DEC_POP);	  int    decPos    =    str.indexOf('    ',    decPos);    	non-compiled	[CE]  	73	None	replace
86	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  2;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  	63	None	replace
87	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)/  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  lastChar)/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  	63	None	replace
88	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  2;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E',  decPos)/  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  	63	None	replace
89	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  3;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  3;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  	63	None	replace
90	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos  +  1));  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos  +  1));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos  +  1));	  Integer    str    =    createInteger(str.substring(decPos));    	non-compiled	[CE]  	71	None	replace
91	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(0,  decPos));  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(0,  decPos));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(0,  decPos));	  Integer    str    =    createInteger(str.substring(decPos));    	non-compiled	[CE]  	71	None	replace
92	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  exp));  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  exp));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos,  exp));	  Integer    str    =    createInteger(str.substring(decPos));    	non-compiled	[CE]  	71	None	replace
93	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	32	None	replace
94	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('-')+  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('-')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('-')+  1;	  int    decPos    =    str.indexOf('-')+    1;    	non-compiled	[CE]  	2	None	replace
95	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	75	None	replace
96	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	75	None	replace
97	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  if(expPos  <  0)  {  throw  new  NumberFormatException( " "  +  str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	75	None	replace
98	[BUG]  [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	33	None	replace
99	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	33	None	replace
100	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  1);  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  1);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  1);	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    0)-    1;    	non-compiled	[CE]  	47	None	replace
101	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)/  2;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)/  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    0)-    1;    	non-compiled	[CE]  	47	None	replace
102	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)/  1;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  0)/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    0)-    1;    	non-compiled	[CE]  	47	None	replace
103	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);	  int    decPos    =    str.indexOf('e')+    str.indexOf('E');    	non-compiled	[CE]  	17	None	replace
104	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  2;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.')+  2;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	39	None	replace
105	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.lastIndexOf('.')+  1;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	39	None	replace
106	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  +  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.',  decPos  +  1);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  	13	None	replace
107	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  decPos);  [CE]  [FE]                          NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('.',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.lastIndexOf('.',  decPos);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  	13	None	replace
108	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  decPos);  [CE]  [FE]                            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  expPos  =  str.indexOf('.',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  expPos  =  str.indexOf('.',  decPos);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  	13	None	replace
109	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  2;	  int    decPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	52	None	replace
110	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	62	None	replace
111	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	62	None	replace
112	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	  int    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	15	None	replace
113	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  4;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  4;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  4;	  int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    2;    	non-compiled	[CE]  	64	None	replace
114	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  3;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  3;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E')/  3;	  int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    2;    	non-compiled	[CE]  	64	None	replace
115	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  2;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')/  2  +  str.indexOf('E',  decPos)/  2;	  int    expPos    =    str.indexOf('e')/    2    +    str.indexOf('E')/    2;    	non-compiled	[CE]  	64	None	replace
116	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  [FE]                          NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  	14	None	replace
117	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos  +  1,  decPos));  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos  +  1,  decPos));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos  +  1,  decPos));	  Integer    str    =    createInteger(str.substring(decPos,    decPos));    	non-compiled	[CE]  	72	None	replace
118	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(1,  decPos));  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(1,  decPos));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(1,  decPos));	  Integer    str    =    createInteger(str.substring(decPos,    decPos));    	non-compiled	[CE]  	72	None	replace
119	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  1));  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  1));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos,  1));	  Integer    str    =    createInteger(str.substring(decPos,    decPos));    	non-compiled	[CE]  	72	None	replace
120	[BUG]  [BUGGY]  Integer  str  =  createInteger(lastChar,  decPos);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(lastChar,  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(lastChar,  decPos);	  Integer    str    =    createInteger(mant,    decPos);    	non-compiled	[CE]  	9	None	replace
121	[BUG]  [BUGGY]  Integer  str  =  createInteger(decPos,  mant);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(decPos,  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(decPos,  mant);	  Integer    str    =    createInteger(mant,    decPos);    	non-compiled	[CE]  	9	None	replace
122	[BUG]  [BUGGY]  int  expPos  =  str.lastIndexOf('.',  DEC_POP);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.lastIndexOf('.',  DEC_POP);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.lastIndexOf('.',  DEC_POP);	  int    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  	22	None	replace
123	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	12	None	replace
124	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  10  +  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  10  +  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  10  +  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    3    +    1;    	non-compiled	[CE]  	43	None	replace
125	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.')+  1  +  1;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	39	None	replace
126	[BUG]  [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	62	None	replace
127	[BUG]  [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	62	None	replace
128	[BUG]  [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	62	None	replace
129	[BUG]  [BUGGY]  if(decPos  ==  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  ==  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  ==  -1)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	62	None	replace
130	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('')+  lastChar;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('')+  lastChar;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('')+  lastChar;	  int    decPos    =    str.indexOf(''+    lastChar);    	non-compiled	[CE]  	46	None	replace
131	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	55	None	replace
132	[BUG]  [BUGGY]  if(mant  ==  null)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(mant  ==  null)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(mant  ==  null)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	25	None	replace
133	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  return  createInteger(str);  }  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  return  createInteger(str);  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  return  createInteger(str);  }	  int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	25	None	replace
134	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(2,  decPos));  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(2,  decPos));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(2,  decPos));	  Integer    str    =    createInteger(str.substring(decPos,    decPos));    	non-compiled	[CE]  	72	None	replace
135	[BUG]  [BUGGY]  if(decPos  <  -1)  {  if(expPos  >=  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  if(expPos  >=  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  if(expPos  >=  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	6	None	replace
136	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('e',  decPos);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  decPos  =  str.indexOf('e',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  decPos  =  str.indexOf('e',  decPos);	  int    decPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  	60	None	replace
137	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  return  createInteger(str);  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  return  createInteger(str);  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  return  createInteger(str);  }	  int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	35	None	replace
138	[BUG]  [BUGGY]  if(mant  ==  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(mant  ==  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(mant  ==  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	35	None	replace
139	[BUG]  [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  +	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	33	None	replace
140	[BUG]  [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	33	None	replace
141	[BUG]  [BUGGY]  if(decPos  ==  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  ==  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  ==  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	33	None	replace
142	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  0;	  int    expPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	12	None	replace
143	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  2;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  2;	  int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  	61	None	replace
144	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  1;	  Integer    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	50	None	replace
145	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos)+  1);  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos)+  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos)+  1);	  Integer    str    =    createInteger(str.substring(decPos));    	non-compiled	[CE]  	71	None	replace
146	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos),  decPos);  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos),  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos),  decPos);	  Integer    str    =    createInteger(str.substring(decPos));    	non-compiled	[CE]  	71	None	replace
147	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('-',  decPos);  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  decPos  =  str.indexOf('-',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  decPos  =  str.indexOf('-',  decPos);	  int    decPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  	69	None	replace
148	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  dec);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.',  dec);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.',  dec);	  int    expPos    =    str.lastIndexOf('.');    	non-compiled	[CE]  	22	None	replace
149	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  decPos);  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.',  decPos);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	36	None	replace
150	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  lastChar)+  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.',  lastChar)+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.',  lastChar)+  1;	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	36	None	replace
151	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-')+  1  +  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-')+  1  +  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-')+  1  +  1;	  int    decPos    =    str.indexOf('-')+    1;    	non-compiled	[CE]  	2	None	replace
152	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e')+  1  +  1;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e')+  1  +  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e')+  1  +  1;	  int    decPos    =    str.indexOf('e')+    1;    	non-compiled	[CE]  	16	None	replace
153	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;	  int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	37	None	replace
154	[BUG]  [BUGGY]  Integer  decPos  =  createInteger(decPos);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  createInteger(decPos);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  createInteger(decPos);	  if(expPos    >    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	67	None	replace
155	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  dec  =  str.substring(decPos  +  1);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  dec  =  str.substring(decPos  +  1);	  if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	66	None	replace
156	[BUG]  [BUGGY]  if(mant!=  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(mant!=  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(mant!=  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	34	None	replace
157	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ')+  1  +  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('  ')+  1  +  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('  ')+  1  +  1;	  int    decPos    =    str.indexOf('    ')+    1;    	non-compiled	[CE]  	45	None	replace
158	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('.',  lastChar);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  expPos  =  str.indexOf('.',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  expPos  =  str.indexOf('.',  lastChar);	  int    expPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	11	None	replace
159	[BUG]  [BUGGY]  if(mant  ==  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(mant  ==  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(mant  ==  null)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	32	None	replace
160	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('.')+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('.')+  1;	  Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	51	None	replace
161	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('.',  DEC_POP);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('.',  DEC_POP);	  Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	51	None	replace
162	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  decPos)-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  	65	None	replace
163	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  1;	  int    expPos    =    str.indexOf('e');    	non-compiled	[CE]  	40	None	replace
164	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos);  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  decPos);	  int    expPos    =    str.indexOf('e');    	non-compiled	[CE]  	40	None	replace
165	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  2;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  2;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  2;	  int    expPos    =    str.indexOf('e');    	non-compiled	[CE]  	40	None	replace
166	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  return  createInteger(str);  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  return  createInteger(str);  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  return  createInteger(str);  }	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	31	None	replace
167	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')+  0;  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')+  0;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('E')+  str.indexOf('E')+  0;	  Integer    decPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    	non-compiled	[CE]  	24	None	replace
168	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)/  1;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  decPos)/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  	63	None	replace
169	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E',  decPos)/  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E',  decPos)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  lastChar)+  str.indexOf('E',  decPos)/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  	63	None	replace
170	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  expPos  =  str.indexOf('.')+  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  expPos  =  str.indexOf('.')+  1;	  Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	21	None	replace
171	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  0;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  0;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  0;	  int    decPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	15	None	replace
172	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  1)-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  1)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  1)-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    0)-    1;    	non-compiled	[CE]  	47	None	replace
173	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  16)-  1;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  16)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  16)-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    0)-    1;    	non-compiled	[CE]  	47	None	replace
174	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E',  0)-  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')-    1;    	non-compiled	[CE]  	26	None	replace
175	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	57	None	replace
176	[BUG]  [BUGGY]  if(mant!=  null)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(mant!=  null)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(mant!=  null)  {  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	23	None	replace
177	[BUG]  [BUGGY]  Integer  str  =  createInteger(dec,  mant);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(dec,  mant);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(dec,  mant);	  Integer    str    =    createInteger(mant,    decPos);    	non-compiled	[CE]  	9	None	replace
178	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  0;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  0;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  0;	  int    decPos    =    str.indexOf('E')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	52	None	replace
179	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [CE]  [FE]                        NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('.',  decPos  -  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('.',  decPos  -  1);	  int    expPos    =    str.indexOf('.',    decPos);    	non-compiled	[CE]  	13	None	replace
180	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')-  2;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    2;    	non-compiled	[CE]  	18	None	replace
181	[BUG]  [BUGGY]  if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    decPos)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	70	None	replace
182	[BUG]  [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	74	None	replace
183	[BUG]  [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	  if(decPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	74	None	replace
184	[BUG]  [BUGGY]  expPos  =  str.indexOf('.');  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  expPos  =  str.indexOf('.');  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	expPos  =  str.indexOf('.');	  if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	66	None	replace
185	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos);  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	exp  =  str.substring(decPos  +  1,  expPos);	  if(expPos    >    -1)    {    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	66	None	replace
186	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)/  1;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)/  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)/  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)/    1;    	non-compiled	[CE]  	63	None	replace
187	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-',  dec);  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-',  dec);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-',  dec);	  int    decPos    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  	3	None	replace
188	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('-',  lastChar);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  decPos  =  str.indexOf('-',  lastChar);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  decPos  =  str.indexOf('-',  lastChar);	  int    decPos    =    str.indexOf('-',    lastChar);    	non-compiled	[CE]  	3	None	replace
189	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E',  0)-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E',  0)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  'E')+  str.indexOf('E',  0)-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    0)-    1;    	non-compiled	[CE]  	47	None	replace
190	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  decPos  +  1));  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  decPos  +  1));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos,  decPos  +  1));	  Integer    str    =    createInteger(str.substring(decPos,    decPos));    	non-compiled	[CE]  	72	None	replace
191	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  expPos));  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  str  =  createInteger(str.substring(decPos,  expPos));  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  str  =  createInteger(str.substring(decPos,  expPos));	  Integer    str    =    createInteger(str.substring(decPos));    	non-compiled	[CE]  	71	None	replace
192	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-',  decPos  -  1);  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-',  decPos  -  1);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-',  decPos  -  1);	  int    decPos    =    str.indexOf('-',    decPos);    	non-compiled	[CE]  	69	None	replace
193	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  2;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)-  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')-    2;    	non-compiled	[CE]  	59	None	replace
194	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'),  decPos  -  2;  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'),  decPos  -  2;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E'),  decPos  -  2;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')-    2;    	non-compiled	[CE]  	59	None	replace
195	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  dec);  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('.',  dec);  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('.',  dec);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	36	None	replace
196	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e',  decPos)+  str.indexOf('E')-  1;	  int    expPos    =    str.indexOf('e',    decPos)+    str.indexOf('E')+    2;    	non-compiled	[CE]  	61	None	replace
197	[BUG]  [BUGGY]  if(expPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(expPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(expPos  <  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	57	None	replace
198	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number    	non-compiled	[CE]  	57	None	replace
199	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.. ");  }  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.. ");  }  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  decPos)  {  if(expPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.. ");  }	  if(expPos    >    -1)    {    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	67	None	replace
200	[BUG]  [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]              NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(decPos  <  decPos)  {  if(expPos  <  0)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	  if(decPos    >    -1)    {    if(expPos    <    0)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.       ");    }    	non-compiled	[CE]  	75	None	replace
201	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-')+  str.indexOf('-')+  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-')+  str.indexOf('-')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-')+  str.indexOf('-')+  1;	  int    decPos    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  	4	None	replace
202	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-')+  str.indexOf('-');  [CE]  [FE]                    NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('-')+  str.indexOf('-');  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('-')+  str.indexOf('-');	  int    decPos    =    str.indexOf('-'    +    lastChar);    	non-compiled	[CE]  	4	None	replace
203	[BUG]  [BUGGY]  char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  [FE]                      NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	char  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	  int    expPos    =    str.indexOf('E')    +    str.indexOf('E')    +    1;    if(expPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.    	non-compiled	[CE]  	25	None	replace
204	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e',  decPos)+  1;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('e',  decPos)+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('e',  decPos)+  1;	  int    decPos    =    str.indexOf('e',    decPos);    	non-compiled	[CE]  	60	None	replace
205	[BUG]  [BUGGY]  if(expPos  <  0)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(expPos  <  0)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(expPos  <  0)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +	  if(decPos    >    -1)    {    int    expPos    =    str.indexOf('e')    +    str.indexOf('E')    +    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	31	None	replace
206	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  4;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  4;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos)/  4;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E')/    4;    	non-compiled	[CE]  	28	None	replace
207	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)-  1;  [CE]  [FE]            NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)-  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos  +  1)-  1;	  int    expPos    =    str.indexOf('e')+    str.indexOf('E',    decPos)-    1;    	non-compiled	[CE]  	65	None	replace
208	[BUG]  [BUGGY]  if(expPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  if(expPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	if(expPos  >  -1)  {  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException(str  +	  if(decPos    <    -1)    {    int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    if(expPos    <    decPos)    {    throw    new    NumberFormatException(str    +    	non-compiled	[CE]  	55	None	replace
209	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  dec);  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  Integer  decPos  =  str.indexOf('.',  dec);  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	Integer  decPos  =  str.indexOf('.',  dec);	  Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  	51	None	replace
210	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  /  1;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  /  1;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E'),  decPos  /  1;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')/    1;    	non-compiled	[CE]  	19	None	replace
211	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  0;  [CE]  [FE]                  NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  0;  [BUGGY]        if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')/  0;	  int    expPos    =    str.indexOf('E')+    str.indexOf('E')+    0;    	non-compiled	[CE]  	20	None	replace
212	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('  ',  decPos)+  1;  [CE]  [FE]                NumberFormatException      [CONTEXT]      return  null;  }  if  (str.startsWith(     "0x     ")  ||  str.startsWith(     "-0x     "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');      [BUGGY]  int  decPos  =  str.indexOf('  ',  decPos)+  1;  [BUGGY]      int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +       "  is  not  a  valid  number.     ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	470	470	2	replace	int  decPos  =  str.indexOf('  ',  decPos)+  1;	  int    decPos    =    str.indexOf('    ',    decPos);    	non-compiled	[CE]  	73	None	replace
