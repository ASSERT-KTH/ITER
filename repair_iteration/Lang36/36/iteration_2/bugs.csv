bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  str  =  createInteger(mant);  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(mant);  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(mant);	      Integer    str    =    createInteger(lastChar);    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(0,  str.length()  -  1));  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(str.substring(0,  str.length()  -  1));  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(str.substring(0,  str.length()  -  1));	      Integer    str    =    createInteger(lastChar);    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  Integer  str  =  createInteger(0);  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(0);  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(0);	      Integer    str    =    createInteger(lastChar);    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  mant);  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.',  mant);  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.',  mant);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  lastChar)+  1;  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.',  lastChar)+  1;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.',  lastChar)+  1;	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.',  lastChar);  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.lastIndexOf('.',  lastChar);  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.lastIndexOf('.',  lastChar);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  2;  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  2;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  2;	  int    decPos    =    str.indexOf('.')+    str.indexOf('-')+    1;    	non-compiled	[CE]  	12	None	replace
8	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  2;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('e')+  2;	  int    decPos    =    str.indexOf('.')+    str.indexOf('e')+    1;    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.length());  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(str.length());  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(str.length());	      Integer    str    =    createInteger(str);    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  2;  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  2;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  2;	  int    decPos    =    str.indexOf('.')+    str.indexOf('D')+    1;    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.');  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  decPos  =  str.indexOf('.');  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  decPos  =  str.indexOf('.');  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	      int    decPos    =    str.indexOf('.');    if(decPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')  +  str.indexOf('E')  +  1;  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [CE]  [FE]                NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')  +  str.indexOf('E')  +  1;  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')  +  str.indexOf('E')  +  1;  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    if(decPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.',  lastChar);  [CE]  [FE]              NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  str.indexOf('.',  lastChar);  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  expPos  =  str.indexOf('.',  lastChar);	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [CE]  [FE]              NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  2;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  2;	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')  +  str.indexOf('E')  +  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')  +  str.indexOf('E')  +  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')  +  str.indexOf('E')  +  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    if(decPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	      int    decPos    =    str.indexOf(lastChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('e')+  str.indexOf('E')+  1;	      int    decPos    =    str.indexOf(lastChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('S')+  str.indexOf('E')+  1;  [CE]  [FE]              NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('S')+  str.indexOf('E')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('S')+  str.indexOf('E')+  1;	      int    decPos    =    str.indexOf(lastChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('e')+  1;  [CE]  [FE]                NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('E')+  str.indexOf('e')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('E')+  str.indexOf('e')+  1;	      int    decPos    =    str.indexOf(lastChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [CE]  [FE]              NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1  +  1;	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  1;  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  1  +  1;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  1  +  1;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	11	None	replace
24	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException( " ");  }	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    if(decPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  if(mant  ==  null)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(mant  ==  null)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	if(mant  ==  null)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    if(decPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(1));  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(str.substring(1));  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(str.substring(1));	      Integer    str    =    createInteger(str);    	non-compiled	[CE]  	13	None	replace
27	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  1  +  1;  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  1  +  1;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('D')+  1  +  1;	  int    decPos    =    str.indexOf('.')+    str.indexOf('D')+    1;    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  decPos  =  str.indexOf('.');  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  [FE]            NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(decPos  >  -1)  {  int  decPos  =  str.indexOf('.');  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	if(decPos  >  -1)  {  int  decPos  =  str.indexOf('.');  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	      int    decPos    =    str.indexOf('.');    if(decPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  1  +  1;  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  1  +  1;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  str.indexOf('-')+  1  +  1;	  int    decPos    =    str.indexOf('.')+    str.indexOf('-')+    1;    	non-compiled	[CE]  	12	None	replace
30	[BUG]  [BUGGY]  Integer  str  =  createInteger(Mant.MIN_VALUE);  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(Mant.MIN_VALUE);  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(Mant.MIN_VALUE);	      Integer    str    =    createInteger(lastChar);    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  char  decPos  =  str.indexOf('.',  lastChar);  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  char  decPos  =  str.indexOf('.',  lastChar);  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	char  decPos  =  str.indexOf('.',  lastChar);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(0,  lastChar));  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(str.substring(0,  lastChar));  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(str.substring(0,  lastChar));	      Integer    str    =    createInteger(lastChar);    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  Integer  str  =  createInteger(str.substring(lastChar));  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  Integer  str  =  createInteger(str.substring(lastChar));  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	Integer  str  =  createInteger(str.substring(lastChar));	      Integer    str    =    createInteger(lastChar);    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  if(decPos  >  -1)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(decPos  >  -1)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	if(decPos  >  -1)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  >  -1)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    if(decPos    >    -1)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('-')+  str.indexOf('E')+  1;  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('-')+  str.indexOf('E')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('-')+  str.indexOf('E')+  1;	      int    decPos    =    str.indexOf(lastChar)+    str.indexOf('E')+    1;    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.',  dec);  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.',  dec);  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.',  dec);	  int    decPos    =    str.indexOf('.',    lastChar);    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('-')+  1;	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  	14	None	replace
38	[BUG]  [BUGGY]  if(mant  ==  null)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [CE]  [FE]                NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  if(mant  ==  null)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number  [BUGGY]    int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	if(mant  ==  null)  {  int  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  if(decPos  <  decPos)  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number	      int    decPos    =    str.indexOf('.')+    str.indexOf('E')+    1;    if(decPos    <    decPos)    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [CE]  [FE]        NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.lastIndexOf('.')+  1;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.lastIndexOf('.')+  1;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  int  decPos  =  str.indexOf('.')+  2;  [CE]  [FE]          NumberFormatException    [CONTEXT]      return  null;  }  if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;    [BUGGY]  int  decPos  =  str.indexOf('.')+  2;  [BUGGY]    int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;  if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos)  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang36/src/java/org/apache/commons/lang3/math/NumberUtils.java	0.8164965809277261	469	469	2	replace	int  decPos  =  str.indexOf('.')+  2;	  int    decPos    =    str.indexOf('.')+    1;    	non-compiled	[CE]  	11	None	replace
