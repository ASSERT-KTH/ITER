bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  (long)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x  ==  (long)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	1	replace
2	[BUG]  [BUGGY]  if(x  ==  (long)x)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  (long)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x  ==  (long)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	1	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x  ==  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	22	replace
4	[BUG]  [BUGGY]  if(x  ==  prev)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x  ==  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	22	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  (int)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x  ==  (int)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	3	replace
6	[BUG]  [BUGGY]  if(x  ==  (int)x)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  (int)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x  ==  (int)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	3	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  >=  (long)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x  >=  (long)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	3	replace
8	[BUG]  [BUGGY]  if(x  >=  (long)x)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  >=  (long)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x  >=  (long)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	3	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if  ((  long)x  ==  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if  ((  long)x  ==  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	22	replace
10	[BUG]  [BUGGY]  if  ((  long)x  ==  prev)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if  ((  long)x  ==  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if  ((  long)x  ==  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	22	replace
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x!=  (long)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x!=  (long)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	23	replace
12	[BUG]  [BUGGY]  if(x!=  (long)x)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x!=  (long)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x!=  (long)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	23	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  (double)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x  ==  (double)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	3	replace
14	[BUG]  [BUGGY]  if(x  ==  (double)x)  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  (double)x)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x  ==  (double)x)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	3	replace
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if  ((  long)x  >=  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if  ((  long)x  >=  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	21	replace
16	[BUG]  [BUGGY]  if  ((  long)x  >=  prev)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if  ((  long)x  >=  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if  ((  long)x  >=  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	21	replace
17	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	  	if  ((long)  x  ==  x)  {  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]    double  value  =  getLastChar();  [CE]  variable  value  is  already  defined  in  method  addNumber(double)  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    double  value  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    double  value  =  getLastChar();		non-compiled	[CE]  variable  value  is  already  defined  in  method  addNumber(double)	10	None	add
19	[BUG]  [BUGGY]    double  x  =  getLastChar();  [CE]  variable  x  is  already  defined  in  method  addNumber(double)  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    double  x  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    double  x  =  getLastChar();		non-compiled	[CE]  variable  x  is  already  defined  in  method  addNumber(double)	10	None	add
20	[BUG]  [BUGGY]    double  mantissa  =  getLastChar();  [CE]  variable  mantissa  is  already  defined  in  method  addNumber(double)  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    double  mantissa  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    double  mantissa  =  getLastChar();		non-compiled	[CE]  variable  mantissa  is  already  defined  in  method  addNumber(double)	10	None	add
21	[BUG]  [BUGGY]    int  mantissa  =  getLastChar();  [CE]  variable  mantissa  is  already  defined  in  method  addNumber(double)  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  mantissa  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  mantissa  =  getLastChar();		non-compiled	[CE]  variable  mantissa  is  already  defined  in  method  addNumber(double)	10	None	add
22	[BUG]  [BUGGY]    int  x  =  getLastChar();  [CE]  variable  x  is  already  defined  in  method  addNumber(double)  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  x  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  x  =  getLastChar();		non-compiled	[CE]  variable  x  is  already  defined  in  method  addNumber(double)	10	None	add
23	[BUG]  [BUGGY]    int  value  =  getLastChar();  [CE]  variable  value  is  already  defined  in  method  addNumber(double)  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  value  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  value  =  getLastChar();		non-compiled	[CE]  variable  value  is  already  defined  in  method  addNumber(double)	10	None	add
24	[BUG]  [BUGGY]    int  mantissa  =  Math.pow(10,  prev);  [CE]  possible  loss  of  precision  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  mantissa  =  Math.pow(10,  prev);  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  mantissa  =  Math.pow(10,  prev);		non-compiled	[CE]  possible  loss  of  precision	10	None	add
25	[BUG]  [BUGGY]    Integer  value  =  getLastChar();  [CE]  incompatible  types  [FE]                  ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    Integer  value  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    Integer  value  =  getLastChar();		non-compiled	[CE]  incompatible  types	10	None	add
26	[BUG]  [BUGGY]    int  mantissa  =  getMeanOp();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  mantissa  =  getMeanOp();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  mantissa  =  getMeanOp();		non-compiled	[CE]  cannot  find  symbol	10	None	add
27	[BUG]  [BUGGY]    double  value  =  Math.pow(10,  prev);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    double  value  =  Math.pow(10,  prev);  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    double  value  =  Math.pow(10,  prev);		non-compiled	[CE]  cannot  find  symbol	10	None	add
28	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  Long.MIN_VALUE)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x  ==  Long.MIN_VALUE)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	22	replace
29	[BUG]  [BUGGY]  if(x  ==  Long.MIN_VALUE)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  ==  Long.MIN_VALUE)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x  ==  Long.MIN_VALUE)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	22	replace
30	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  <  0)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if(x  <  0)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	21	replace
31	[BUG]  [BUGGY]  if(x  <  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if(x  <  0)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if(x  <  0)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	21	replace
32	[BUG]  [BUGGY]    int  value  =  Math.pow(10,  prev);  [CE]  possible  loss  of  precision  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  value  =  Math.pow(10,  prev);  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  value  =  Math.pow(10,  prev);		non-compiled	[CE]  possible  loss  of  precision	10	None	add
33	[BUG]  [BUGGY]    int  value  =(int)Math.pow(10,  prev);  [CE]  variable  value  is  already  defined  in  method  addNumber(double)  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  value  =(int)Math.pow(10,  prev);  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  value  =(int)Math.pow(10,  prev);		non-compiled	[CE]  variable  value  is  already  defined  in  method  addNumber(double)	10	None	add
34	[BUG]  [BUGGY]    double  value  =  getLastChar().doubleValue();  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    double  value  =  getLastChar().doubleValue();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    double  value  =  getLastChar().doubleValue();		non-compiled	[CE]  char  cannot  be  dereferenced	10	None	add
35	[BUG]  [BUGGY]    int  value  =  getLastChar().doubleValue();  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  value  =  getLastChar().doubleValue();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  value  =  getLastChar().doubleValue();		non-compiled	[CE]  char  cannot  be  dereferenced	10	None	add
36	[BUG]  [BUGGY]    int  value  =(int)Math.pow(10,  x);  [CE]  variable  value  is  already  defined  in  method  addNumber(double)  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  value  =(int)Math.pow(10,  x);  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  value  =(int)Math.pow(10,  x);		non-compiled	[CE]  variable  value  is  already  defined  in  method  addNumber(double)	10	None	add
37	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    x  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	    x  =  getLastChar();		compilable	  [FE]  ComparisonFailure  	10	24	add
38	[BUG]  [BUGGY]    x  =  getLastChar();  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    x  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    x  =  getLastChar();		compilable	  [FE]  ComparisonFailure  	10	24	add
39	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if((  long)x!=  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	if((  long)x!=  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	4	replace
40	[BUG]  [BUGGY]  if((  long)x!=  prev)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]  if((  long)x!=  prev)  {  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	if((  long)x!=  prev)  {	if  ((long)  x  ==  x)  {  	compilable	  [FE]  ComparisonFailure  	9	4	replace
41	[BUG]  [BUGGY]    char  value  =  getLastChar();  [CE]  variable  value  is  already  defined  in  method  addNumber(double)  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    char  value  =  getLastChar();  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    char  value  =  getLastChar();		non-compiled	[CE]  variable  value  is  already  defined  in  method  addNumber(double)	10	None	add
42	[BUG]  [BUGGY]    int  mantissa  =  Math.pow(10,  prev  +  1);  [CE]  possible  loss  of  precision  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  mantissa  =  Math.pow(10,  prev  +  1);  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  mantissa  =  Math.pow(10,  prev  +  1);		non-compiled	[CE]  possible  loss  of  precision	10	None	add
43	[BUG]  [BUGGY]    int  mantissa  =  Math.pow(10,  x);  [CE]  possible  loss  of  precision  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    int  mantissa  =  Math.pow(10,  x);  [BUGGY]  if  ((long)  x  ==  x)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	    int  mantissa  =  Math.pow(10,  x);		non-compiled	[CE]  possible  loss  of  precision	10	None	add
