bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(x)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Long.toString(x)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(x)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
2	[BUG]  [BUGGY]  add(Integer.toString(x)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(x)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(x)+  Integer.toString(exp));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
3	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(x));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Integer.toString(x));	  add(Long.toString(value)+    Integer.toString(x));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
4	[BUG]  [BUGGY]  add(Integer.toString(value)+  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+  Long.toString(exp));	  add(Long.toString(value)+    Integer.toString(x));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
5	[BUG]  [BUGGY]  add(Long.toString(x)+ "Ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ "Ee "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "Ee "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
6	[BUG]  [BUGGY]  add(Long.toString(x)+ ",  Ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ ",  Ee "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ ",  Ee "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
7	[BUG]  [BUGGY]  add(long.toString(mantissa)+  Long.toString(exp));  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(mantissa)+  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(mantissa)+  Long.toString(exp));	  add(long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  class  expected	21	None	replace
8	[BUG]  [BUGGY]  add(long.toString(value)+  Long.toString(exp));  [CE]  class  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(value)+  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value)+  Long.toString(exp));	  add(long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  class  expected	21	None	replace
9	[BUG]  [BUGGY]  add(long.toString(mantissa)+  Long.toString(x));  [CE]  class  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(mantissa)+  Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(mantissa)+  Long.toString(x));	  add(long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  class  expected	21	None	replace
10	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }	  add(Long.toString(value)+    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
11	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Long.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Long.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Long.toString(exp));  }	  add(Long.toString(value)+    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
12	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(mantissa)+  Integer.toString(exp));  }	  add(Long.toString(value)+    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
13	[BUG]  [BUGGY]  add(Integer.toString(mantissa)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(mantissa)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(mantissa)+  Integer.toString(exp));	  add(Long.toString(mantissa)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  add(long.toString(mantissa)+  Integer.toString(exp));  [CE]  class  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(mantissa)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(mantissa)+  Integer.toString(exp));	  add(Long.toString(mantissa)+    Integer.toString(exp));    	non-compiled	[CE]  class  expected	1	None	replace
15	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",E "  +  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",E "  +  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",E "  +  Long.toString(exp));	  add(Long.toString(x)+   "E   "    +    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  add(Long.toString(exp)+ "E "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(exp)+ "E "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(exp)+ "E "  +  Integer.toString(value));	  if(mantissa)    {    add(Long.toString(value)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  add(Long.toString(value)+ "E ",  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "E ",  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "E ",  Integer.toString(exp));	  if(mantissa)    {    add(Long.toString(value)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "N't   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "N't   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "N't   "  +  Integer.toString(exp));	  add(Long.toString(value)+   "N't       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
19	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",N't   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",N't   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",N't   "  +  Integer.toString(exp));	  add(Long.toString(value)+   "N't       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
20	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",  M   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",  M   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",  M   "  +  Integer.toString(exp));	  add(Long.toString(value)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
21	[BUG]  [BUGGY]  add(Integer.toString(value)+ "M "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+ "M "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+ "M "  +  Integer.toString(exp));	  add(Long.toString(value)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
22	[BUG]  [BUGGY]  add(Long.toString(x)+ "E ",  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ "E ",  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "E ",  Integer.toString(exp));	  add(Long.toString(mantissa)+   "E   ",    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(mantissa)  {  add(Integer.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Integer.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Integer.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }	  add(Integer.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  if(mantissa)  {  add(Integer.toString(value)+  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Integer.toString(value)+  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Integer.toString(value)+  Integer.toString(exp));  }	  add(Integer.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(mantissa));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+  Long.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+  Long.toString(mantissa));	  add(Long.toString(mantissa)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
26	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(value));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+  Long.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+  Long.toString(value));	  add(Long.toString(mantissa)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
27	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Long.toString(value));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+  Long.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Long.toString(value));	  add(Long.toString(mantissa)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
28	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",N   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",N   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",N   "  +  Integer.toString(exp));	  add(Long.toString(x)+   "N       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  add(Long.toString(x)+   "M "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+   "M "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+   "M "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
30	[BUG]  [BUGGY]  add(Long.toString(value)+ "M "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "M "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "M "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
31	[BUG]  [BUGGY]  add(Long.toString(value)+ "M "  +  Integer.toString(mantissa));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "M "  +  Integer.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "M "  +  Integer.toString(mantissa));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
32	[BUG]  [BUGGY]  append(Long.toString(mantissa));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  append(Long.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Long.toString(mantissa));	  append(Long.toString(value));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
33	[BUG]  [BUGGY]  append(Long.toString(x));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  append(Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Long.toString(x));	  append(Long.toString(value));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
34	[BUG]  [BUGGY]  append(Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  append(Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Integer.toString(value));	  append(Long.toString(value));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
35	[BUG]  [BUGGY]  append(Long.toString(value)+  Long.toString(x));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  append(Long.toString(value)+  Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Long.toString(value)+  Long.toString(x));	  append(Long.toString(value));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
36	[BUG]  [BUGGY]  add(long.toString(x)+  Integer.toString(exp));  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(x)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(x)+  Integer.toString(exp));	  add(long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  class  expected	3	None	replace
37	[BUG]  [BUGGY]  add(Long.toString(x)+ "N   "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ "N   "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "N   "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "N       "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
38	[BUG]  [BUGGY]  add(Long.toString(value)+ "N   "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "N   "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "N   "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "N       "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
39	[BUG]  [BUGGY]  add(Long.toString(value)+ "N   "  +  Integer.toString(mantissa));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "N   "  +  Integer.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "N   "  +  Integer.toString(mantissa));	  add(Long.toString(mantissa)+   "N       "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
40	[BUG]  [BUGGY]  add(Long.toString(x)+ ",N   "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ ",N   "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ ",N   "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "N       "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
41	[BUG]  [BUGGY]  add(Long.toString(value)+ "Number "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "Number "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "Number "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Number   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
42	[BUG]  [BUGGY]  add(Long.toString(x)+ "Number "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ "Number "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "Number "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Number   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
43	[BUG]  [BUGGY]  add(Long.toString(x)+ ",  Number   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ ",  Number   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ ",  Number   "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Number   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
44	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "M  -   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "M  -   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "M  -   "  +  Integer.toString(exp));	  add(Long.toString(value)+   "M    -       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "  -   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "  -   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "  -   "  +  Integer.toString(exp));	  add(Long.toString(value)+   "M    -       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
46	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "E "  +  Integer.toString(value));	  add(Long.toString(value)+   "E   "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+  Long.toString(exp));	  add(Long.toString(value)+    Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
48	[BUG]  [BUGGY]  add(Long.toString(exp)+  Long.toString(value));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(exp)+  Long.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(exp)+  Long.toString(value));	  add(Long.toString(value)+    Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
49	[BUG]  [BUGGY]  add(Long.toString(value)+ "X "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "X "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "X "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "X   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
50	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "X "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "X "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "X "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "X   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
51	[BUG]  [BUGGY]  add(Long.toString(x)+ "X "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+ "X "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "X "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "X   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
52	[BUG]  [BUGGY]  add(long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(mantissa)+ "E "  +  Integer.toString(exp));	  add(long.toString(value)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  class  expected	41	None	replace
53	[BUG]  [BUGGY]  add(Long.toString(value)+ "E  E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "E  E "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "E  E "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "E    E       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
54	[BUG]  [BUGGY]  add(Long.toString(x)+   "E  E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+   "E  E "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+   "E  E "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "E    E       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
55	[BUG]  [BUGGY]  add(Number.toString(mantissa));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Number.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Number.toString(mantissa));	  add(Number.toString(value));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
56	[BUG]  [BUGGY]  add(Long.toString(exp)+  Long.toString(mantissa));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(exp)+  Long.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(exp)+  Long.toString(mantissa));	  add(Long.toString(mantissa)+    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Integer.toString(mantissa)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
58	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E   "  +  Integer.toString  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E   "  +  Integer.toString  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E   "  +  Integer.toString	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Integer.toString(mantissa)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
59	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E   "  +  Integer.toString(  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E   "  +  Integer.toString(  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E   "  +  Integer.toString(	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Integer.toString(mantissa)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
60	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  e)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  e)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	try  {  [Delete]  catch(NumberFormatException  e)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Integer.toString(mantissa)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
61	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  ex)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(ex  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  ex)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(ex  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	try  {  [Delete]  catch(NumberFormatException  ex)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E   "  +  Integer.toString(ex	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Integer.toString(mantissa)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
62	[BUG]  [BUGGY]  add(Integer.toString(mantissa)+ "E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(mantissa)+ "E "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(mantissa)+ "E "  +  Integer.toString(exp));	  add(Integer.toString(value)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E "  +  Integer.toString(  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E "  +  Integer.toString(  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E "  +  Integer.toString(	  add(Long.toString(x)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  ')'  expected	22	None	replace
64	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E "  +  Integer.toString  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E "  +  Integer.toString  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E "  +  Integer.toString	  add(Long.toString(x)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  	22	None	replace
65	[BUG]  [BUGGY]  add(long.toString(value)+ "N   "  +  Integer.toString(exp));  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(value)+ "N   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value)+ "N   "  +  Integer.toString(exp));	  add(Long.toString(value)+   "N       "    +    Integer.toString(exp));    	non-compiled	[CE]  class  expected	12	None	replace
66	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "M   ")+  Integer.toString(exp));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "M   ")+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "M   ")+  Integer.toString(exp));	  add(Long.toString(value)+   "M   ")+    Integer.toString(exp));    	non-compiled	[CE]  not  a  statement	36	None	replace
67	[BUG]  [BUGGY]  add(Integer.toString(value)+ "M   ")+  Integer.toString(exp));  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+ "M   ")+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+ "M   ")+  Integer.toString(exp));	  add(Long.toString(value)+   "M   ")+    Integer.toString(exp));    	non-compiled	[CE]  not  a  statement	36	None	replace
68	[BUG]  [BUGGY]  add(Integer.toString(value)+ "M   ")+  Long.toString(exp));  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+ "M   ")+  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+ "M   ")+  Long.toString(exp));	  add(Long.toString(value)+   "M   ")+    Integer.toString(exp));    	non-compiled	[CE]  not  a  statement	36	None	replace
69	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString(  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString(  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString(	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
70	[BUG]  [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nf)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString(  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nf)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString(  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	try  {  [Delete]  catch(NumberFormatException  nf)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+   "E   "  +  Integer.toString(	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",Ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",Ee "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",Ee "  +  Integer.toString(exp));	  add(Long.toString(value)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
74	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "Ee ",  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "Ee ",  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "Ee ",  Integer.toString(exp));	  add(Long.toString(value)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
75	[BUG]  [BUGGY]  add(Integer.toString(value)+ "Ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+ "Ee "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+ "Ee "  +  Integer.toString(exp));	  add(Long.toString(value)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
76	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Long.toString(exp)+  1);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+  Long.toString(exp)+  1);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Long.toString(exp)+  1);	  add(Long.toString(value)+    Long.toString(x)+    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
77	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Long.toString(x)+  1);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+  Long.toString(x)+  1);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Long.toString(x)+  1);	  add(Long.toString(value)+    Long.toString(x)+    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
78	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(mantissa)+  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Long.toString(mantissa)+  1);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(mantissa)+  1);	  add(Long.toString(value)+    Long.toString(x)+    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
79	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(exp)+  1);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Long.toString(exp)+  1);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(exp)+  1);	  add(Long.toString(value)+    Long.toString(x)+    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
80	[BUG]  [BUGGY]  add(Long.toString(mantissa)/  Long.toString(x));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)/  Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)/  Long.toString(x));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
81	[BUG]  [BUGGY]  add(Long.toString(mantissa)/  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)/  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)/  Long.toString(exp));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
82	[BUG]  [BUGGY]  add(Long.toString(value)/  Long.toString(mantissa));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Long.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Long.toString(mantissa));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
83	[BUG]  [BUGGY]  add(Long.toString(value)/  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Long.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Long.toString(exp));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
84	[BUG]  [BUGGY]  add(long.toString(value)/  Long.toString(x));  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(value)/  Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value)/  Long.toString(x));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  class  expected	49	None	replace
85	[BUG]  [BUGGY]  add(Long.toString(value)/  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Integer.toString(exp));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
86	[BUG]  [BUGGY]  add(Integer.toString(value)/  Long.toString(x));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)/  Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)/  Long.toString(x));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
87	[BUG]  [BUGGY]  add(Integer.toString(value)+  Integer.toString(x));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+  Integer.toString(x));	  add(Long.toString(value)+    Integer.toString(x));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
88	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(x)+  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+  Integer.toString(value));	  add(Long.toString(value)+    Integer.toString(x));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
89	[BUG]  [BUGGY]  add(long.toString(x)+  Long.toString(value));  [CE]  class  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(x)+  Long.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(x)+  Long.toString(value));	  add(long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  class  expected	21	None	replace
90	[BUG]  [BUGGY]  add(Number.toString(x));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Number.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Number.toString(x));	  add(Number.toString(value));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
91	[BUG]  [BUGGY]  add(Long.toString(value)+ "NaN "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "NaN "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "NaN "  +  Integer.toString(exp));	  add(Long.toString(value)+   "N       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "EEE "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "EEE "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "EEE "  +  Integer.toString(exp));	  add(Long.toString(value)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
93	[BUG]  [BUGGY]  add(Long.toString(value)+ "Ee "  +  Integer.toString(x));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "Ee "  +  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "Ee "  +  Integer.toString(x));	  add(Long.toString(value)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
94	[BUG]  [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E  E   "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E  E   "  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E  E   "  +  Integer.toString(exp));  }	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
95	[BUG]  [BUGGY]  add(Integer.toString(value)+  Integer.toString(mantissa));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+  Integer.toString(mantissa));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+  Integer.toString(mantissa));	  add(Integer.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
96	[BUG]  [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E "  +  Integer.toString  [CE]  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E "  +  Integer.toString  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+   "E "  +  Integer.toString	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Integer.toString(mantissa)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  	47	None	replace
97	[BUG]  [BUGGY]  add(Long.toString(value)+ "N't "  +  Integer.toString(x));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "N't "  +  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "N't "  +  Integer.toString(x));	  add(Long.toString(value)+   "N't       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
98	[BUG]  [BUGGY]  add(Long.toString(value)+ ",N't "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ ",N't "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",N't "  +  Integer.toString(exp));	  add(Long.toString(value)+   "N't       "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
99	[BUG]  [BUGGY]  add(Long.toString(value)+   "M "  +  Integer.toString(x));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+   "M "  +  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+   "M "  +  Integer.toString(x));	  add(Long.toString(value)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
100	[BUG]  [BUGGY]  add(Long.toString(value)+ ",Number "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ ",Number "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",Number "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Number   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
101	[BUG]  [BUGGY]  add(Long.toString(value)+   "M   ")+  Integer.toString(x));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+   "M   ")+  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+   "M   ")+  Integer.toString(x));	  add(Long.toString(value)+   "M   ")+    Integer.toString(exp));    	non-compiled	[CE]  not  a  statement	36	None	replace
102	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Integer.toString(value));	  add(Long.toString(mantissa)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
103	[BUG]  [BUGGY]  add(Integer.toString(value)+  Long.toString(x));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(value)+  Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+  Long.toString(x));	  add(Long.toString(mantissa)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
104	[BUG]  [BUGGY]  add(Long.toString(value)+ "E "  +  Long.toString(x));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "E "  +  Long.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "E "  +  Long.toString(x));	  add(Long.toString(value)+   "E   "    +    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  add(Long.toString(value)+ "X ",  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "X ",  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "X ",  Integer.toString(exp));	  add(Long.toString(mantissa)+   "X   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
106	[BUG]  [BUGGY]  add(Long.toString(value)+ ",  X "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ ",  X "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",  X "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "X   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
107	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(x)+  2);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Long.toString(x)+  2);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(x)+  2);	  add(Long.toString(value)+    Long.toString(x)+    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
108	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(x)+  3);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Long.toString(x)+  3);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(x)+  3);	  add(Long.toString(value)+    Long.toString(x)+    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
109	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(x)/  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+  Long.toString(x)/  1);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(x)/  1);	  add(Long.toString(value)+    Long.toString(x)+    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
110	[BUG]  [BUGGY]  add(Long.toString(value)+ ",Ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ ",Ee "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",Ee "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
111	[BUG]  [BUGGY]  add(Long.toString(value)+ "ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "ee "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "ee "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
112	[BUG]  [BUGGY]  add(Long.toString(value)+ "EEE "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ "EEE "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "EEE "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
113	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",E "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",E "  +  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",E "  +  Integer.toString(value));	  add(Long.toString(value)+   "E   "    +    Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
114	[BUG]  [BUGGY]  add(long.toString(value)+  Integer.toString(x));  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(value)+  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value)+  Integer.toString(x));	  add(long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  class  expected	3	None	replace
115	[BUG]  [BUGGY]  add(Long.toString(value)+ ",E ",  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)+ ",E ",  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",E ",  Integer.toString(exp));	  add(Long.toString(mantissa)+   "E   ",    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
116	[BUG]  [BUGGY]  add(long.toString(x)+  Integer.toString(value));  [CE]  class  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(long.toString(x)+  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(x)+  Integer.toString(value));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  class  expected	35	None	replace
117	[BUG]  [BUGGY]  add(Integer.toString(x)+  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Integer.toString(x)+  Integer.toString(value));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(x)+  Integer.toString(value));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
118	[BUG]  [BUGGY]  append(Long.toString(value)+  mantissa);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  append(Long.toString(value)+  mantissa);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Long.toString(value)+  mantissa);	  append(Long.toString(value));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
119	[BUG]  [BUGGY]  append(Long.toString(value)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  append(Long.toString(value)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Long.toString(value)+  Integer.toString(exp));	  append(Long.toString(value));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
120	[BUG]  [BUGGY]  add(Long.toString(value)/  Long.toString(x),  binOp);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Long.toString(x),  binOp);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Long.toString(x),  binOp);	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
121	[BUG]  [BUGGY]  add(Long.toString(value)/  Long.toString(x),  prev);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Long.toString(x),  prev);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Long.toString(x),  prev);	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
122	[BUG]  [BUGGY]  add(Long.toString(value)/  Long.toString(x)+  1);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Long.toString(x)+  1);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Long.toString(x)+  1);	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
123	[BUG]  [BUGGY]  add(Long.toString(value)/  Long.toString(x  +  1));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Long.toString(x  +  1));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Long.toString(x  +  1));	  add(Long.toString(value)/    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
124	[BUG]  [BUGGY]  gglingDependencyInclusive(Long.toString(value)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  gglingDependencyInclusive(Long.toString(value)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	gglingDependencyInclusive(Long.toString(value)+  Integer.toString(exp));	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
125	[BUG]  [BUGGY]  gglingDependencyChecker.add(Long.toString(value)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  gglingDependencyChecker.add(Long.toString(value)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	gglingDependencyChecker.add(Long.toString(value)+  Integer.toString(exp));	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
126	[BUG]  [BUGGY]  parent.add(Long.toString(value)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  parent.add(Long.toString(value)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	parent.add(Long.toString(value)+  Integer.toString(exp));	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
127	[BUG]  [BUGGY]  parent.addValue(Long.toString(value)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  parent.addValue(Long.toString(value)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	parent.addValue(Long.toString(value)+  Integer.toString(exp));	  if(mantissa)    {    add(Long.toString(value)+    Integer.toString(exp));    }    else    {    add(Long.toString(mantissa)+   "E       "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
128	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "  value   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "  value   "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "  value   "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Ee   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
129	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",Number "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",Number "  +  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",Number "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "Number   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
130	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "N'T'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H  [CE]  unclosed  string  literal  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "N'T'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "N'T'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H'H	  add(Long.toString(value)+   "N       "    +    Integer.toString(exp));    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
131	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "X ",  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ "X ",  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "X ",  Integer.toString(exp));	  add(Long.toString(mantissa)+   "E   ",    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
132	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",  M   ")+  Integer.toString(exp));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(mantissa)+ ",  M   ")+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",  M   ")+  Integer.toString(exp));	  add(Long.toString(value)+   "M   ")+    Integer.toString(exp));    	non-compiled	[CE]  not  a  statement	36	None	replace
133	[BUG]  [BUGGY]  add(Long.toString(value)/  Integer.toString(x));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Long.toString(value)/  Integer.toString(x));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Integer.toString(x));	  add(Long.toString(value)+    Integer.toString(x));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
134	[BUG]  [BUGGY]  append(Long.toString(value)+  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  append(Long.toString(value)+  1);  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Long.toString(value)+  1);	  append(Long.toString(value));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
135	[BUG]  [BUGGY]  add(Number.toString(mantissa)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  add(Number.toString(mantissa)+  Integer.toString(exp));  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Number.toString(mantissa)+  Integer.toString(exp));	  add(Integer.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
136	[BUG]  [BUGGY]  if(binOp)  {  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(binOp)  {  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(binOp)  {  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  }	  if(mantissa)    {    add(Long.toString(value)+   "E   "    +    Integer.toString(exp));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
137	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(x  +  Integer.toString(exp));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  }  else  {      [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(x  +  Integer.toString(exp));  }  [BUGGY]      }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(value)+  Long.toString(exp));  }  else  {  add(Long.toString(x  +  Integer.toString(exp));  }	  add(Long.toString(value)+    Long.toString(exp));    	non-compiled	[CE]  	19	None	replace
