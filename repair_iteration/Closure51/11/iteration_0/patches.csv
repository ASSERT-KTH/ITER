bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  add(Long.toString(mantissa));  [CE]  illegal  start  of  type  [FE]    ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(mantissa));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]      ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Long.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "E "  +  Long.toString(exp));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ ",E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(mantissa)+ ",E "  +  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ ",E "  +  Integer.toString(exp));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  add(Integer.toString(value));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Integer.toString(value));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]    [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	  	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]    ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "E "  +  Integer.toString(exp));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(x));  [CE]  illegal  start  of  type  [FE]      ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(value)+  Long.toString(x));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(x));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(value)+  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Integer.toString(exp));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "N "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]    ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(mantissa)+ "N "  +  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "N "  +  Integer.toString(exp));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
11	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "M "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]      ComparisonFailure  [CONTEXT]  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  [BUGGY]  add(Long.toString(mantissa)+ "M "  +  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "M "  +  Integer.toString(exp));	add(Long.toString(value));  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
