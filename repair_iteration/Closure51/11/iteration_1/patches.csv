bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Integer.toString(exp));	  add(Long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Long.toString(mantissa)+ "E   "  +  Integer.toString(exp));  }	  add(Long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  add(long.toString(value)+  Integer.toString(exp));  [CE]  class  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(long.toString(value)+  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value)+  Integer.toString(exp));	  add(Long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  class  expected	9	None	replace
4	[BUG]  [BUGGY]  add(Integer.toString(value)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Integer.toString(value)+  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+  Integer.toString(exp));	  add(Long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "E ",  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+ "E ",  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "E ",  Integer.toString(exp));	  add(Long.toString(value)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  if(mantissa)  {  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  }  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(value)+ "E "  +  Integer.toString(exp));  }	  add(Long.toString(value)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  add(Integer.toString(value)+ "E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Integer.toString(value)+ "E "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(value)+ "E "  +  Integer.toString(exp));	  add(Long.toString(value)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  add(Long.toString(value)+ ",E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ ",E "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",E "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   ",E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  add(Long.toString(x)+ ",E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(x)+ ",E "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ ",E "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   ",E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  add(Long.toString(value)+ "E "  +  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "E "  +  Long.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "E "  +  Long.toString(exp));	  add(Long.toString(mantissa)+   "E   "    +    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  add(Long.toString(x)+ "E "  +  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(x)+ "E "  +  Long.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "E "  +  Long.toString(exp));	  add(Long.toString(mantissa)+   "E   "    +    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  add(Long.toString(value)+ "N   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "N   "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "N   "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "N   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  add(Long.toString(x)+ "N   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(x)+ "N   "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "N   "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "N   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "Number "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+ "Number "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "Number "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "N   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  add(Long.toString(value)+ "E "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "E "  +  Integer.toString(value));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "E "  +  Integer.toString(value));	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  add(Integer.toString(mantissa));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Integer.toString(mantissa));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(mantissa));	  add(Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+  Long.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Long.toString(exp));	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Long.toString(x));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+  Long.toString(x));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+  Long.toString(x));	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+  Long.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(exp));	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(mantissa));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+  Long.toString(mantissa));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(mantissa));	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  add(long.toString(value)+  Long.toString(x));  [CE]  class  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(long.toString(value)+  Long.toString(x));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value)+  Long.toString(x));	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  class  expected	8	None	replace
22	[BUG]  [BUGGY]  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(x)+ "E "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+ "E "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  add(Long.toString(value)+ "M "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "M "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "M "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  add(Long.toString(x)+   "M "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(x)+   "M "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+   "M "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  add(Long.toString(x));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(x));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x));	  add(Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  add(Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(exp));	  add(Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  add(Integer.toString(x));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Integer.toString(x));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Integer.toString(x));	  add(Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  add(Long.toString(exp));  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(exp));	  add(Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  add(long.toString(x));  [CE]  class  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(long.toString(x));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(x));	  add(Long.toString(mantissa));    	non-compiled	[CE]  class  expected	1	None	replace
30	[BUG]  [BUGGY]  add(Long.toString(value)+ "Ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "Ee "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "Ee "  +  Integer.toString(exp));	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  add(long.toString(value));  [CE]  class  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(long.toString(value));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value));	  add(Integer.toString(value));    	non-compiled	[CE]  class  expected	5	None	replace
32	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "Ee "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+ "Ee "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "Ee "  +  Integer.toString(exp));	  add(Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  add(Long.toString(value)+  Integer.toString(x));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+  Integer.toString(x));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Integer.toString(x));	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  add(Long.toString(value)+  Long.toString(x)+  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+  Long.toString(x)+  1);  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+  Long.toString(x)+  1);	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(x)+  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(x)+  Integer.toString(exp));	  add(Long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  add(Long.toString(value)+ "M ")+  Integer.toString(exp));  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "M ")+  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "M ")+  Integer.toString(exp));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  not  a  statement	11	None	replace
37	[BUG]  [BUGGY]  add(Long.toString(value)+ "M  -   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "M  -   "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "M  -   "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
38	[BUG]  [BUGGY]  add(Long.toString(value)+ ",N   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ ",N   "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",N   "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "N   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  add(Long.toString(value)+ "N't   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ "N't   "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ "N't   "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "N   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  add(Long.toString(value)+ ",E "  +  Long.toString(exp));  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)+ ",E "  +  Long.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)+ ",E "  +  Long.toString(exp));	  add(Long.toString(mantissa)+   "E   "    +    Long.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  add(long.toString(value)+ "E "  +  Integer.toString(exp));  [CE]  class  expected  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(long.toString(value)+ "E "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(long.toString(value)+ "E "  +  Integer.toString(exp));	  add(Long.toString(value)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  class  expected	7	None	replace
42	[BUG]  [BUGGY]  add(Number.toString(value));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Number.toString(value));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Number.toString(value));	  add(Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "E  E   "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+ "E  E   "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "E  E   "  +  Integer.toString(exp));	  add(Integer.toString(value));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "X "  +  Integer.toString(exp));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+ "X "  +  Integer.toString(exp));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "X "  +  Integer.toString(exp));	  add(Long.toString(mantissa)+   "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "M "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+ "M "  +  Integer.toString(value));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "M "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "M   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "N   "  +  Integer.toString(value));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(mantissa)+ "N   "  +  Integer.toString(value));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(mantissa)+ "N   "  +  Integer.toString(value));	  add(Long.toString(mantissa)+   "N   "    +    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E "  +  Integer.toString(exp));  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  if(mantissa)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E "  +  Integer.toString(exp));  }  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	if(mantissa)  {  add(Long.toString(value)+  Integer.toString(exp));  }  else  {  add(Integer.toString(mantissa)+ "E "  +  Integer.toString(exp));  }	  add(Long.toString(value)+    Integer.toString(exp));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  append(Long.toString(value));  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  append(Long.toString(value));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	append(Long.toString(value));	  add(Long.toString(mantissa));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
49	[BUG]  [BUGGY]  add(Long.toString(value)/  Long.toString(x));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  }  else  {    [BUGGY]  add(Long.toString(value)/  Long.toString(x));  [BUGGY]    }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	add(Long.toString(value)/  Long.toString(x));	  add(Long.toString(value)+    Long.toString(x));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
