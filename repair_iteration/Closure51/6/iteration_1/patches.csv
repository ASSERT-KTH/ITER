bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  value  =  (int)x  &  0xFFFF;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  (int)x  &  0xFFFF;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  &  0xFFFF;	  long    value    =    (long)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	6	None	replace
2	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xFFFFL;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  &  0xFFFFL;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xFFFFL;	  long    value    =    (long)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	6	None	replace
3	[BUG]  [BUGGY]  long  value  =  (long)x  /  0xFFFF;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  /  0xFFFF;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  0xFFFF;	  long    value    =    (long)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  long  value  =  (long)x  -  0xFFFF;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  -  0xFFFF;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  -  0xFFFF;	  long    value    =    (long)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	6	None	replace
5	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
6	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
7	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
8	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
9	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
10	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
11	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
12	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
13	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  prev));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
14	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
15	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
16	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  prev));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
17	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
18	[BUG]  [BUGGY]  char  mantissa  =  getLastChar();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  mantissa  =  getLastChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  getLastChar();	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
19	[BUG]  [BUGGY]  long  mantissa  =  getLastChar();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  mantissa  =  getLastChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getLastChar();	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
20	[BUG]  [BUGGY]  double  mantissa  =  getLastChar();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  mantissa  =  getLastChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getLastChar();	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
21	[BUG]  [BUGGY]  int  mantissa  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  getLastChar()  +  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLastChar()  +  1;	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
22	[BUG]  [BUGGY]  int  mantissa  =  getFirstChar();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  getFirstChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getFirstChar();	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
23	[BUG]  [BUGGY]  int  mantissa  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  getLastChar()  -  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLastChar()  -  1;	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
24	[BUG]  [BUGGY]  int  mantissa  =  getLastChar().length;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  getLastChar().length;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLastChar().length;	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  int  mantissa  =  getLowerCase();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  getLowerCase();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLowerCase();	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  char  value  =  getLastChar();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =  getLastChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  getLastChar();	      int    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	9	None	replace
27	[BUG]  [BUGGY]  long  value  =  getLastChar();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  getLastChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar();	      int    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	9	None	replace
28	[BUG]  [BUGGY]  int  value  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  getLastChar()  +  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar()  +  1;	      int    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	9	None	replace
29	[BUG]  [BUGGY]  int  value  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  getLastChar()  -  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar()  -  1;	      int    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  int  value  =  getLastChar().length;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  getLastChar().length;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().length;	      int    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	9	None	replace
31	[BUG]  [BUGGY]  int  value  =  getFirstChar();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  getFirstChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getFirstChar();	      int    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	9	None	replace
32	[BUG]  [BUGGY]  int  value  =  getLongValue();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  getLongValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLongValue();	      int    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	9	None	replace
33	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  prev);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
34	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  x  +  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  +  1);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
35	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  x);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =  Math.pow(10,  x);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  x);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
36	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  x  -  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  -  1);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
37	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  -  prev);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  x  -  prev);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  -  prev);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
38	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  Math.pow(10,  x);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
39	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  *  10);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  x  *  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  *  10);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
40	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x)-  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  x)-  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x)-  1;	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
41	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  prev));	      int    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	15	None	replace
42	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));	      int    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	15	None	replace
43	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));	      int    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	15	None	replace
44	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);	      int    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	15	None	replace
45	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  prev));	      int    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	15	None	replace
46	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  12));  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  12));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  12));	      int    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	15	None	replace
47	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev  -  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  1);	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
48	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev  +  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  +  1);	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
49	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  *  10);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev  *  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  *  10);	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
50	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  10);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev  -  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  10);	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
51	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)-  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev)-  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)-  1;	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
52	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  10;  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev)/  10;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  10;	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
53	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  /  10);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev  /  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  /  10);	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
54	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  2);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev  -  2);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  2);	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
55	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
56	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
57	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
58	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev),  x);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev),  x);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev),  x);	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
59	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  12));  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  12));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  12));	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
60	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
61	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
62	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
63	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
64	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
65	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
66	[BUG]  [BUGGY]  ((  long)x  +  1)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  ((  long)x  +  1)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
67	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
68	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
69	[BUG]  [BUGGY]  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  mantissa  /=  10;  exp++;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  /=  10;  exp++;	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
70	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
71	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
72	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
73	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
74	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
75	[BUG]  [BUGGY]  add(Long.toString(x)+  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  1);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
76	[BUG]  [BUGGY]  add(Long.toString(x)+   "E "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+   "E "  +  Integer.toString(x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+   "E "  +  Integer.toString(x));	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
77	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(x));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  Integer.toString(x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Integer.toString(x));	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
78	[BUG]  [BUGGY]  add(Long.toString(x)+   "E "  +  Integer.toString(exp));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+   "E "  +  Integer.toString(exp));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+   "E "  +  Integer.toString(exp));	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
79	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(exp));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  Integer.toString(exp));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Integer.toString(exp));	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
80	[BUG]  [BUGGY]  add(Long.toString(x)+   ", "  +  prev);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+   ", "  +  prev);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+   ", "  +  prev);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
81	[BUG]  [BUGGY]  add(Long.toString(x)+  10);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  10);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
82	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(x));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  Long.toString(x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.toString(x));	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
83	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
84	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
85	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
86	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
87	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
88	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  x)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  x)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  x)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
89	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x  +  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  +  1);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
90	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x  -  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  -  1);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
91	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  -  prev);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x  -  prev);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  -  prev);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
92	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  -  10);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x  -  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  -  10);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
93	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  /  10);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x  /  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  /  10);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
94	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  *  10);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x  *  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  *  10);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
95	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)-  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x)-  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)-  1;	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
96	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
97	[BUG]  [BUGGY]  long  value  =  (long)x  /  1;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  /  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  1;	  long    value    =    (long)x    -    1;    	non-compiled	[CE]  ';'  expected	2	None	replace
98	[BUG]  [BUGGY]  int  value  =  (int)x  -  1;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  (int)x  -  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  -  1;	  long    value    =    (long)x    -    1;    	non-compiled	[CE]  ';'  expected	2	None	replace
99	[BUG]  [BUGGY]  long  value  =  (long)x  -  1L;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  -  1L;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  -  1L;	  long    value    =    (long)x    -    1;    	non-compiled	[CE]  ';'  expected	2	None	replace
100	[BUG]  [BUGGY]  long  value  =  (long)x  -  2;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  -  2;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  -  2;	  long    value    =    (long)x    -    1;    	non-compiled	[CE]  ';'  expected	2	None	replace
101	[BUG]  [BUGGY]  long  value  =  (int)x  -  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (int)x  -  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  -  1;	  long    value    =    (long)x    -    1;    	non-compiled	[CE]  ';'  expected	2	None	replace
102	[BUG]  [BUGGY]  int  value  =  (int)x  +  1;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  (int)x  +  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  +  1;	  long    value    =    (long)x    +    1;    	non-compiled	[CE]  ';'  expected	3	None	replace
103	[BUG]  [BUGGY]  long  value  =  (long)x  +  2;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  +  2;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  +  2;	  long    value    =    (long)x    +    1;    	non-compiled	[CE]  ';'  expected	3	None	replace
104	[BUG]  [BUGGY]  long  value  =  (long)x  +  3;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  +  3;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  +  3;	  long    value    =    (long)x    +    1;    	non-compiled	[CE]  ';'  expected	3	None	replace
105	[BUG]  [BUGGY]  long  value  =  (long)x  +  1L;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  +  1L;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  +  1L;	  long    value    =    (long)x    +    1;    	non-compiled	[CE]  ';'  expected	3	None	replace
106	[BUG]  [BUGGY]  long  value  =  (long)x  +  10;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  +  10;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  +  10;	  long    value    =    (long)x    +    1;    	non-compiled	[CE]  ';'  expected	3	None	replace
107	[BUG]  [BUGGY]  Integer  value  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastChar()  +  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar()  +  1;	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
108	[BUG]  [BUGGY]  Integer  value  =  getLastInt();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastInt();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastInt();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
109	[BUG]  [BUGGY]  Integer  value  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastChar()  -  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar()  -  1;	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
110	[BUG]  [BUGGY]  Integer  value  =  getFirstChar();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getFirstChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChar();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
111	[BUG]  [BUGGY]  Integer  value  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastChar().doubleValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().doubleValue();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
112	[BUG]  [BUGGY]  Integer  value  =  getLastChar().intValue();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastChar().intValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().intValue();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
113	[BUG]  [BUGGY]  Integer  value  =  getLongValue();  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLongValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLongValue();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
114	[BUG]  [BUGGY]  Integer  value  =  getFirstChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getFirstChild();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChild();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
115	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  +  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().doubleValue()  +  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  +  1;	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
116	[BUG]  [BUGGY]  long  value  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  getLastChar().doubleValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().doubleValue();	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
117	[BUG]  [BUGGY]  double  value  =  getFirstChar().doubleValue();  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getFirstChar().doubleValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar().doubleValue();	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
118	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  -  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().doubleValue()  -  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  -  1;	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
119	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /  2;  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().doubleValue()  /  2;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /  2;	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
120	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /  100.0;  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().doubleValue()  /  100.0;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /  100.0;	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
121	[BUG]  [BUGGY]  int  value  =  (int)x  &  0xff;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  (int)x  &  0xff;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  &  0xff;	  long    value    =    (long)x    &    0xff;    	non-compiled	[CE]  ';'  expected	4	None	replace
122	[BUG]  [BUGGY]  long  value  =  (long)x  -  0xff;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  -  0xff;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  -  0xff;	  long    value    =    (long)x    &    0xff;    	non-compiled	[CE]  ';'  expected	4	None	replace
123	[BUG]  [BUGGY]  long  value  =  (long)x  /  0xff;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  /  0xff;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  0xff;	  long    value    =    (long)x    &    0xff;    	non-compiled	[CE]  ';'  expected	4	None	replace
124	[BUG]  [BUGGY]  double  value  =  (double)x  &  0xff;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  (double)x  &  0xff;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  &  0xff;	  long    value    =    (long)x    &    0xff;    	non-compiled	[CE]  ';'  expected	4	None	replace
125	[BUG]  [BUGGY]  long  value  =  (long)x  &  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  &  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  1;	  long    value    =    (long)x    &    0xff;    	non-compiled	[CE]  ';'  expected	4	None	replace
126	[BUG]  [BUGGY]  int  value  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  getLastChar().doubleValue();  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().doubleValue();	      	non-compiled	[CE]  ';'  expected	5	None	replace
127	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x  +  1));	      int    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	13	None	replace
128	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  x));	      int    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	13	None	replace
129	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x)-  1);	      int    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	13	None	replace
130	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  x));	      int    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	13	None	replace
131	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x  -  1));	      int    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	13	None	replace
132	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x)+  1);	      int    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	13	None	replace
133	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
134	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  x));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
135	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)-  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)-  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x)-  1);	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
136	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  x));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
137	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  x));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
138	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
139	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
140	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
141	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
142	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
143	[BUG]  [BUGGY]  ||  Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  ||  Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
144	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
145	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
146	[BUG]  [BUGGY]  double  value  =  (double)x;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  (double)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x;	  int    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	1	None	replace
147	[BUG]  [BUGGY]  char  value  =  (char)x;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =  (char)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  (char)x;	  int    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	1	None	replace
148	[BUG]  [BUGGY]  char  value  =  (int)x;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =  (int)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  (int)x;	  int    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	1	None	replace
149	[BUG]  [BUGGY]  double  value  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar()  +  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar()  +  1;	      double    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	8	None	replace
150	[BUG]  [BUGGY]  double  value  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar()  -  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar()  -  1;	      double    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	8	None	replace
151	[BUG]  [BUGGY]  double  value  =  getFirstChar();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getFirstChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar();	      double    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	8	None	replace
152	[BUG]  [BUGGY]  double  value  =  getLongValue();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLongValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLongValue();	      double    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	8	None	replace
153	[BUG]  [BUGGY]  double  value  =  getLastChar()  /  2;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar()  /  2;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar()  /  2;	      double    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	8	None	replace
154	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  x);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =(char)Math.pow(10,  x);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  x);	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
155	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  x);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =(double)Math.pow(10,  x);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  x);	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
156	[BUG]  [BUGGY]  long  value  =(long)Math.pow(10,  x);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =(long)Math.pow(10,  x);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)Math.pow(10,  x);	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
157	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =(int)Math.pow(10,  x  +  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  x  +  1);	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
158	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =(int)Math.pow(10,  prev);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  prev);	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
159	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  prev));	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
160	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  x));	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
161	[BUG]  [BUGGY]  char  value  =(int)Math.pow(10,  x);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  char  value  =(int)Math.pow(10,  x);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)Math.pow(10,  x);	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
162	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =(int)Math.pow(10,  x  -  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  x  -  1);	      int    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
163	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  +  1));	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
164	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)-  1);	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
165	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  -  1));	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
166	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)+  1);	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
167	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  2));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  2));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  +  2));	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
168	[BUG]  [BUGGY]  int  value  =  (int)x  /(int)x;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  (int)x  /(int)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /(int)x;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
169	[BUG]  [BUGGY]  long  value  =  (int)x  /(int)x;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (int)x  /(int)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  /(int)x;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
170	[BUG]  [BUGGY]  long  value  =  x  /(long)x;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  x  /(long)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  x  /(long)x;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
171	[BUG]  [BUGGY]  long  value  =  (long)x  /(double)x;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  /(double)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(double)x;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
172	[BUG]  [BUGGY]  double  value  =  (double)x  /(double)x;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  (double)x  /(double)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  /(double)x;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
173	[BUG]  [BUGGY]  long  value  =  (long)x  /(int)x;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  /(int)x;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(int)x;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
174	[BUG]  [BUGGY]  add(Long.toString(x)+ "   "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+ "   "  +  Integer.toString(x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+ "   "  +  Integer.toString(x));	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
175	[BUG]  [BUGGY]  add(Long.toString(prev));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(prev));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev));	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
176	[BUG]  [BUGGY]  add(Long.toString(x)+ ", "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+ ", "  +  Integer.toString(x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+ ", "  +  Integer.toString(x));	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
177	[BUG]  [BUGGY]  add(Long.toString(x)+ "N   "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+ "N   "  +  Integer.toString(x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+ "N   "  +  Integer.toString(x));	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
178	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  exp);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  mantissa  =  Math.pow(10,  exp);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  exp);	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
179	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
180	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  exp  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  mantissa  =  Math.pow(10,  exp  +  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  exp  +  1);	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
181	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
182	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  10)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  10)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  10)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
183	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  10)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  10)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  10)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
184	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
185	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  10);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  10);	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
186	[BUG]  [BUGGY]  add(Integer.toString(x));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Integer.toString(x));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Integer.toString(x));	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
187	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
188	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
189	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
190	[BUG]  [BUGGY]  long  value  =  (long)x  /(long)x  +  1;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  /(long)x  +  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(long)x  +  1;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
191	[BUG]  [BUGGY]  long  value  =  (long)x  /(long)y;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  /(long)y;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(long)y;	  long    value    =    (long)x    /(long)x;    	non-compiled	[CE]  ';'  expected	7	None	replace
192	[BUG]  [BUGGY]  Integer  mantissa  =  getLastChar();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  mantissa  =  getLastChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getLastChar();	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
193	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xff  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  &  0xff  +  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xff  +  1;	  long    value    =    (long)x    &    0xff;    	non-compiled	[CE]  ';'  expected	4	None	replace
194	[BUG]  [BUGGY]  int  value  =  (int)Math.floor(prev);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  (int)Math.floor(prev);  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)Math.floor(prev);	  int    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	1	None	replace
195	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
196	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
197	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
198	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
199	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
200	[BUG]  [BUGGY]  add(Long.toString(x)+  prev  +  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  prev  +  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  prev  +  1);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
201	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.MIN_VALUE);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
202	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.US_ASCII);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  Predicates.US_ASCII);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.US_ASCII);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
203	[BUG]  [BUGGY]  add(Long.toString(x)+  '0');  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  '0');  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  '0');	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
204	[BUG]  [BUGGY]  add(Long.toString(x)+  prev  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  prev  -  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  prev  -  1);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
205	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
206	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
207	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_PADDING);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_PADDING);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_PADDING);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
208	[BUG]  [BUGGY]  Integer  value  =  getLastChar().toUpperCase();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastChar().toUpperCase();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().toUpperCase();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
209	[BUG]  [BUGGY]  Integer  value  =  getLastIntChar();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastIntChar();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastIntChar();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
210	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x),  prev);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x),  prev);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x),  prev);	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
211	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  Math.pow(10,  prev);  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev);	      	non-compiled	[CE]  ';'  expected	5	None	replace
212	[BUG]  [BUGGY]  double  value  =  Math.abs(x);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.abs(x);  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.abs(x);	      	non-compiled	[CE]  ';'  expected	5	None	replace
213	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  +  2);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  prev  +  2);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  +  2);	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
214	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
215	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
216	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
217	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
218	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xFFFF  +  1;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =  (long)x  &  0xFFFF  +  1;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xFFFF  +  1;	  long    value    =    (long)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	6	None	replace
219	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);	      int    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	15	None	replace
220	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /  10;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().doubleValue()  /  10;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /  10;	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
221	[BUG]  [BUGGY]  double  value  =  getLastChar().longValue();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().longValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().longValue();	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
222	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  +  2;  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().doubleValue()  +  2;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  +  2;	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
223	[BUG]  [BUGGY]  double  value  =  getLastChar()  +  2;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar()  +  2;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar()  +  2;	      double    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	8	None	replace
224	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
225	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
226	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
227	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  -  2);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x  -  2);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  -  2);	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
228	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)/  10;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x)/  10;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)/  10;	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
229	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLastChar());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  getLastChar());  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLastChar());	      double    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	21	None	replace
230	[BUG]  [BUGGY]  int  value  =  (int)Math.floor(value);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  (int)Math.floor(value);  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)Math.floor(value);	  int    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	1	None	replace
231	[BUG]  [BUGGY]  Integer  value  =  getLastIntValue();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getLastIntValue();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastIntValue();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
232	[BUG]  [BUGGY]  Integer  value  =  getFirstElement();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  Integer  value  =  getFirstElement();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstElement();	      Integer    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
233	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  prev));	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
234	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10);	      int    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	17	None	replace
235	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  10);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  10);	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
236	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);	      double    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	11	None	replace
237	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)/  10);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)/  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x)/  10);	      int    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	14	None	replace
238	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  -  10);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  value  =  Math.pow(10,  x  -  10);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  -  10);	      int    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	24	None	replace
239	[BUG]  [BUGGY]  if(x  <=  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(x  <=  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <=  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
240	[BUG]  [BUGGY]  long  value  =(long)x  %  0xFFFF;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  long  value  =(long)x  %  0xFFFF;  [BUGGY]    long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)x  %  0xFFFF;	  long    value    =    (long)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	6	None	replace
241	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  y));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  y));  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  y));	      double    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	12	None	replace
242	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
243	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  len)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  len)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  len)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
244	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  null)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  null)  {  mantissa  /=  10;  exp++;  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  null)  {  mantissa  /=  10;  exp++;  }	      if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
245	[BUG]  [BUGGY]  add(Long.toString(x)/  prev);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)/  prev);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  prev);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
246	[BUG]  [BUGGY]  add(Long.toString(x)+  128);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  128);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  128);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
247	[BUG]  [BUGGY]  add(Long.toString(x)+  3);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  add(Long.toString(x)+  3);  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  3);	      add(Long.toString(x)+    prev);    	non-compiled	[CE]  ';'  expected	20	None	replace
248	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)+  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  Math.pow(10,  x)+  1;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)+  1;	      double    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	23	None	replace
249	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /(long)x;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  double  value  =  getLastChar().doubleValue()  /(long)x;  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /(long)x;	      double    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	16	None	replace
250	[BUG]  [BUGGY]  int  mantissa  =  getImmediateParentPointer();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  int  mantissa  =  getImmediateParentPointer();  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getImmediateParentPointer();	      int    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	10	None	replace
251	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
252	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
253	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( " "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( " "  +  Integer.toString(x));  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( " "  +  Integer.toString(x));  }	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
254	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
255	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
256	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
257	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( " "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x)  {    [BUGGY]  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( " "  +  Integer.toString(x));  }  [BUGGY]    long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +     "E   "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( " "  +  Integer.toString(x));  }	      add(Long.toString(x));    	non-compiled	[CE]  ';'  expected	18	None	replace
