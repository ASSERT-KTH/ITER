bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  value  =  (int)x;  [CE]  cannot  find  symbol  iop  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]  int  value  =  (int)x;  [BUGGY]  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x;	long  value  =  (long)  x;  	non-compiled	[CE]  cannot  find  symbol  iop	11	None	replace
2	[BUG]  [BUGGY]  long  value  =  (long)x  -  1;  [CE]  cannot  find  symbol  iop  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]  long  value  =  (long)x  -  1;  [BUGGY]  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  -  1;	long  value  =  (long)  x;  	non-compiled	[CE]  cannot  find  symbol  iop	11	None	replace
3	[BUG]  [BUGGY]  long  value  =  (long)x  +  1;  [CE]  cannot  find  symbol  iop  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]  long  value  =  (long)x  +  1;  [BUGGY]  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  +  1;	long  value  =  (long)  x;  	non-compiled	[CE]  cannot  find  symbol  iop	11	None	replace
4	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xff;  [CE]  cannot  find  symbol  iop  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]  long  value  =  (long)x  &  0xff;  [BUGGY]  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xff;	long  value  =  (long)  x;  	non-compiled	[CE]  cannot  find  symbol  iop	11	None	replace
5	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  iop  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    [BUGGY]  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	  	long  value  =  (long)  x;  	non-compiled	[CE]  cannot  find  symbol  iop	11	None	replace
6	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xFFFF;  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]  long  value  =  (long)x  &  0xFFFF;  [BUGGY]  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xFFFF;	long  value  =  (long)  x;  	non-compiled	[CE]  ';'  expected	11	None	replace
7	[BUG]  [BUGGY]  long  value  =  (long)x  /(long)x;  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]  long  value  =  (long)x  /(long)x;  [BUGGY]  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(long)x;	long  value  =  (long)  x;  	non-compiled	[CE]  ';'  expected	11	None	replace
8	[BUG]  [BUGGY]    double  value  =  getLastChar();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    double  value  =  getLastChar();  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    double  value  =  getLastChar();		non-compiled	[CE]  ';'  expected	12	None	add
9	[BUG]  [BUGGY]    int  value  =  getLastChar();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  value  =  getLastChar();  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  value  =  getLastChar();		non-compiled	[CE]  ';'  expected	12	None	add
10	[BUG]  [BUGGY]    int  mantissa  =  getLastChar();  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  mantissa  =  getLastChar();  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  mantissa  =  getLastChar();		non-compiled	[CE]  ';'  expected	12	None	add
11	[BUG]  [BUGGY]    double  value  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    double  value  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    double  value  =  Math.pow(10,  Math.pow(10,  x));		non-compiled	[CE]  ';'  expected	12	None	add
12	[BUG]  [BUGGY]    double  value  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    double  value  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    double  value  =  Math.pow(10,  Math.pow(10,  prev));		non-compiled	[CE]  ';'  expected	12	None	add
13	[BUG]  [BUGGY]    int  value  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  value  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  value  =  Math.pow(10,  Math.pow(10,  x));		non-compiled	[CE]  ';'  expected	12	None	add
14	[BUG]  [BUGGY]    int  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  mantissa  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  mantissa  =  Math.pow(10,  Math.pow(10,  x));		non-compiled	[CE]  ';'  expected	12	None	add
15	[BUG]  [BUGGY]    int  value  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                  ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  value  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  value  =  Math.pow(10,  Math.pow(10,  prev));		non-compiled	[CE]  ';'  expected	12	None	add
16	[BUG]  [BUGGY]    double  value  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    double  value  =  getLastChar().doubleValue();  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    double  value  =  getLastChar().doubleValue();		non-compiled	[CE]  ';'  expected	12	None	add
17	[BUG]  [BUGGY]    int  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  mantissa  =  Math.pow(10,  Math.pow(10,  prev));		non-compiled	[CE]  ';'  expected	12	None	add
18	[BUG]  [BUGGY]    add(Long.toString(x));  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    add(Long.toString(x));  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    add(Long.toString(x));		non-compiled	[CE]  ';'  expected	12	None	add
19	[BUG]  [BUGGY]    int  value  =(int)Math.pow(10,  x);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  value  =(int)Math.pow(10,  x);  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  value  =(int)Math.pow(10,  x);		non-compiled	[CE]  ';'  expected	12	None	add
20	[BUG]  [BUGGY]    add(Long.toString(x)+  prev);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    add(Long.toString(x)+  prev);  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    add(Long.toString(x)+  prev);		non-compiled	[CE]  ';'  expected	12	None	add
21	[BUG]  [BUGGY]    double  value  =  Math.pow(10,  x);  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    double  value  =  Math.pow(10,  x);  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    double  value  =  Math.pow(10,  x);		non-compiled	[CE]  ';'  expected	12	None	add
22	[BUG]  [BUGGY]    Integer  value  =  getLastChar();  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    Integer  value  =  getLastChar();  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    Integer  value  =  getLastChar();		non-compiled	[CE]  ';'  expected	12	None	add
23	[BUG]  [BUGGY]    double  value  =  Math.pow(10,  prev);  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    double  value  =  Math.pow(10,  prev);  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    double  value  =  Math.pow(10,  prev);		non-compiled	[CE]  ';'  expected	12	None	add
24	[BUG]  [BUGGY]    int  value  =  Math.pow(10,  x);  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    int  value  =  Math.pow(10,  x);  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    int  value  =  Math.pow(10,  x);		non-compiled	[CE]  ';'  expected	12	None	add
25	[BUG]  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }		non-compiled	[CE]  ';'  expected	12	None	add
26	[BUG]  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }		non-compiled	[CE]  ';'  expected	12	None	add
27	[BUG]  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }		non-compiled	[CE]  ';'  expected	12	None	add
28	[BUG]  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }		non-compiled	[CE]  ';'  expected	12	None	add
29	[BUG]  [BUGGY]    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }		non-compiled	[CE]  ';'  expected	12	None	add
30	[BUG]  [BUGGY]    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }		non-compiled	[CE]  ';'  expected	12	None	add
31	[BUG]  [BUGGY]    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x)  {  [BUGGY]    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	    if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }		non-compiled	[CE]  ';'  expected	12	None	add
