bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  add(Long.toString(prev)+ ",   "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+ ",   "  +  Integer.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+ ",   "  +  Integer.toString(x));	  add(Long.toString(x)+   ",   "    +    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	176	None	replace
2	[BUG]  [BUGGY]  add(Long.toString(x)+ "E ",  Integer.toString(x));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+ "E ",  Integer.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+ "E ",  Integer.toString(x));	  add(Long.toString(x)+   ",   "    +    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	176	None	replace
3	[BUG]  [BUGGY]  ||  Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	254	None	replace
4	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	254	None	replace
5	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	254	None	replace
6	[BUG]  [BUGGY]  if(Math.abs(x)  <=  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	254	None	replace
7	[BUG]  [BUGGY]  ||  Math.abs(x  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	254	None	replace
8	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  if(Math.abs(value)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  100)  {  if(Math.abs(value)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  if(Math.abs(value)  <  100)  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	254	None	replace
9	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLastChar()  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getLastChar()  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLastChar()  -  1);	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
10	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLastChar()  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getLastChar()  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLastChar()  +  1);	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
11	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getFirstChar());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getFirstChar());  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getFirstChar());	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
12	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLongChar());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getLongChar());  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLongChar());	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
13	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLongValue());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getLongValue());  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLongValue());	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
14	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLastChar()  /  10);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getLastChar()  /  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLastChar()  /  10);	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
15	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLastChar()).doubleValue();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getLastChar()).doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLastChar()).doubleValue();	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
16	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  getLowerCase());  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  getLowerCase());  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  getLowerCase());	  double    value    =    Math.pow(10,    getLastChar());    	non-compiled	[CE]  ';'  expected	229	None	replace
17	[BUG]  [BUGGY]  int  mantissa  =  getLastChar().length  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLastChar().length  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLastChar().length  -  1;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
18	[BUG]  [BUGGY]  char  mantissa  =  getLastChar().length;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  getLastChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  getLastChar().length;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
19	[BUG]  [BUGGY]  long  mantissa  =  getLastChar().length;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  getLastChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getLastChar().length;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
20	[BUG]  [BUGGY]  int  mantissa  =  getFirstChar().length;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getFirstChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getFirstChar().length;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
21	[BUG]  [BUGGY]  int  mantissa  =  getLastChar().length  +  1;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLastChar().length  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLastChar().length  +  1;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
22	[BUG]  [BUGGY]  int  mantissa  =  getLastChar().length  -  2;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLastChar().length  -  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLastChar().length  -  2;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
23	[BUG]  [BUGGY]  double  mantissa  =  getLastChar().length;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  getLastChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getLastChar().length;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
24	[BUG]  [BUGGY]  int  mantissa  =  getLastChar().x;  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLastChar().x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLastChar().x;	  int    mantissa    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	24	None	replace
25	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));	  long    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	233	None	replace
26	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);	  long    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	233	None	replace
27	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));	  long    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	233	None	replace
28	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev)  +  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  prev)  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  prev)  +  1);	  long    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	233	None	replace
29	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x  *  10);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x  *  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x  *  10);	  double    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	94	None	replace
30	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  *  10  +  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  *  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  *  10  +  1);	  double    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	94	None	replace
31	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  +  10);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  +  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  +  10);	  double    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	94	None	replace
32	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev  *  10);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  prev  *  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev  *  10);	  double    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	94	None	replace
33	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  y  +  1));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  y  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  y  +  1));	  double    value    =    Math.pow(10,    Math.pow(10,    y));    	non-compiled	[CE]  ';'  expected	241	None	replace
34	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  y));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  y));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  y));	  double    value    =    Math.pow(10,    Math.pow(10,    y));    	non-compiled	[CE]  ';'  expected	241	None	replace
35	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  y));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  y));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  y));	  double    value    =    Math.pow(10,    Math.pow(10,    y));    	non-compiled	[CE]  ';'  expected	241	None	replace
36	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  exp));	  double    value    =    Math.pow(10,    Math.pow(10,    y));    	non-compiled	[CE]  ';'  expected	241	None	replace
37	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  x);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  x);	  double    value    =    Math.pow(10,    Math.pow(10,    prev),    x);    	non-compiled	[CE]  ';'  expected	58	None	replace
38	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev),  x  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev),  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev),  x  +  1);	  double    value    =    Math.pow(10,    Math.pow(10,    prev),    x);    	non-compiled	[CE]  ';'  expected	58	None	replace
39	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2,  x);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2,  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2,  x);	  double    value    =    Math.pow(10,    Math.pow(10,    prev),    x);    	non-compiled	[CE]  ';'  expected	58	None	replace
40	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  x);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)-  x);	  double    value    =    Math.pow(10,    Math.pow(10,    prev),    x);    	non-compiled	[CE]  ';'  expected	58	None	replace
41	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2.0,  x);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2.0,  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2.0,  x);	  double    value    =    Math.pow(10,    Math.pow(10,    prev),    x);    	non-compiled	[CE]  ';'  expected	58	None	replace
42	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  *  10;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  *  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  *  10;	  double    value    =    getLastChar().doubleValue()    /    10;    	non-compiled	[CE]  ';'  expected	220	None	replace
43	[BUG]  [BUGGY]  double  value  =  getFirstChar().doubleValue()  /  10;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getFirstChar().doubleValue()  /  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar().doubleValue()  /  10;	  double    value    =    getLastChar().doubleValue()    /    10;    	non-compiled	[CE]  ';'  expected	220	None	replace
44	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  +  10;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  +  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  +  10;	  double    value    =    getLastChar().doubleValue()    /    10;    	non-compiled	[CE]  ';'  expected	220	None	replace
45	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /  10  +  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  /  10  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /  10  +  1;	  double    value    =    getLastChar().doubleValue()    /    10;    	non-compiled	[CE]  ';'  expected	220	None	replace
46	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
47	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
48	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
49	[BUG]  [BUGGY]  ((  long)x  +  1)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
50	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)/  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  1;	  double    value    =    Math.pow(10,    prev)-    1;    	non-compiled	[CE]  ';'  expected	51	None	replace
51	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  +  1)-  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  +  1)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  +  1)-  1;	  double    value    =    Math.pow(10,    prev)-    1;    	non-compiled	[CE]  ';'  expected	51	None	replace
52	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)-  2;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)-  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)-  2;	  double    value    =    Math.pow(10,    prev)-    1;    	non-compiled	[CE]  ';'  expected	51	None	replace
53	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  1)-  1;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  1)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  1)-  1;	  double    value    =    Math.pow(10,    prev)-    1;    	non-compiled	[CE]  ';'  expected	51	None	replace
54	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev)-  1;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  prev)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev)-  1;	  double    value    =    Math.pow(10,    prev)-    1;    	non-compiled	[CE]  ';'  expected	51	None	replace
55	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)-  1  +  1;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)-  1  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)-  1  +  1;	  double    value    =    Math.pow(10,    prev)-    1;    	non-compiled	[CE]  ';'  expected	51	None	replace
56	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  x  -  1));	  int    value    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	131	None	replace
57	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  *  1));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  *  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x  *  1));	  int    value    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	131	None	replace
58	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  x  -  1));	  int    value    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	131	None	replace
59	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	252	None	replace
60	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
61	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	252	None	replace
62	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	252	None	replace
63	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	252	None	replace
64	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
65	[BUG]  [BUGGY]  ||  Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
66	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  /  10  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  /  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  /  10  +  1);	  double    value    =    Math.pow(10,    prev    /    10);    	non-compiled	[CE]  ';'  expected	53	None	replace
67	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  /  2);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  /  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  /  2);	  double    value    =    Math.pow(10,    prev    /    10);    	non-compiled	[CE]  ';'  expected	53	None	replace
68	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  /  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  /  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  /  1);	  double    value    =    Math.pow(10,    prev    /    10);    	non-compiled	[CE]  ';'  expected	53	None	replace
69	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  /  8);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  /  8);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  /  8);	  double    value    =    Math.pow(10,    prev    /    10);    	non-compiled	[CE]  ';'  expected	53	None	replace
70	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  10));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  10));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  10));	  int    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	46	None	replace
71	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  12));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  12));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  12));	  int    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	46	None	replace
72	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  2));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  2));	  int    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	46	None	replace
73	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  16));  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  16));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  16));	  int    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	46	None	replace
74	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  1));  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  1));	  int    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	46	None	replace
75	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  12)  +  1);  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  12)  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  12)  +  1);	  int    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	46	None	replace
76	[BUG]  [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(exp));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(mantissa)+  Integer.toString(exp));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(mantissa)+  Integer.toString(exp));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  ';'  expected	79	None	replace
77	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(value));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Integer.toString(value));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Integer.toString(value));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  ';'  expected	79	None	replace
78	[BUG]  [BUGGY]  add(Long.toString(prev)+  Integer.toString(exp));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+  Integer.toString(exp));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+  Integer.toString(exp));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  ';'  expected	79	None	replace
79	[BUG]  [BUGGY]  add(Integer.toString(x)+  Integer.toString(exp));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Integer.toString(x)+  Integer.toString(exp));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Integer.toString(x)+  Integer.toString(exp));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  ';'  expected	79	None	replace
80	[BUG]  [BUGGY]  addNumber(Long.toString(x)+  Integer.toString(exp));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  addNumber(Long.toString(x)+  Integer.toString(exp));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	addNumber(Long.toString(x)+  Integer.toString(exp));	  add(Long.toString(x)+    Integer.toString(exp));    	non-compiled	[CE]  ';'  expected	79	None	replace
81	[BUG]  [BUGGY]  int  value  =  (int)x  &  0xFFFF  +  1;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  &  0xFFFF  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  &  0xFFFF  +  1;	  long    value    =    (long)x    &    0xFFFF    +    1;    	non-compiled	[CE]  ';'  expected	218	None	replace
82	[BUG]  [BUGGY]  long  value  =  (long)x  /  0xFFFF  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  0xFFFF  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  0xFFFF  +  1;	  long    value    =    (long)x    &    0xFFFF    +    1;    	non-compiled	[CE]  ';'  expected	218	None	replace
83	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xFFFF  +  1L;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  &  0xFFFF  +  1L;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xFFFF  +  1L;	  long    value    =    (long)x    &    0xFFFF    +    1;    	non-compiled	[CE]  ';'  expected	218	None	replace
84	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x  +  1);	  long    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	38	None	replace
85	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x  -  1);	  long    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	38	None	replace
86	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x  -  prev);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x  -  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x  -  prev);	  long    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	38	None	replace
87	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x)-  1;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x)-  1;	  long    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	38	None	replace
88	[BUG]  [BUGGY]  long  value  =  (long)x  /  1L;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  1L;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  1L;	  long    value    =    (long)x    -    1L;    	non-compiled	[CE]  ';'  expected	99	None	replace
89	[BUG]  [BUGGY]  int  value  =  (int)x  -  1L;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  -  1L;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  -  1L;	  long    value    =    (long)x    -    1L;    	non-compiled	[CE]  ';'  expected	99	None	replace
90	[BUG]  [BUGGY]  long  value  =  (int)x  -  1L;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  -  1L;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  -  1L;	  long    value    =    (long)x    -    1L;    	non-compiled	[CE]  ';'  expected	99	None	replace
91	[BUG]  [BUGGY]  int  value  =  (int)x  /(double)x;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  /(double)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /(double)x;	  long    value    =    (long)x    /(double)x;    	non-compiled	[CE]  ';'  expected	171	None	replace
92	[BUG]  [BUGGY]  long  value  =  (long)x  *(double)x;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  *(double)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  *(double)x;	  long    value    =    (long)x    /(double)x;    	non-compiled	[CE]  ';'  expected	171	None	replace
93	[BUG]  [BUGGY]  long  value  =  (int)x  /(double)x;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  /(double)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  /(double)x;	  long    value    =    (long)x    /(double)x;    	non-compiled	[CE]  ';'  expected	171	None	replace
94	[BUG]  [BUGGY]  long  value  =  (long)x  /(double)x  +  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /(double)x  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(double)x  +  1;	  long    value    =    (long)x    /(double)x;    	non-compiled	[CE]  ';'  expected	171	None	replace
95	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
96	[BUG]  [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  100)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    100)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
97	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  *  1));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  *  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  *  1));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	55	None	replace
98	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  /  1));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  /  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  /  1));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	55	None	replace
99	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  /  2));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  /  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  /  2));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	55	None	replace
100	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	55	None	replace
101	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  2));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  +  2));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	55	None	replace
102	[BUG]  [BUGGY]  double  value  =  Math.abs(x  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.abs(x  -  1);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.abs(x  -  1);	  double    value    =    Math.abs(x);    	non-compiled	[CE]  ';'  expected	212	None	replace
103	[BUG]  [BUGGY]  double  value  =  Math.abs(x  -  prev);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.abs(x  -  prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.abs(x  -  prev);	  double    value    =    Math.abs(x);    	non-compiled	[CE]  ';'  expected	212	None	replace
104	[BUG]  [BUGGY]  double  value  =  Math.log(x);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.log(x);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.log(x);	  double    value    =    Math.abs(x);    	non-compiled	[CE]  ';'  expected	212	None	replace
105	[BUG]  [BUGGY]  double  value  =  Math.abs(x  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.abs(x  +  1);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.abs(x  +  1);	  double    value    =    Math.abs(x);    	non-compiled	[CE]  ';'  expected	212	None	replace
106	[BUG]  [BUGGY]  double  value  =  Math.abs(prev);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.abs(prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.abs(prev);	  double    value    =    Math.abs(x);    	non-compiled	[CE]  ';'  expected	212	None	replace
107	[BUG]  [BUGGY]  double  value  =  Math.max(1,  prev);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.max(1,  prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.max(1,  prev);	  double    value    =    Math.abs(x);    	non-compiled	[CE]  ';'  expected	212	None	replace
108	[BUG]  [BUGGY]  long  value  =  Math.abs(x);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.abs(x);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.abs(x);	  double    value    =    Math.abs(x);    	non-compiled	[CE]  ';'  expected	212	None	replace
109	[BUG]  [BUGGY]  add(Long.toString(x)+  '0',  prev);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  '0',  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  '0',  prev);	  add(Long.toString(x)+    '0');    	non-compiled	[CE]  ';'  expected	203	None	replace
110	[BUG]  [BUGGY]  add(Long.toString(x)+  '0'  +  prev);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  '0'  +  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  '0'  +  prev);	  add(Long.toString(x)+    '0');    	non-compiled	[CE]  ';'  expected	203	None	replace
111	[BUG]  [BUGGY]  add(Long.toString(prev)+  '0');  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+  '0');  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+  '0');	  add(Long.toString(x)+    '0');    	non-compiled	[CE]  ';'  expected	203	None	replace
112	[BUG]  [BUGGY]  add(Integer.toString(x)+  '0');  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Integer.toString(x)+  '0');  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Integer.toString(x)+  '0');	  add(Long.toString(x)+    '0');    	non-compiled	[CE]  ';'  expected	203	None	replace
113	[BUG]  [BUGGY]  add(Long.toString(x)+   "0');  [CE]  unclosed  string  literal  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+   "0');  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+   "0');	  add(Long.toString(x)+    '0');    	non-compiled	[CE]  unclosed  string  literal	203	None	replace
114	[BUG]  [BUGGY]  add(Long.toString(x)+  '0').longValue();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  '0').longValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  '0').longValue();	  add(Long.toString(x)+    '0');    	non-compiled	[CE]  ';'  expected	203	None	replace
115	[BUG]  [BUGGY]  add(Long.toString(x)+  '0',  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  '0',  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  '0',  1);	  add(Long.toString(x)+    '0');    	non-compiled	[CE]  ';'  expected	203	None	replace
116	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  +  1);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE_LENGTH);    	non-compiled	[CE]  ';'  expected	206	None	replace
117	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  -  1);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE_LENGTH);    	non-compiled	[CE]  ';'  expected	206	None	replace
118	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH)+  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH)+  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH)+  1;	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE_LENGTH);    	non-compiled	[CE]  ';'  expected	206	None	replace
119	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE_LENGTH);    	non-compiled	[CE]  ';'  expected	206	None	replace
120	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  *  10);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  *  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  *  10);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE_LENGTH);    	non-compiled	[CE]  ';'  expected	206	None	replace
121	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  -  prev);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  -  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE_LENGTH  -  prev);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE_LENGTH);    	non-compiled	[CE]  ';'  expected	206	None	replace
122	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	15	None	replace
123	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	15	None	replace
124	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  2);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  2);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	15	None	replace
125	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	15	None	replace
126	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  prev)-  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	15	None	replace
127	[BUG]  [BUGGY]  int  value  =  (int)x  &  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  &  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  &  1;	  long    value    =    (long)x    &    1;    	non-compiled	[CE]  ';'  expected	125	None	replace
128	[BUG]  [BUGGY]  long  value  =  (long)x  &  1L;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  &  1L;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  1L;	  long    value    =    (long)x    &    1;    	non-compiled	[CE]  ';'  expected	125	None	replace
129	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
130	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  2);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  2);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
131	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
132	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  prev)+  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
133	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)*  1);  [CE]  ';'  expected  [FE]                                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)*  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)*  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	17	None	replace
134	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)/  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x)/  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)/  1;	  double    value    =    Math.pow(10,    x)-    1;    	non-compiled	[CE]  ';'  expected	95	None	replace
135	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  +  1)-  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  +  1)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  +  1)-  1;	  double    value    =    Math.pow(10,    x)-    1;    	non-compiled	[CE]  ';'  expected	95	None	replace
136	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  x)-  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  x)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  x)-  1;	  double    value    =    Math.pow(10,    x)-    1;    	non-compiled	[CE]  ';'  expected	95	None	replace
137	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	215	None	replace
138	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	215	None	replace
139	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x  -  10);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x  -  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x  -  10);	  double    value    =    Math.pow(10,    x    -    10);    	non-compiled	[CE]  ';'  expected	92	None	replace
140	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  +  10);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  +  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  +  10);	  double    value    =    Math.pow(10,    x    -    10);    	non-compiled	[CE]  ';'  expected	92	None	replace
141	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   ",   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	256	None	replace
142	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   ",   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	256	None	replace
143	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   ",   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	256	None	replace
144	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( ", "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   ",   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	256	None	replace
145	[BUG]  [BUGGY]  String  value  =  Math.pow(10,  x);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  value  =  Math.pow(10,  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  value  =  Math.pow(10,  x);	  char    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	35	None	replace
146	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  prev);	  char    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	35	None	replace
147	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  x  +  1);	  char    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	35	None	replace
148	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  x  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  x  -  1);	  char    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	35	None	replace
149	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  128);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  128);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  128);	  char    value    =    Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	35	None	replace
150	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	139	None	replace
151	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  *  1));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  *  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x  *  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	139	None	replace
152	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	139	None	replace
153	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  /  1));  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  /  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x  /  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	139	None	replace
154	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  x  -  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	139	None	replace
155	[BUG]  [BUGGY]  add(Long.toString(x)+  prev  +  2);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  prev  +  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  prev  +  2);	  add(Long.toString(x)+    prev    +    1);    	non-compiled	[CE]  ';'  expected	200	None	replace
156	[BUG]  [BUGGY]  add(Long.toString(x)+   "E "  +  prev  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+   "E "  +  prev  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+   "E "  +  prev  +  1);	  add(Long.toString(x)+    prev    +    1);    	non-compiled	[CE]  ';'  expected	200	None	replace
157	[BUG]  [BUGGY]  add(Long.toString(x)+  prev  +  3);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  prev  +  3);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  prev  +  3);	  add(Long.toString(x)+    prev    +    1);    	non-compiled	[CE]  ';'  expected	200	None	replace
158	[BUG]  [BUGGY]  add(Long.toString(x)+  x  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  x  +  1);	  add(Long.toString(x)+    prev    +    1);    	non-compiled	[CE]  ';'  expected	200	None	replace
159	[BUG]  [BUGGY]  add(Long.toString(x)+  10  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  10  +  1);	  add(Long.toString(x)+    prev    +    1);    	non-compiled	[CE]  ';'  expected	200	None	replace
160	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.MIN_VALUE  +  1);	  add(Long.toString(x)+    prev    +    1);    	non-compiled	[CE]  ';'  expected	200	None	replace
161	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  /  2);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  /  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  /  2);	  double    value    =    Math.pow(10,    x    -    2);    	non-compiled	[CE]  ';'  expected	227	None	replace
162	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x  -  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x  -  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x  -  2);	  double    value    =    Math.pow(10,    x    -    2);    	non-compiled	[CE]  ';'  expected	227	None	replace
163	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  +  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  +  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  +  2);	  double    value    =    Math.pow(10,    x    -    2);    	non-compiled	[CE]  ';'  expected	227	None	replace
164	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  -  2  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  -  2  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  -  2  +  1);	  double    value    =    Math.pow(10,    x    -    2);    	non-compiled	[CE]  ';'  expected	227	None	replace
165	[BUG]  [BUGGY]  char  value  =  (int)x  /(int)x;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  (int)x  /(int)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  (int)x  /(int)x;	  int    value    =    (int)x    /(int)x;    	non-compiled	[CE]  ';'  expected	168	None	replace
166	[BUG]  [BUGGY]  int  value  =  (int)x  /(int)Math.rint(value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  /(int)Math.rint(value);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /(int)Math.rint(value);	  int    value    =    (int)x    /(int)x;    	non-compiled	[CE]  ';'  expected	168	None	replace
167	[BUG]  [BUGGY]  Integer  value  =  getLastInt()  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastInt()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastInt()  +  1;	  Integer    value    =    getLastInt();    	non-compiled	[CE]  ';'  expected	108	None	replace
168	[BUG]  [BUGGY]  Integer  value  =  getFirstInt();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstInt();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstInt();	  Integer    value    =    getLastInt();    	non-compiled	[CE]  ';'  expected	108	None	replace
169	[BUG]  [BUGGY]  Integer  value  =  getLastInt()  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastInt()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastInt()  -  1;	  Integer    value    =    getLastInt();    	non-compiled	[CE]  ';'  expected	108	None	replace
170	[BUG]  [BUGGY]  Integer  value  =  getLastInt().doubleValue();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastInt().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastInt().doubleValue();	  Integer    value    =    getLastInt();    	non-compiled	[CE]  ';'  expected	108	None	replace
171	[BUG]  [BUGGY]  Integer  value  =  getLastInt()  *  2;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastInt()  *  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastInt()  *  2;	  Integer    value    =    getLastInt();    	non-compiled	[CE]  ';'  expected	108	None	replace
172	[BUG]  [BUGGY]  add(Long.toString(x)+  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  2);	  add(Long.toString(x)+    10);    	non-compiled	[CE]  ';'  expected	81	None	replace
173	[BUG]  [BUGGY]  add(Long.toString(x)+  1000);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  1000);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  1000);	  add(Long.toString(x)+    10);    	non-compiled	[CE]  ';'  expected	81	None	replace
174	[BUG]  [BUGGY]  add(Long.toString(x)+  4);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  4);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  4);	  add(Long.toString(x)+    10);    	non-compiled	[CE]  ';'  expected	81	None	replace
175	[BUG]  [BUGGY]  add(Long.toString(x)+  100);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  100);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  100);	  add(Long.toString(x)+    10);    	non-compiled	[CE]  ';'  expected	81	None	replace
176	[BUG]  [BUGGY]  int  value  =  getLastChar().length  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLastChar().length  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().length  -  1;	  int    value    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	30	None	replace
177	[BUG]  [BUGGY]  char  value  =  getLastChar().length;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  getLastChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  getLastChar().length;	  int    value    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	30	None	replace
178	[BUG]  [BUGGY]  long  value  =  getLastChar().length;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().length;	  int    value    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	30	None	replace
179	[BUG]  [BUGGY]  double  value  =  getLastChar().length;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().length;	  int    value    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	30	None	replace
180	[BUG]  [BUGGY]  int  value  =  getLastChar().length  +  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLastChar().length  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().length  +  1;	  int    value    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	30	None	replace
181	[BUG]  [BUGGY]  int  value  =  getLastChar().length  -  2;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLastChar().length  -  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().length  -  2;	  int    value    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	30	None	replace
182	[BUG]  [BUGGY]  int  value  =  getFirstChar().length;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getFirstChar().length;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getFirstChar().length;	  int    value    =    getLastChar().length;    	non-compiled	[CE]  ';'  expected	30	None	replace
183	[BUG]  [BUGGY]  Integer  value  =  getLastChar().intValue()  +  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().intValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().intValue()  +  1;	  Integer    value    =    getLastChar().intValue();    	non-compiled	[CE]  ';'  expected	112	None	replace
184	[BUG]  [BUGGY]  Integer  value  =  getLastChar().intValue()  -  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().intValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().intValue()  -  1;	  Integer    value    =    getLastChar().intValue();    	non-compiled	[CE]  ';'  expected	112	None	replace
185	[BUG]  [BUGGY]  Integer  value  =  getFirstChar().intValue();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstChar().intValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChar().intValue();	  Integer    value    =    getLastChar().intValue();    	non-compiled	[CE]  ';'  expected	112	None	replace
186	[BUG]  [BUGGY]  Integer  value  =  getLastChar().intValue()  *  2;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().intValue()  *  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().intValue()  *  2;	  Integer    value    =    getLastChar().intValue();    	non-compiled	[CE]  ';'  expected	112	None	replace
187	[BUG]  [BUGGY]  Integer  value  =  getLastChar().intValue()  *  10  +  1;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().intValue()  *  10  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().intValue()  *  10  +  1;	  Integer    value    =    getLastChar().intValue();    	non-compiled	[CE]  ';'  expected	112	None	replace
188	[BUG]  [BUGGY]  Integer  value  =  getLastChar().intValue()  /  10  +  1;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().intValue()  /  10  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().intValue()  /  10  +  1;	  Integer    value    =    getLastChar().intValue();    	non-compiled	[CE]  ';'  expected	112	None	replace
189	[BUG]  [BUGGY]  Integer  value  =  getLastChar().intValue()  /  2;  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().intValue()  /  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().intValue()  /  2;	  Integer    value    =    getLastChar().intValue();    	non-compiled	[CE]  ';'  expected	112	None	replace
190	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  prev)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)!=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
191	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)!=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	196	None	replace
192	[BUG]  [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)!=  mantissa)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)!=  mantissa)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(value  /  10  *  Math.pow(10,  exp  +  1)!=  mantissa)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)!=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
193	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)/  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)/  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x)/  1);	  int    value    =    Math.pow(10,    Math.pow(10,    x)-    1);    	non-compiled	[CE]  ';'  expected	129	None	replace
194	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  x)-  1);	  int    value    =    Math.pow(10,    Math.pow(10,    x)-    1);    	non-compiled	[CE]  ';'  expected	129	None	replace
195	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  +  1)-  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  +  1)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x  +  1)-  1);	  int    value    =    Math.pow(10,    Math.pow(10,    x)-    1);    	non-compiled	[CE]  ';'  expected	129	None	replace
196	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  x)-  1);	  int    value    =    Math.pow(10,    Math.pow(10,    x)-    1);    	non-compiled	[CE]  	129	None	replace
197	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)-  2);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)-  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x)-  2);	  int    value    =    Math.pow(10,    Math.pow(10,    x)-    1);    	non-compiled	[CE]  	129	None	replace
198	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  	166	None	replace
199	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  	166	None	replace
200	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  x)+  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  	166	None	replace
201	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)+  2);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)+  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)+  2);	  double    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  	166	None	replace
202	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  	166	None	replace
203	[BUG]  [BUGGY]  String  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  mantissa  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  mantissa  =  Math.pow(10,  Math.pow(10,  prev));	  char    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  	13	None	replace
204	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));	  char    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	13	None	replace
205	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  12));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  12));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  12));	  char    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	13	None	replace
206	[BUG]  [BUGGY]  long  value  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar()  +  1;	  long    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	27	None	replace
207	[BUG]  [BUGGY]  long  value  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar()  -  1;	  long    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	27	None	replace
208	[BUG]  [BUGGY]  long  value  =  getLongValue();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLongValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLongValue();	  long    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	27	None	replace
209	[BUG]  [BUGGY]  long  value  =  getLastChar().longValue();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().longValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().longValue();	  long    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	27	None	replace
210	[BUG]  [BUGGY]  long  value  =  getFirstChar();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getFirstChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getFirstChar();	  long    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	27	None	replace
211	[BUG]  [BUGGY]  String  value  =  getLastChar();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  value  =  getLastChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  value  =  getLastChar();	  char    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	26	None	replace
212	[BUG]  [BUGGY]  char  value  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  getLastChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  getLastChar().doubleValue();	  char    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	26	None	replace
213	[BUG]  [BUGGY]  char  value  =  getLastChar().toCharArray();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  getLastChar().toCharArray();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  getLastChar().toCharArray();	  char    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	26	None	replace
214	[BUG]  [BUGGY]  char  value  =  getLastChar().toLowerCase();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  getLastChar().toLowerCase();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  getLastChar().toLowerCase();	  char    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	26	None	replace
215	[BUG]  [BUGGY]  char  value  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  getLastChar()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  getLastChar()  +  1;	  char    value    =    getLastChar();    	non-compiled	[CE]  ';'  expected	26	None	replace
216	[BUG]  [BUGGY]  int  mantissa  =  getUpperCase();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getUpperCase();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getUpperCase();	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
217	[BUG]  [BUGGY]  char  mantissa  =  getLowerCase();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  getLowerCase();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  getLowerCase();	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
218	[BUG]  [BUGGY]  long  mantissa  =  getLowerCase();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  getLowerCase();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getLowerCase();	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
219	[BUG]  [BUGGY]  double  mantissa  =  getLowerCase();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  getLowerCase();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getLowerCase();	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
220	[BUG]  [BUGGY]  int  mantissa  =  getLowerCase(x);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLowerCase(x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLowerCase(x);	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
221	[BUG]  [BUGGY]  int  mantissa  =  getLowerCase()  -  1;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLowerCase()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLowerCase()  -  1;	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
222	[BUG]  [BUGGY]  int  mantissa  =  getLowerCase(0,  x);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLowerCase(0,  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLowerCase(0,  x);	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
223	[BUG]  [BUGGY]  int  mantissa  =  getLeftCase();  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getLeftCase();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getLeftCase();	  int    mantissa    =    getLowerCase();    	non-compiled	[CE]  ';'  expected	25	None	replace
224	[BUG]  [BUGGY]  add(Long.toString(prev)+ "   "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+ "   "  +  Integer.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+ "   "  +  Integer.toString(x));	  add(Long.toString(x)+   "       "    +    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	174	None	replace
225	[BUG]  [BUGGY]  double  value  =  getLongValue()  +  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLongValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLongValue()  +  1;	  double    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	152	None	replace
226	[BUG]  [BUGGY]  double  value  =  getNumberValue();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getNumberValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getNumberValue();	  double    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	152	None	replace
227	[BUG]  [BUGGY]  double  value  =  getDoubleValue();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getDoubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getDoubleValue();	  double    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	152	None	replace
228	[BUG]  [BUGGY]  double  value  =  getLongValue()  -  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLongValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLongValue()  -  1;	  double    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	152	None	replace
229	[BUG]  [BUGGY]  double  value  =  getUpperBound();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getUpperBound();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getUpperBound();	  double    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	152	None	replace
230	[BUG]  [BUGGY]  double  value  =  getLongValue()  /  2;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLongValue()  /  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLongValue()  /  2;	  double    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	152	None	replace
231	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	253	None	replace
232	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	253	None	replace
233	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(x))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
234	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	253	None	replace
235	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <=    Math.abs(x))    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	253	None	replace
236	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	189	None	replace
237	[BUG]  [BUGGY]  if(Math.abs(x)  <  prev)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  prev)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  prev)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	189	None	replace
238	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	189	None	replace
239	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	189	None	replace
240	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	56	None	replace
241	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  -  2));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  -  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  -  2));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	56	None	replace
242	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp  -  1));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  exp  -  1));	  double    value    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	56	None	replace
243	[BUG]  [BUGGY]  if(Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	226	None	replace
244	[BUG]  [BUGGY]  ((  long)x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	226	None	replace
245	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	226	None	replace
246	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  -  1);	  int    value    =    Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	36	None	replace
247	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  /  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x  /  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  /  1);	  int    value    =    Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	36	None	replace
248	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  -  2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x  -  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  -  2);	  int    value    =    Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	36	None	replace
249	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  prev  -  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  prev  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  prev  -  1);	  int    value    =    Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	36	None	replace
250	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <=  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <=  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <=  prev)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
251	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)?  mantissa  /  10  :  10;  exp++;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)?  mantissa  /  10  :  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)?  mantissa  /  10  :  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	84	None	replace
252	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
253	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  *  1));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  *  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  *  1));	  double    value    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	165	None	replace
254	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  /  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  /  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  /  1));	  double    value    =    Math.pow(10,    Math.pow(10,    x    -    1));    	non-compiled	[CE]  ';'  expected	165	None	replace
255	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
256	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
257	[BUG]  [BUGGY]  ((  long)x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
258	[BUG]  [BUGGY]  Integer  value  =  getFirstElement().doubleValue();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstElement().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstElement().doubleValue();	  Integer    value    =    getFirstElement();    	non-compiled	[CE]  ';'  expected	232	None	replace
259	[BUG]  [BUGGY]  Integer  value  =  getEndElement();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getEndElement();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getEndElement();	  Integer    value    =    getFirstElement();    	non-compiled	[CE]  ';'  expected	232	None	replace
260	[BUG]  [BUGGY]  Integer  value  =  getLastElement();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastElement();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastElement();	  Integer    value    =    getFirstElement();    	non-compiled	[CE]  ';'  expected	232	None	replace
261	[BUG]  [BUGGY]  Integer  value  =  getLowerCase();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLowerCase();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLowerCase();	  Integer    value    =    getFirstElement();    	non-compiled	[CE]  ';'  expected	232	None	replace
262	[BUG]  [BUGGY]  Integer  value  =  getFirstElement().intValue();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstElement().intValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstElement().intValue();	  Integer    value    =    getFirstElement();    	non-compiled	[CE]  ';'  expected	232	None	replace
263	[BUG]  [BUGGY]  Integer  value  =  getPreviousElement();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getPreviousElement();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getPreviousElement();	  Integer    value    =    getFirstElement();    	non-compiled	[CE]  ';'  expected	232	None	replace
264	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  prev  -  1));	  int    value    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	43	None	replace
265	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  *  1));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  *  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev  *  1));	  int    value    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	43	None	replace
266	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  -  2));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  -  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev  -  2));	  int    value    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	43	None	replace
267	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  *  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  *  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  *  1);	  double    value    =    Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
268	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  /  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  /  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  /  1);	  double    value    =    Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	89	None	replace
269	[BUG]  [BUGGY]  Integer  value  =  getFirstIntChar();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstIntChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstIntChar();	  Integer    value    =    getLastIntChar();    	non-compiled	[CE]  ';'  expected	209	None	replace
270	[BUG]  [BUGGY]  Integer  value  =  getLastIntElement();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastIntElement();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastIntElement();	  Integer    value    =    getLastIntChar();    	non-compiled	[CE]  ';'  expected	209	None	replace
271	[BUG]  [BUGGY]  Integer  value  =  getLastIntDecimal();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastIntDecimal();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastIntDecimal();	  Integer    value    =    getLastIntChar();    	non-compiled	[CE]  ';'  expected	209	None	replace
272	[BUG]  [BUGGY]  Integer  value  =  getLastIntIndex();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastIntIndex();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastIntIndex();	  Integer    value    =    getLastIntChar();    	non-compiled	[CE]  ';'  expected	209	None	replace
273	[BUG]  [BUGGY]  Integer  value  =  getLastIntLongValue();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastIntLongValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastIntLongValue();	  Integer    value    =    getLastIntChar();    	non-compiled	[CE]  ';'  expected	209	None	replace
274	[BUG]  [BUGGY]  String  value  =(String)Math.pow(10,  x);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  value  =(String)Math.pow(10,  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  value  =(String)Math.pow(10,  x);	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
275	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  x  +  1);	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
276	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  prev);	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
277	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  Math.pow(10,  prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  Math.pow(10,  prev));	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
278	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  x  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  x  -  1);	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
279	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  128);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  128);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  128);	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
280	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  x  *  10);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  x  *  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  x  *  10);	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
281	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  x).charValue();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  x).charValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  x).charValue();	  char    value    =(char)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	154	None	replace
282	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  *  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  *  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  *  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	12	None	replace
283	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	12	None	replace
284	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  2));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  +  2));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev    +    1));    	non-compiled	[CE]  ';'  expected	12	None	replace
285	[BUG]  [BUGGY]  int  value  =  (int)x  /(int)x  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  /(int)x  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /(int)x  +  1;	  long    value    =    (long)x    /(long)x    +    1;    	non-compiled	[CE]  ';'  expected	190	None	replace
286	[BUG]  [BUGGY]  long  value  =  (long)x  /(long)x  +  1L;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /(long)x  +  1L;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(long)x  +  1L;	  long    value    =    (long)x    /(long)x    +    1;    	non-compiled	[CE]  ';'  expected	190	None	replace
287	[BUG]  [BUGGY]  long  value  =  (long)x  *(long)x  +  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  *(long)x  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  *(long)x  +  1;	  long    value    =    (long)x    /(long)x    +    1;    	non-compiled	[CE]  ';'  expected	190	None	replace
288	[BUG]  [BUGGY]  long  value  =  (long)x  /(long)x  +  2;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /(long)x  +  2;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(long)x  +  2;	  long    value    =    (long)x    /(long)x    +    1;    	non-compiled	[CE]  ';'  expected	190	None	replace
289	[BUG]  [BUGGY]  long  value  =  (long)x  /(long)x  *  1  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /(long)x  *  1  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(long)x  *  1  +  1;	  long    value    =    (long)x    /(long)x    +    1;    	non-compiled	[CE]  ';'  expected	190	None	replace
290	[BUG]  [BUGGY]  int  value  =  (int)x  /  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  /  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /  1;	  long    value    =    (long)x    /    1;    	non-compiled	[CE]  ';'  expected	97	None	replace
291	[BUG]  [BUGGY]  long  value  =  (long)x  /  2;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  2;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  2;	  long    value    =    (long)x    /    1;    	non-compiled	[CE]  ';'  expected	97	None	replace
292	[BUG]  [BUGGY]  long  value  =(long)x  /  1024;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =(long)x  /  1024;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)x  /  1024;	  long    value    =    (long)x    /    1;    	non-compiled	[CE]  ';'  expected	97	None	replace
293	[BUG]  [BUGGY]  long  value  =  (long)x  /  3;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  3;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  3;	  long    value    =    (long)x    /    1;    	non-compiled	[CE]  ';'  expected	97	None	replace
294	[BUG]  [BUGGY]  long  value  =  (long)x  /  4;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  4;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  4;	  long    value    =    (long)x    /    1;    	non-compiled	[CE]  ';'  expected	97	None	replace
295	[BUG]  [BUGGY]  int  value  =  (int)x  /  0xff;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  /  0xff;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /  0xff;	  long    value    =    (long)x    /    0xff;    	non-compiled	[CE]  ';'  expected	123	None	replace
296	[BUG]  [BUGGY]  long  value  =  (long)x  /  100.0;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  100.0;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  100.0;	  long    value    =    (long)x    /    0xff;    	non-compiled	[CE]  ';'  expected	123	None	replace
297	[BUG]  [BUGGY]  char  value  =(char)Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(char)Math.pow(10,  Math.pow(10,  x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(char)Math.pow(10,  Math.pow(10,  x));	  int    value    =(int)Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	160	None	replace
298	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(double)Math.pow(10,  Math.pow(10,  x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  Math.pow(10,  x));	  int    value    =(int)Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	160	None	replace
299	[BUG]  [BUGGY]  long  value  =(long)Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =(long)Math.pow(10,  Math.pow(10,  x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)Math.pow(10,  Math.pow(10,  x));	  int    value    =(int)Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	160	None	replace
300	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  x  +  1));	  int    value    =(int)Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	160	None	replace
301	[BUG]  [BUGGY]  char  value  =(int)Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(int)Math.pow(10,  Math.pow(10,  x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)Math.pow(10,  Math.pow(10,  x));	  int    value    =(int)Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	160	None	replace
302	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x)-  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  x)-  1);	  int    value    =(int)Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	160	None	replace
303	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x  +  2));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  x  +  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  x  +  2));	  int    value    =(int)Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	160	None	replace
304	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  prev  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  prev  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  prev  +  1);	  int    value    =(int)Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	157	None	replace
305	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(double)Math.pow(10,  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  x  +  1);	  int    value    =(int)Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	157	None	replace
306	[BUG]  [BUGGY]  long  value  =(long)Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =(long)Math.pow(10,  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)Math.pow(10,  x  +  1);	  int    value    =(int)Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	157	None	replace
307	[BUG]  [BUGGY]  char  value  =(int)Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(int)Math.pow(10,  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)Math.pow(10,  x  +  1);	  int    value    =(int)Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	157	None	replace
308	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  prev  +  1));	  int    value    =(int)Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	157	None	replace
309	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  x  *  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  x  *  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  x  *  1);	  int    value    =(int)Math.pow(10,    x    +    1);    	non-compiled	[CE]  ';'  expected	157	None	replace
310	[BUG]  [BUGGY]  add(Long.toString(prev)+  Long.toString(x));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+  Long.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+  Long.toString(x));	  add(Long.toString(x)+    Long.toString(x));    	non-compiled	[CE]  ';'  expected	82	None	replace
311	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(prev));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Long.toString(prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.toString(prev));	  add(Long.toString(x)+    Long.toString(x));    	non-compiled	[CE]  ';'  expected	82	None	replace
312	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(value));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Long.toString(value));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.toString(value));	  add(Long.toString(x)+    Long.toString(x));    	non-compiled	[CE]  ';'  expected	82	None	replace
313	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(exp));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Long.toString(exp));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.toString(exp));	  add(Long.toString(x)+    Long.toString(x));    	non-compiled	[CE]  ';'  expected	82	None	replace
314	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(x  +  1));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Long.toString(x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.toString(x  +  1));	  add(Long.toString(x)+    Long.toString(x));    	non-compiled	[CE]  ';'  expected	82	None	replace
315	[BUG]  [BUGGY]  addNumber(Long.toString(x)+  Long.toString(x));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  addNumber(Long.toString(x)+  Long.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	addNumber(Long.toString(x)+  Long.toString(x));	  add(Long.toString(x)+    Long.toString(x));    	non-compiled	[CE]  ';'  expected	82	None	replace
316	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.toString(x)  +  1);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Long.toString(x)  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.toString(x)  +  1);	  add(Long.toString(x)+    Long.toString(x));    	non-compiled	[CE]  ';'  expected	82	None	replace
317	[BUG]  [BUGGY]  long  mantissa  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  getLastChar()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getLastChar()  -  1;	  int    mantissa    =    getLastChar()    -    1;    	non-compiled	[CE]  ';'  expected	23	None	replace
318	[BUG]  [BUGGY]  int  mantissa  =  getFirstChar()  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getFirstChar()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getFirstChar()  -  1;	  int    mantissa    =    getLastChar()    -    1;    	non-compiled	[CE]  ';'  expected	23	None	replace
319	[BUG]  [BUGGY]  double  mantissa  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  getLastChar()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getLastChar()  -  1;	  int    mantissa    =    getLastChar()    -    1;    	non-compiled	[CE]  ';'  expected	23	None	replace
320	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  :  10;  exp++;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  :  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  :  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    <    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	179	None	replace
321	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  /  10  :  10;  exp++;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  /  10  :  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  /  10  :  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    <    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	179	None	replace
322	[BUG]  [BUGGY]  Mantissa  m  =  mantissa  /  10  *  Math.pow(10,  exp  +  1)+  1;  exp++;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Mantissa  m  =  mantissa  /  10  *  Math.pow(10,  exp  +  1)+  1;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Mantissa  m  =  mantissa  /  10  *  Math.pow(10,  exp  +  1)+  1;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    <    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	179	None	replace
323	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  /  10  :  1;  exp++;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  /  10  :  1;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)?  mantissa  /  10  :  1;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    <    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	179	None	replace
324	[BUG]  [BUGGY]  Mantissa  m  =  mantissa  *  10  *  Math.pow(10,  exp  +  1)  <  1000;  exp++;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Mantissa  m  =  mantissa  *  10  *  Math.pow(10,  exp  +  1)  <  1000;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Mantissa  m  =  mantissa  *  10  *  Math.pow(10,  exp  +  1)  <  1000;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    <    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	179	None	replace
325	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
326	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
327	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	181	None	replace
328	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	181	None	replace
329	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	181	None	replace
330	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  mantissa  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  mantissa  /=  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	181	None	replace
331	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	181	None	replace
332	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  x  +  1));	  long    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	130	None	replace
333	[BUG]  [BUGGY]  ((  long)x  +  1)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
334	[BUG]  [BUGGY]  ((  long)x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
335	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
336	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  -  x);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  -  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  -  x);	  int    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	37	None	replace
337	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  -  10);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  -  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  -  10);	  int    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	37	None	replace
338	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  -  prev  +  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x  -  prev  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  -  prev  +  1);	  int    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	37	None	replace
339	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  prev  -  x);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  prev  -  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  prev  -  x);	  int    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	37	None	replace
340	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  +  10);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  +  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  +  10);	  int    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	37	None	replace
341	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  /  prev);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x  /  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  /  prev);	  int    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	37	None	replace
342	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);	  long    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	45	None	replace
343	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev),  x);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev),  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  prev),  x);	  long    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	45	None	replace
344	[BUG]  [BUGGY]  int  value  =  (int)x  +  1L;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  +  1L;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  +  1L;	  long    value    =    (long)x    +    1L;    	non-compiled	[CE]  ';'  expected	105	None	replace
345	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));	  double    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	16	None	replace
346	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev),  x);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  prev),  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  prev),  x);	  double    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	16	None	replace
347	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  12));  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  12));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  12));	  double    mantissa    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	16	None	replace
348	[BUG]  [BUGGY]  int  value  =  (int)x  &  0xFFFFL;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  &  0xFFFFL;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  &  0xFFFFL;	  long    value    =    (long)x    &    0xFFFFL;    	non-compiled	[CE]  ';'  expected	2	None	replace
349	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xFFFFL  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  &  0xFFFFL  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xFFFFL  +  1;	  long    value    =    (long)x    &    0xFFFFL;    	non-compiled	[CE]  ';'  expected	2	None	replace
350	[BUG]  [BUGGY]  long  value  =  (long)x  &  0xFFFFL  |  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  &  0xFFFFL  |  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  &  0xFFFFL  |  1;	  long    value    =    (long)x    &    0xFFFFL;    	non-compiled	[CE]  ';'  expected	2	None	replace
351	[BUG]  [BUGGY]  long  value  =  (long)x  /  0xFFFFL;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  0xFFFFL;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  0xFFFFL;	  long    value    =    (long)x    &    0xFFFFL;    	non-compiled	[CE]  ';'  expected	2	None	replace
352	[BUG]  [BUGGY]  long  value  =  (long)x  -  0xFFFFL;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  -  0xFFFFL;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  -  0xFFFFL;	  long    value    =    (long)x    &    0xFFFFL;    	non-compiled	[CE]  ';'  expected	2	None	replace
353	[BUG]  [BUGGY]  add(Long.toString(prev)+ "E "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+ "E "  +  Integer.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+ "E "  +  Integer.toString(x));	  add(Long.toString(x)+       "E   "    +    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	76	None	replace
354	[BUG]  [BUGGY]  add(Long.toString(x)+ ",  E   "  +  Integer.toString(x));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+ ",  E   "  +  Integer.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+ ",  E   "  +  Integer.toString(x));	  add(Long.toString(x)+       "E   "    +    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	76	None	replace
355	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)/  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)/  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev)/  1);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	219	None	replace
356	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	219	None	replace
357	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)+  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)+  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev)+  2);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	219	None	replace
358	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	219	None	replace
359	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  prev)+  1);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	219	None	replace
360	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  x);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  x);	  double    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	91	None	replace
361	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  -  prev  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  -  prev  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  -  prev  +  1);	  double    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	91	None	replace
362	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  /  prev);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  /  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  /  prev);	  double    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	91	None	replace
363	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  *  x);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  *  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  *  x);	  double    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	91	None	replace
364	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  8);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  8);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  8);	  double    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	91	None	replace
365	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  X);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  X);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  X);	  double    value    =    Math.pow(10,    x    -    prev);    	non-compiled	[CE]  ';'  expected	91	None	replace
366	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
367	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
368	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
369	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)?  mantissa  :  10;  exp++;  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)?  mantissa  :  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)?  mantissa  :  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
370	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
371	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
372	[BUG]  [BUGGY]  String  mantissa  =  getLastChar();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  mantissa  =  getLastChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  mantissa  =  getLastChar();	  char    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	18	None	replace
373	[BUG]  [BUGGY]  char  mantissa  =  getFirstChar();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  getFirstChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  getFirstChar();	  char    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	18	None	replace
374	[BUG]  [BUGGY]  char  mantissa  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  getLastChar()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  getLastChar()  +  1;	  char    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	18	None	replace
375	[BUG]  [BUGGY]  double  value  =  getLastChar().longValue()  +  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().longValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().longValue()  +  1;	  double    value    =    getLastChar().longValue();    	non-compiled	[CE]  ';'  expected	221	None	replace
376	[BUG]  [BUGGY]  double  value  =  getFirstChar().longValue();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getFirstChar().longValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar().longValue();	  double    value    =    getLastChar().longValue();    	non-compiled	[CE]  ';'  expected	221	None	replace
377	[BUG]  [BUGGY]  double  value  =  getLastChar().intValue();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().intValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().intValue();	  double    value    =    getLastChar().longValue();    	non-compiled	[CE]  ';'  expected	221	None	replace
378	[BUG]  [BUGGY]  double  value  =  getLastChar().longValue()  -  1;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().longValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().longValue()  -  1;	  double    value    =    getLastChar().longValue();    	non-compiled	[CE]  ';'  expected	221	None	replace
379	[BUG]  [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
380	[BUG]  [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
381	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
382	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x),  prev  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x),  prev  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x),  prev  +  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x),    prev);    	non-compiled	[CE]  ';'  expected	210	None	replace
383	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)-  prev);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)-  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)-  prev);	  double    value    =    Math.pow(10,    Math.pow(10,    x),    prev);    	non-compiled	[CE]  ';'  expected	210	None	replace
384	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x),  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x),  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x),  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x),    prev);    	non-compiled	[CE]  ';'  expected	210	None	replace
385	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1),  prev);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1),  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  +  1),  prev);	  double    value    =    Math.pow(10,    Math.pow(10,    x),    prev);    	non-compiled	[CE]  ';'  expected	210	None	replace
386	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  2);	  double    value    =    Math.pow(10,    Math.pow(10,    x),    prev);    	non-compiled	[CE]  ';'  expected	210	None	replace
387	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	73	None	replace
388	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  exp++;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	73	None	replace
389	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	73	None	replace
390	[BUG]  [BUGGY]  Integer  value  =  getLastChar().doubleValue()  +  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().doubleValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().doubleValue()  +  1;	  Integer    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
391	[BUG]  [BUGGY]  Integer  value  =  getFirstChar().doubleValue();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChar().doubleValue();	  Integer    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
392	[BUG]  [BUGGY]  Integer  value  =  getLastChar().doubleValue()  -  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().doubleValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().doubleValue()  -  1;	  Integer    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
393	[BUG]  [BUGGY]  Integer  value  =  getLastIntChar().doubleValue();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastIntChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastIntChar().doubleValue();	  Integer    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
394	[BUG]  [BUGGY]  Integer  value  =  getLastChar().doubleValue()  /  2;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().doubleValue()  /  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().doubleValue()  /  2;	  Integer    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
395	[BUG]  [BUGGY]  Integer  value  =  getLastChar().doubleValue()  /  10  +  1;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().doubleValue()  /  10  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().doubleValue()  /  10  +  1;	  Integer    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
396	[BUG]  [BUGGY]  Integer  value  =  getLastChar().doubleValue()  *  2;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar().doubleValue()  *  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar().doubleValue()  *  2;	  Integer    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	111	None	replace
397	[BUG]  [BUGGY]  int  value  =  (int)x  /  0xFFFF;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  /  0xFFFF;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /  0xFFFF;	  long    value    =    (long)x    /    0xFFFF;    	non-compiled	[CE]  ';'  expected	3	None	replace
398	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  x);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  x);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
399	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  prev);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  prev);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
400	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  exp  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  exp  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  exp  -  1);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
401	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  1);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
402	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  value);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  value);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  value);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
403	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  10);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  10);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
404	[BUG]  [BUGGY]  mantissa  -=  Math.pow(10,  exp);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  -=  Math.pow(10,  exp);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  -=  Math.pow(10,  exp);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
405	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  128);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  128);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  128);	  mantissa    =    Math.pow(10,    exp);    	non-compiled	[CE]  ';'  expected	178	None	replace
406	[BUG]  [BUGGY]  if(Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
407	[BUG]  [BUGGY]  if(Math.abs(x)  <  value)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  value)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  value)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
408	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	141	None	replace
409	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  prev)-  1);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
410	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)-  2);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev)-  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev)-  2);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
411	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);	  int    value    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	44	None	replace
412	[BUG]  [BUGGY]  double  mantissa  =  getFirstChar();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  getFirstChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getFirstChar();	  double    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	20	None	replace
413	[BUG]  [BUGGY]  double  mantissa  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  getLastChar()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getLastChar()  +  1;	  double    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	20	None	replace
414	[BUG]  [BUGGY]  double  mantissa  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  getLastChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getLastChar().doubleValue();	  double    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	20	None	replace
415	[BUG]  [BUGGY]  double  mantissa  =  getLastChar()  /  2;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  getLastChar()  /  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  getLastChar()  /  2;	  double    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	20	None	replace
416	[BUG]  [BUGGY]  long  value  =  (int)x  /  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  /  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  /  1;	  long    value    =    (int)x    -    1;    	non-compiled	[CE]  ';'  expected	101	None	replace
417	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));	  double    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	136	None	replace
418	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x)-  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  x)-  1);	  double    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	136	None	replace
419	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x),  prev);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x),  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  x),  prev);	  double    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	136	None	replace
420	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);	  double    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	136	None	replace
421	[BUG]  [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  2));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  2));	  double    mantissa    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	136	None	replace
422	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
423	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
424	[BUG]  [BUGGY]  add(Long.toString(x)+  127);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  127);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  127);	  add(Long.toString(x)+    128);    	non-compiled	[CE]  ';'  expected	246	None	replace
425	[BUG]  [BUGGY]  add(Long.toString(x)+  100.0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  100.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  100.0);	  add(Long.toString(x)+    128);    	non-compiled	[CE]  ';'  expected	246	None	replace
426	[BUG]  [BUGGY]  add(Integer.toString(x)+  128);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Integer.toString(x)+  128);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Integer.toString(x)+  128);	  add(Long.toString(x)+    128);    	non-compiled	[CE]  ';'  expected	246	None	replace
427	[BUG]  [BUGGY]  add(Long.toString(x)+  129);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  129);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  129);	  add(Long.toString(x)+    128);    	non-compiled	[CE]  ';'  expected	246	None	replace
428	[BUG]  [BUGGY]  add(Long.toString(prev)+  128);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+  128);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+  128);	  add(Long.toString(x)+    128);    	non-compiled	[CE]  ';'  expected	246	None	replace
429	[BUG]  [BUGGY]  if(x  <  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(x    <=    0)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	239	None	replace
430	[BUG]  [BUGGY]  if(x  <=  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <=  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <=  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(x    <=    0)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	239	None	replace
431	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }	  if(x    <=    0)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	239	None	replace
432	[BUG]  [BUGGY]  add(Long.toString(x)+  prev  /  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  prev  /  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  prev  /  1);	  add(Long.toString(x)+    prev    -    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
433	[BUG]  [BUGGY]  add(Long.toString(x)+  prev  -  2);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  prev  -  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  prev  -  2);	  add(Long.toString(x)+    prev    -    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
434	[BUG]  [BUGGY]  add(Long.toString(x)+  prev  *  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  prev  *  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  prev  *  1);	  add(Long.toString(x)+    prev    -    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
435	[BUG]  [BUGGY]  add(Long.toString(x)+  10  +  prev  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  10  +  prev  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  10  +  prev  -  1);	  add(Long.toString(x)+    prev    -    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
436	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.MIN_VALUE  -  1);	  add(Long.toString(x)+    prev    -    1);    	non-compiled	[CE]  ';'  expected	204	None	replace
437	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	185	None	replace
438	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  10  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  10  +  1);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	185	None	replace
439	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  8);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  8);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  8);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	185	None	replace
440	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  3);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  3);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	185	None	replace
441	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2.0);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  2.0);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	185	None	replace
442	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  4);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)/  4);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)/  4);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	185	None	replace
443	[BUG]  [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)  >=  mantissa)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)  >=  mantissa)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(value  /  10  *  Math.pow(10,  exp  +  1)  >=  mantissa)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	195	None	replace
444	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	195	None	replace
445	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(double)Math.pow(10,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  prev);	  int    value    =(int)Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	158	None	replace
446	[BUG]  [BUGGY]  long  value  =(long)Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =(long)Math.pow(10,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)Math.pow(10,  prev);	  int    value    =(int)Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	158	None	replace
447	[BUG]  [BUGGY]  char  value  =(int)Math.pow(10,  prev);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(int)Math.pow(10,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)Math.pow(10,  prev);	  int    value    =(int)Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	158	None	replace
448	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  prev  -  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  prev  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  prev  -  1);	  int    value    =(int)Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	158	None	replace
449	[BUG]  [BUGGY]  int  value  =  (int)x  /(int)y;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  /(int)y;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  /(int)y;	  long    value    =    (long)x    /(long)y;    	non-compiled	[CE]  ';'  expected	191	None	replace
450	[BUG]  [BUGGY]  long  value  =  (long)x  /(long)y  +  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /(long)y  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /(long)y  +  1;	  long    value    =    (long)x    /(long)y;    	non-compiled	[CE]  ';'  expected	191	None	replace
451	[BUG]  [BUGGY]  long  value  =  (long)y  /(long)x;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)y  /(long)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)y  /(long)x;	  long    value    =    (long)x    /(long)y;    	non-compiled	[CE]  ';'  expected	191	None	replace
452	[BUG]  [BUGGY]  double  value  =  (double)x  /(double)y;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  (double)x  /(double)y;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  /(double)y;	  long    value    =    (long)x    /(long)y;    	non-compiled	[CE]  ';'  expected	191	None	replace
453	[BUG]  [BUGGY]  long  value  =  (int)x  /(int)y;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  /(int)y;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  /(int)y;	  long    value    =    (long)x    /(long)y;    	non-compiled	[CE]  ';'  expected	191	None	replace
454	[BUG]  [BUGGY]  char  value  =  getLongValue();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  getLongValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  getLongValue();	  int    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
455	[BUG]  [BUGGY]  int  value  =  getLongValue()  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLongValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLongValue()  -  1;	  int    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
456	[BUG]  [BUGGY]  int  value  =  getIntValue();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getIntValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getIntValue();	  int    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
457	[BUG]  [BUGGY]  int  value  =  getLongValue()  +  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLongValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLongValue()  +  1;	  int    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	32	None	replace
458	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  10));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  10));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  10));	  double    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	59	None	replace
459	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  2));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  2));	  double    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	59	None	replace
460	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  1));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  1));	  double    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	59	None	replace
461	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  16));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  16));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  16));	  double    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	59	None	replace
462	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  12));  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  12));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  12));	  double    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	59	None	replace
463	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  12)  +  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  12)  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  12)  +  1);	  double    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	59	None	replace
464	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  4));  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  4));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  4));	  double    value    =    Math.pow(10,    Math.pow(10,    12));    	non-compiled	[CE]  ';'  expected	59	None	replace
465	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  x  +  1));	  int    value    =    Math.pow(10,    Math.pow(10,    x    +    1));    	non-compiled	[CE]  ';'  expected	127	None	replace
466	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  exp  +  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  exp  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  exp  +  1));	  int    value    =    Math.pow(10,    Math.pow(10,    x    +    1));    	non-compiled	[CE]  ';'  expected	127	None	replace
467	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp  +  1));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  exp  +  1));	  double    value    =    Math.pow(10,    Math.pow(10,    x    +    1));    	non-compiled	[CE]  ';'  expected	163	None	replace
468	[BUG]  [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	225	None	replace
469	[BUG]  [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	225	None	replace
470	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    prev)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	225	None	replace
471	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  10  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  10  +  1);	  double    value    =    Math.pow(10,    prev    -    10);    	non-compiled	[CE]  ';'  expected	50	None	replace
472	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  12);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  12);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  12);	  double    value    =    Math.pow(10,    prev    -    10);    	non-compiled	[CE]  ';'  expected	50	None	replace
473	[BUG]  [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp  +  1);  exp++;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp  +  1);  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  /=  10  *  Math.pow(10,  exp  +  1);  exp++;	  mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	69	None	replace
474	[BUG]  [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp);  exp++;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp);  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  /=  10  *  Math.pow(10,  exp);  exp++;	  mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	69	None	replace
475	[BUG]  [BUGGY]  mantissa  /=  10  +  1;  exp++;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  /=  10  +  1;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  /=  10  +  1;  exp++;	  mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	69	None	replace
476	[BUG]  [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  /=  10  *  Math.pow(10,  exp  +  1);	  mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	69	None	replace
477	[BUG]  [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp  +  1));  exp++;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  /=  10  *  Math.pow(10,  exp  +  1));  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  /=  10  *  Math.pow(10,  exp  +  1));  exp++;	  mantissa    /=    10;    exp++;    	non-compiled	[CE]  ';'  expected	69	None	replace
478	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)-  2);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	57	None	replace
479	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)-  1);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	57	None	replace
480	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  0.5);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)-  0.5);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)-  0.5);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	57	None	replace
481	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp)-  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  exp)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  exp)-  1);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)-    1);    	non-compiled	[CE]  ';'  expected	57	None	replace
482	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  prev);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.MIN_VALUE,  prev);	  add(Long.toString(x)+    Predicates.MIN_VALUE);    	non-compiled	[CE]  ';'  expected	201	None	replace
483	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.MIN_VALUE,  1);	  add(Long.toString(x)+    Predicates.MIN_VALUE);    	non-compiled	[CE]  ';'  expected	201	None	replace
484	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.MIN_VALUE,  2);	  add(Long.toString(x)+    Predicates.MIN_VALUE);    	non-compiled	[CE]  ';'  expected	201	None	replace
485	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.MIN_VALUE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Long.MIN_VALUE);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.MIN_VALUE);	  add(Long.toString(x)+    Predicates.MIN_VALUE);    	non-compiled	[CE]  ';'  expected	201	None	replace
486	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  10);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.MIN_VALUE,  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.MIN_VALUE,  10);	  add(Long.toString(x)+    Predicates.MIN_VALUE);    	non-compiled	[CE]  ';'  expected	201	None	replace
487	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  *  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  *  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  *  1);	  double    value    =    Math.pow(10,    prev    -    1);    	non-compiled	[CE]  ';'  expected	47	None	replace
488	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  1  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  1  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  1  +  1);	  double    value    =    Math.pow(10,    prev    -    1);    	non-compiled	[CE]  ';'  expected	47	None	replace
489	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  3);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  3);	  double    value    =    Math.pow(10,    prev    -    1);    	non-compiled	[CE]  ';'  expected	47	None	replace
490	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  /  10  +  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  /  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  /  10  +  1);	  double    value    =    Math.pow(10,    x    /    10);    	non-compiled	[CE]  ';'  expected	93	None	replace
491	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev  /  10);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  prev  /  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev  /  10);	  double    value    =    Math.pow(10,    x    /    10);    	non-compiled	[CE]  ';'  expected	93	None	replace
492	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x  /  10);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x  /  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x  /  10);	  double    value    =    Math.pow(10,    x    /    10);    	non-compiled	[CE]  ';'  expected	93	None	replace
493	[BUG]  [BUGGY]  Double  value  =  Math.pow(10,  prev  /  10);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Double  value  =  Math.pow(10,  prev  /  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Double  value  =  Math.pow(10,  prev  /  10);	  double    value    =    Math.pow(10,    x    /    10);    	non-compiled	[CE]  ';'  expected	93	None	replace
494	[BUG]  [BUGGY]  ||  Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
495	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	257	None	replace
496	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	257	None	replace
497	[BUG]  [BUGGY]  if(Math.abs(x)>  100)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)>  100)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)>  100)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	257	None	replace
498	[BUG]  [BUGGY]  if(Math.abs(x)>  100)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)>  100)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)>  100)  {  if(Math.abs(x)  <  100)  {  add(Long.toString(x));  }  else  {  add( "   "  +  Integer.toString(x));  }	  if(Math.abs(x)    <    100)    {    add(Long.toString(x));    }    else    {    add(   "   "    +    Integer.toString(x));    }    	non-compiled	[CE]  ';'  expected	257	None	replace
499	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  *(long)x;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  *(long)x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  *(long)x;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
500	[BUG]  [BUGGY]  double  value  =  getFirstChar().doubleValue()  /(long)x;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getFirstChar().doubleValue()  /(long)x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar().doubleValue()  /(long)x;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
501	[BUG]  [BUGGY]  long  value  =  getLastChar().doubleValue()  /(long)x;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().doubleValue()  /(long)x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().doubleValue()  /(long)x;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
502	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /(double)x;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  /(double)x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /(double)x;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
503	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  +(long)x;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  +(long)x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  +(long)x;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
504	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /(int)x;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  /(int)x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /(int)x;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
505	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  *(int)x;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  *(int)x;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  *(int)x;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
506	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /(long)x  +  1;  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  /(long)x  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /(long)x  +  1;	  double    value    =    getLastChar().doubleValue()    /(long)x;    	non-compiled	[CE]  ';'  expected	249	None	replace
507	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)/  2;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x)/  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)/  2;	  double    value    =    Math.pow(10,    x)/    10;    	non-compiled	[CE]  ';'  expected	228	None	replace
508	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)/  10  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x)/  10  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)/  10  +  1;	  double    value    =    Math.pow(10,    x)/    10;    	non-compiled	[CE]  ';'  expected	228	None	replace
509	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x)/  10;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x)/  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x)/  10;	  double    value    =    Math.pow(10,    x)/    10;    	non-compiled	[CE]  ';'  expected	228	None	replace
510	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev)/  10;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  prev)/  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev)/  10;	  double    value    =    Math.pow(10,    x)/    10;    	non-compiled	[CE]  ';'  expected	228	None	replace
511	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)/  4;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x)/  4;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)/  4;	  double    value    =    Math.pow(10,    x)/    10;    	non-compiled	[CE]  ';'  expected	228	None	replace
512	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)/  3;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x)/  3;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)/  3;	  double    value    =    Math.pow(10,    x)/    10;    	non-compiled	[CE]  ';'  expected	228	None	replace
513	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev)-  1;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev)-  1;	  int    value    =    Math.pow(10,    x)-    1;    	non-compiled	[CE]  ';'  expected	40	None	replace
514	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x)/  1;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x)/  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x)/  1;	  int    value    =    Math.pow(10,    x)-    1;    	non-compiled	[CE]  ';'  expected	40	None	replace
515	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev)/  1;  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev)/  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev)/  1;	  int    value    =    Math.pow(10,    x)-    1;    	non-compiled	[CE]  ';'  expected	40	None	replace
516	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  +  1)-  1;  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x  +  1)-  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  +  1)-  1;	  int    value    =    Math.pow(10,    x)-    1;    	non-compiled	[CE]  ';'  expected	40	None	replace
517	[BUG]  [BUGGY]  Integer  value  =  getLastChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChild();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChild();	  Integer    value    =    getFirstChild();    	non-compiled	[CE]  ';'  expected	114	None	replace
518	[BUG]  [BUGGY]  Integer  value  =  getFirstChild().doubleValue();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstChild().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChild().doubleValue();	  Integer    value    =    getFirstChild();    	non-compiled	[CE]  ';'  expected	114	None	replace
519	[BUG]  [BUGGY]  Integer  value  =  getFirstChild().intValue();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstChild().intValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChild().intValue();	  Integer    value    =    getFirstChild();    	non-compiled	[CE]  ';'  expected	114	None	replace
520	[BUG]  [BUGGY]  Integer  value  =  getEndChild();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getEndChild();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getEndChild();	  Integer    value    =    getFirstChild();    	non-compiled	[CE]  ';'  expected	114	None	replace
521	[BUG]  [BUGGY]  Integer  value  =  getValue();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getValue();	  Integer    value    =    getFirstChild();    	non-compiled	[CE]  ';'  expected	114	None	replace
522	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    +    1));    	non-compiled	[CE]  ';'  expected	133	None	replace
523	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    +    1));    	non-compiled	[CE]  ';'  expected	133	None	replace
524	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  value  +  1));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  value  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  value  +  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    +    1));    	non-compiled	[CE]  ';'  expected	133	None	replace
525	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  2));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  2));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x    +    1));    	non-compiled	[CE]  ';'  expected	133	None	replace
526	[BUG]  [BUGGY]  long  mantissa  =  getFirstChar();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  getFirstChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getFirstChar();	  int    mantissa    =    getFirstChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
527	[BUG]  [BUGGY]  int  mantissa  =  getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getFirstChild();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getFirstChild();	  int    mantissa    =    getFirstChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
528	[BUG]  [BUGGY]  t  mantissa  =  getLastChar();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  t  mantissa  =  getLastChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	t  mantissa  =  getLastChar();	  int    mantissa    =    getFirstChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
529	[BUG]  [BUGGY]  int  mantissa  =  getEndChar();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  getEndChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  getEndChar();	  int    mantissa    =    getFirstChar();    	non-compiled	[CE]  ';'  expected	22	None	replace
530	[BUG]  [BUGGY]  Integer  value  =  getFirstElement().getLastChar();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstElement().getLastChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstElement().getLastChar();	  Integer    value    =    getLastChar()    -    1;    	non-compiled	[CE]  ';'  expected	109	None	replace
531	[BUG]  [BUGGY]  Integer  value  =  getFirstChild().getLastChar();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstChild().getLastChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChild().getLastChar();	  Integer    value    =    getLastChar()    -    1;    	non-compiled	[CE]  ';'  expected	109	None	replace
532	[BUG]  [BUGGY]  Integer  value  =  getFirstChar()  -  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getFirstChar()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getFirstChar()  -  1;	  Integer    value    =    getLastChar()    -    1;    	non-compiled	[CE]  ';'  expected	109	None	replace
533	[BUG]  [BUGGY]  Integer  value  =  getNumber()  -  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getNumber()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getNumber()  -  1;	  Integer    value    =    getLastChar()    -    1;    	non-compiled	[CE]  ';'  expected	109	None	replace
534	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
535	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  {  1000)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
536	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)?  mantissa  :  10;  exp++;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)?  mantissa  :  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)?  mantissa  :  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
537	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  12)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  12)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  12)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
538	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  20)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  20)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  20)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
539	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  127)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  127)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  127)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
540	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  0)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  0)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  0)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
541	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  128)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  128)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  128)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
542	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  11)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  11)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  11)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	182	None	replace
543	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)&&    prev    >=    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	216	None	replace
544	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)&&    prev    >=    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	216	None	replace
545	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)&&    prev    >=    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	216	None	replace
546	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev)&&  x  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev)&&  x  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev)&&  x  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)&&    prev    >=    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	216	None	replace
547	[BUG]  [BUGGY]  ((  long)x)  <=  Math.abs(x)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x)  <=  Math.abs(x)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x)  <=  Math.abs(x)&&  prev  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)&&    prev    >=    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	216	None	replace
548	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev)&&  exp  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(prev)&&  exp  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(prev)&&  exp  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)&&    prev    >=    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	216	None	replace
549	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(double)Math.pow(10,  Math.pow(10,  prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  Math.pow(10,  prev));	  int    value    =(int)Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	159	None	replace
550	[BUG]  [BUGGY]  long  value  =(long)Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =(long)Math.pow(10,  Math.pow(10,  prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)Math.pow(10,  Math.pow(10,  prev));	  int    value    =(int)Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	159	None	replace
551	[BUG]  [BUGGY]  char  value  =(int)Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(int)Math.pow(10,  Math.pow(10,  prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)Math.pow(10,  Math.pow(10,  prev));	  int    value    =(int)Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	159	None	replace
552	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev)-  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  prev)-  1);	  int    value    =(int)Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	159	None	replace
553	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  Math.pow(10,  prev  -  1));	  int    value    =(int)Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	159	None	replace
554	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  2);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  2);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	234	None	replace
555	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10  +  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10  +  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	234	None	replace
556	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  8);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  8);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  8);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	234	None	replace
557	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  4);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  4);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  4);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	234	None	replace
558	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  3);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  3);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  3);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	234	None	replace
559	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  prev)/  10);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev)/    10);    	non-compiled	[CE]  ';'  expected	234	None	replace
560	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  +  1);	  int    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	33	None	replace
561	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  *  10);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  *  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  *  10);	  int    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	33	None	replace
562	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  +  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  +  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  +  2);	  int    value    =    Math.pow(10,    prev);    	non-compiled	[CE]  ';'  expected	33	None	replace
563	[BUG]  [BUGGY]  add(Long.toString(x)+  0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  0);	  add(Long.toString(x)+    3);    	non-compiled	[CE]  ';'  expected	247	None	replace
564	[BUG]  [BUGGY]  add(Long.toString(x)+  1).doubleValue());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  1).doubleValue());  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  1).doubleValue());	  add(Long.toString(x)+    3);    	non-compiled	[CE]  ';'  expected	247	None	replace
565	[BUG]  [BUGGY]  Double  value  =  getLastChar();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Double  value  =  getLastChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Double  value  =  getLastChar();	  double    value    =    getLastChar()    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
566	[BUG]  [BUGGY]  double  value  =  getLastChar()  /  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar()  /  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar()  /  1;	  double    value    =    getLastChar()    +    1;    	non-compiled	[CE]  ';'  expected	149	None	replace
567	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >>    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	67	None	replace
568	[BUG]  [BUGGY]  long  value  =  (int)x  /(int)Math.rint(value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  /(int)Math.rint(value);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  /(int)Math.rint(value);	  long    value    =    (int)x    /(int)x;    	non-compiled	[CE]  ';'  expected	169	None	replace
569	[BUG]  [BUGGY]  long  value  =  (int)x  /(int)Math.pow(10,  x);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  /(int)Math.pow(10,  x);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  /(int)Math.pow(10,  x);	  long    value    =    (int)x    /(int)x;    	non-compiled	[CE]  ';'  expected	169	None	replace
570	[BUG]  [BUGGY]  long  value  =  (int)x  /(int)Math.rint(prev);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  /(int)Math.rint(prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  /(int)Math.rint(prev);	  long    value    =    (int)x    /(int)x;    	non-compiled	[CE]  ';'  expected	169	None	replace
571	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  /  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /  1;	  double    value    =    getLastChar().doubleValue()    +    1;    	non-compiled	[CE]  ';'  expected	115	None	replace
572	[BUG]  [BUGGY]  Double  value  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Double  value  =  getLastChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Double  value  =  getLastChar().doubleValue();	  double    value    =    getLastChar().doubleValue()    +    1;    	non-compiled	[CE]  ';'  expected	115	None	replace
573	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  *  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  *  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  *  1;	  double    value    =    getLastChar().doubleValue()    +    1;    	non-compiled	[CE]  ';'  expected	115	None	replace
574	[BUG]  [BUGGY]  double  value  =  getFirstChar().doubleValue()  +  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getFirstChar().doubleValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar().doubleValue()  +  1;	  double    value    =    getLastChar().doubleValue()    +    1;    	non-compiled	[CE]  ';'  expected	115	None	replace
575	[BUG]  [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
576	[BUG]  [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
577	[BUG]  [BUGGY]  if(x  <  0)  {  if(Math.abs(prev)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0)  {  if(Math.abs(prev)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0)  {  if(Math.abs(prev)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
578	[BUG]  [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
579	[BUG]  [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
580	[BUG]  [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0)  {  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
581	[BUG]  [BUGGY]  char  value  =  (char)Math.floor(prev);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  (char)Math.floor(prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  (char)Math.floor(prev);	  int    value    =    (int)Math.floor(prev);    	non-compiled	[CE]  ';'  expected	194	None	replace
582	[BUG]  [BUGGY]  double  value  =  (double)Math.floor(prev);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  (double)Math.floor(prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)Math.floor(prev);	  int    value    =    (int)Math.floor(prev);    	non-compiled	[CE]  ';'  expected	194	None	replace
583	[BUG]  [BUGGY]  long  value  =  (long)Math.floor(prev);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)Math.floor(prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)Math.floor(prev);	  int    value    =    (int)Math.floor(prev);    	non-compiled	[CE]  ';'  expected	194	None	replace
584	[BUG]  [BUGGY]  int  value  =  (int)Math.floor(x);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)Math.floor(x);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)Math.floor(x);	  int    value    =    (int)Math.floor(prev);    	non-compiled	[CE]  ';'  expected	194	None	replace
585	[BUG]  [BUGGY]  char  value  =  (int)Math.floor(prev);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  (int)Math.floor(prev);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  (int)Math.floor(prev);	  int    value    =    (int)Math.floor(prev);    	non-compiled	[CE]  ';'  expected	194	None	replace
586	[BUG]  [BUGGY]  int  value  =  (int)Math.ceil(x);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)Math.ceil(x);  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)Math.ceil(x);	  int    value    =    (int)Math.floor(prev);    	non-compiled	[CE]  ';'  expected	194	None	replace
587	[BUG]  [BUGGY]  Integer  value  =  getLastChar()  /  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLastChar()  /  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLastChar()  /  1;	  Integer    value    =    getLastChar()    +    1;    	non-compiled	[CE]  ';'  expected	107	None	replace
588	[BUG]  [BUGGY]  int  value  =  getLastChar().doubleValue()  +  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLastChar().doubleValue()  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().doubleValue()  +  1;	  int    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	126	None	replace
589	[BUG]  [BUGGY]  int  value  =  getLastChar().doubleValue()  -  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLastChar().doubleValue()  -  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().doubleValue()  -  1;	  int    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	126	None	replace
590	[BUG]  [BUGGY]  int  value  =  getFirstChar().doubleValue();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getFirstChar().doubleValue();  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getFirstChar().doubleValue();	  int    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	126	None	replace
591	[BUG]  [BUGGY]  int  value  =  getLastChar().intValue();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  getLastChar().intValue();  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  getLastChar().intValue();	  int    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	126	None	replace
592	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  *  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  *  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  *  2);	  double    value    =    Math.pow(10,    prev    +    2);    	non-compiled	[CE]  ';'  expected	213	None	replace
593	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  +  2  -  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  +  2  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  +  2  -  1);	  double    value    =    Math.pow(10,    prev    +    2);    	non-compiled	[CE]  ';'  expected	213	None	replace
594	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  +  3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  +  3);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  +  3);	  double    value    =    Math.pow(10,    prev    +    2);    	non-compiled	[CE]  ';'  expected	213	None	replace
595	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev  +  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  prev  +  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev  +  2);	  double    value    =    Math.pow(10,    prev    +    2);    	non-compiled	[CE]  ';'  expected	213	None	replace
596	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  x)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  x)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  {  x)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    x)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	88	None	replace
597	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  ||    Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
598	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;	  ||    Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
599	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;	  ||    Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
600	[BUG]  [BUGGY]  ||  Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(value)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  ||    Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
601	[BUG]  [BUGGY]  ||  Math.abs(x)  <  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <  0)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  ||    Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
602	[BUG]  [BUGGY]  ||  Math.abs(exp)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(exp)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(exp)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  ||    Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
603	[BUG]  [BUGGY]  ||  Math.abs(x  +  1)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x  +  1)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x  +  1)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  ||    Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
604	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.US_ASCII,  prev);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.US_ASCII,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.US_ASCII,  prev);	  add(Long.toString(x)+    Predicates.US_ASCII);    	non-compiled	[CE]  ';'  expected	202	None	replace
605	[BUG]  [BUGGY]  add(Long.toString(x)+  Long.MAX_VALUE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Long.MAX_VALUE);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Long.MAX_VALUE);	  add(Long.toString(x)+    Predicates.US_ASCII);    	non-compiled	[CE]  ';'  expected	202	None	replace
606	[BUG]  [BUGGY]  add(Long.toString(x)+  Predicates.US_ASCII  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Predicates.US_ASCII  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Predicates.US_ASCII  +  1);	  add(Long.toString(x)+    Predicates.US_ASCII);    	non-compiled	[CE]  ';'  expected	202	None	replace
607	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x  -  1  +  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x  -  1  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x  -  1  +  1);	  double    value    =    Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	90	None	replace
608	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  0)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  0)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  0)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	183	None	replace
609	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  12)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  12)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  12)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	183	None	replace
610	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1))  {  exp++;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1))  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1))  {  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    10)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	183	None	replace
611	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  *  2));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  *  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  *  2));	  double    value    =    Math.pow(10,    Math.pow(10,    x    +    2));    	non-compiled	[CE]  ';'  expected	167	None	replace
612	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x  +  2));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x  +  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  x  +  2));	  double    value    =    Math.pow(10,    Math.pow(10,    x    +    2));    	non-compiled	[CE]  ';'  expected	167	None	replace
613	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x  +  2));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x  +  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  x  +  2));	  double    value    =    Math.pow(10,    Math.pow(10,    x    +    2));    	non-compiled	[CE]  ';'  expected	167	None	replace
614	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(double)Math.pow(10,  x  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  x  -  1);	  double    value    =(double)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	155	None	replace
615	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  x  *  10);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(double)Math.pow(10,  x  *  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  x  *  10);	  double    value    =(double)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	155	None	replace
616	[BUG]  [BUGGY]  double  value  =(double)Math.pow(10,  Math.abs(x));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(double)Math.pow(10,  Math.abs(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(double)Math.pow(10,  Math.abs(x));	  double    value    =(double)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	155	None	replace
617	[BUG]  [BUGGY]  long  mantissa  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  getLastChar()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getLastChar()  +  1;	  int    mantissa    =    getLastChar()    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
618	[BUG]  [BUGGY]  double  value  =  (double)x  &  0xFFFF;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  (double)x  &  0xFFFF;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  &  0xFFFF;	  int    value    =    (int)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	1	None	replace
619	[BUG]  [BUGGY]  char  value  =  (char)x  &  0xFFFF;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  (char)x  &  0xFFFF;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  (char)x  &  0xFFFF;	  int    value    =    (int)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	1	None	replace
620	[BUG]  [BUGGY]  char  value  =(int)x  &  0xFFFF;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(int)x  &  0xFFFF;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)x  &  0xFFFF;	  int    value    =    (int)x    &    0xFFFF;    	non-compiled	[CE]  ';'  expected	1	None	replace
621	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)/  2.0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)/  2.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)/  2.0);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  ';'  expected	236	None	replace
622	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  ';'  expected	236	None	replace
623	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0).doubleValue();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0).doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0).doubleValue();	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  ';'  expected	236	None	replace
624	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  y)/  2.0);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  y)/  2.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  y)/  2.0);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  ';'  expected	236	None	replace
625	[BUG]  [BUGGY]  double  value  =  Math.pow(11,  Math.pow(11,  x)/  2.0);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(11,  Math.pow(11,  x)/  2.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(11,  Math.pow(11,  x)/  2.0);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  ';'  expected	236	None	replace
626	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  3.0);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  3.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  3.0);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  ';'  expected	236	None	replace
627	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x)/  2.0);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    2.0);    	non-compiled	[CE]  ';'  expected	236	None	replace
628	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >>    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
629	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)-    1)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	188	None	replace
630	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)-    1)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	188	None	replace
631	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)-    1)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	188	None	replace
632	[BUG]  [BUGGY]  ((  long)x  +  1)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)-    1)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	188	None	replace
633	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(exp)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(exp)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(exp)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)-    1)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	188	None	replace
634	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(x)-  1)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x)-    1)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	188	None	replace
635	[BUG]  [BUGGY]  long  value  =(long)Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =(long)Math.pow(10,  x  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)Math.pow(10,  x  -  1);	  int    value    =(int)Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	162	None	replace
636	[BUG]  [BUGGY]  char  value  =(int)Math.pow(10,  x  -  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(int)Math.pow(10,  x  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)Math.pow(10,  x  -  1);	  int    value    =(int)Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	162	None	replace
637	[BUG]  [BUGGY]  int  value  =(int)Math.pow(10,  x  /  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =(int)Math.pow(10,  x  /  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =(int)Math.pow(10,  x  /  1);	  int    value    =(int)Math.pow(10,    x    -    1);    	non-compiled	[CE]  ';'  expected	162	None	replace
638	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  10  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  10  +  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    10);    	non-compiled	[CE]  ';'  expected	235	None	replace
639	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  3);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  3);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  3);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    10);    	non-compiled	[CE]  ';'  expected	235	None	replace
640	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  4);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  4);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  4);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    10);    	non-compiled	[CE]  ';'  expected	235	None	replace
641	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  8);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)/  8);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)/  8);	  double    value    =    Math.pow(10,    Math.pow(10,    x)/    10);    	non-compiled	[CE]  ';'  expected	235	None	replace
642	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)+  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)+  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)+  1;	  double    value    =    Math.pow(10,    x)+    1;    	non-compiled	[CE]  ';'  expected	248	None	replace
643	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  x)+  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  x)+  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  x)+  1;	  double    value    =    Math.pow(10,    x)+    1;    	non-compiled	[CE]  ';'  expected	248	None	replace
644	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  x)+  2;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  x)+  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  x)+  2;	  double    value    =    Math.pow(10,    x)+    1;    	non-compiled	[CE]  ';'  expected	248	None	replace
645	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev)+  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  prev)+  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev)+  1;	  double    value    =    Math.pow(10,    x)+    1;    	non-compiled	[CE]  ';'  expected	248	None	replace
646	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev)+  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev)+  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev)+  1;	  double    value    =    Math.pow(10,    x)+    1;    	non-compiled	[CE]  ';'  expected	248	None	replace
647	[BUG]  [BUGGY]  Double  value  =  Math.pow(10,  prev)+  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Double  value  =  Math.pow(10,  prev)+  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Double  value  =  Math.pow(10,  prev)+  1;	  double    value    =    Math.pow(10,    x)+    1;    	non-compiled	[CE]  ';'  expected	248	None	replace
648	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));	  add(Long.toString(x)+       "E   "    +    Integer.toString(exp));    	non-compiled	[CE]  ';'  expected	78	None	replace
649	[BUG]  [BUGGY]  double  value  =  getFirstChar().doubleValue()  -  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getFirstChar().doubleValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar().doubleValue()  -  1;	  double    value    =    getLastChar().doubleValue()    -    1;    	non-compiled	[CE]  ';'  expected	118	None	replace
650	[BUG]  [BUGGY]  long  mantissa  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  getLastChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getLastChar().doubleValue();	  long    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	19	None	replace
651	[BUG]  [BUGGY]  long  mantissa  =  getLastChar().longValue();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  getLastChar().longValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  getLastChar().longValue();	  long    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	19	None	replace
652	[BUG]  [BUGGY]  add(Long.toString(prev)+  Integer.toString(x));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+  Integer.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+  Integer.toString(x));	  add(Long.toString(x)+    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	77	None	replace
653	[BUG]  [BUGGY]  add(Integer.toString(x)+  Integer.toString(x));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Integer.toString(x)+  Integer.toString(x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Integer.toString(x)+  Integer.toString(x));	  add(Long.toString(x)+    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	77	None	replace
654	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(x  +  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Integer.toString(x  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Integer.toString(x  +  1));	  add(Long.toString(x)+    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	77	None	replace
655	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(prev));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Integer.toString(prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Integer.toString(prev));	  add(Long.toString(x)+    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	77	None	replace
656	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(x)  +  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Integer.toString(x)  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Integer.toString(x)  +  1);	  add(Long.toString(x)+    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	77	None	replace
657	[BUG]  [BUGGY]  add(Long.toString(x)+  Integer.toString(x  -  1));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  Integer.toString(x  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  Integer.toString(x  -  1));	  add(Long.toString(x)+    Integer.toString(x));    	non-compiled	[CE]  ';'  expected	77	None	replace
658	[BUG]  [BUGGY]  add(Long.toString(x)/  10);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  10);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
659	[BUG]  [BUGGY]  add(Long.toString(x)/  2);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  2);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
660	[BUG]  [BUGGY]  add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_SECOND);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_SECOND);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_SECOND);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
661	[BUG]  [BUGGY]  add(Long.toString(x)/  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  1);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
662	[BUG]  [BUGGY]  add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_MINUTE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_MINUTE);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_MINUTE);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
663	[BUG]  [BUGGY]  add(Long.toString(x)/  10  +  prev);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  10  +  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  10  +  prev);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
664	[BUG]  [BUGGY]  add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_DAY);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_DAY);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  DateTimeConstants.MILLIS_PER_DAY);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
665	[BUG]  [BUGGY]  add(Long.toString(x)/  100.0);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  100.0);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  100.0);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
666	[BUG]  [BUGGY]  add(Long.toString(x)/  128);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)/  128);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)/  128);	  add(Long.toString(x)/    prev);    	non-compiled	[CE]  ';'  expected	245	None	replace
667	[BUG]  [BUGGY]  double  value  =  (double)x  -  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  (double)x  -  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  -  1;	  int    value    =    (int)x    -    1;    	non-compiled	[CE]  ';'  expected	98	None	replace
668	[BUG]  [BUGGY]  char  value  =  (char)x  -  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  (char)x  -  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  (char)x  -  1;	  int    value    =    (int)x    -    1;    	non-compiled	[CE]  ';'  expected	98	None	replace
669	[BUG]  [BUGGY]  char  value  =(int)x  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(int)x  -  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(int)x  -  1;	  int    value    =    (int)x    -    1;    	non-compiled	[CE]  ';'  expected	98	None	replace
670	[BUG]  [BUGGY]  String  value  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  value  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  value  =  Math.pow(10,  Math.pow(10,  x));	  char    value    =    Math.pow(10,    Math.pow(10,    x));    	non-compiled	[CE]  ';'  expected	128	None	replace
671	[BUG]  [BUGGY]  if(Math.abs(x)  <  prev)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  prev)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  prev)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
672	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(prev))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
673	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	144	None	replace
674	[BUG]  [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ||  Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	||  Math.abs(x)  <=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
675	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
676	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  100)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  {  100)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
677	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000))  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000))  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000))  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
678	[BUG]  [BUGGY]  long  value  =  prev  /(long)x;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  prev  /(long)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  prev  /(long)x;	  long    value    =    x    /(long)x;    	non-compiled	[CE]  ';'  expected	170	None	replace
679	[BUG]  [BUGGY]  int  value  =  x  /(int)x;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  x  /(int)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  x  /(int)x;	  long    value    =    x    /(long)x;    	non-compiled	[CE]  ';'  expected	170	None	replace
680	[BUG]  [BUGGY]  double  value  =  x  /(double)x;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  x  /(double)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  x  /(double)x;	  long    value    =    x    /(long)x;    	non-compiled	[CE]  ';'  expected	170	None	replace
681	[BUG]  [BUGGY]  long  value  =  prev  *(long)x;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  prev  *(long)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  prev  *(long)x;	  long    value    =    x    /(long)x;    	non-compiled	[CE]  ';'  expected	170	None	replace
682	[BUG]  [BUGGY]  long  value  =  x  *(long)x;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  x  *(long)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  x  *(long)x;	  long    value    =    x    /(long)x;    	non-compiled	[CE]  ';'  expected	170	None	replace
683	[BUG]  [BUGGY]  long  value  =  x  /(double)x;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  x  /(double)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  x  /(double)x;	  long    value    =    x    /(long)x;    	non-compiled	[CE]  ';'  expected	170	None	replace
684	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  prev  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  prev  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  prev  +  1);	  mantissa    =    Math.pow(10,    exp    +    1);    	non-compiled	[CE]  ';'  expected	180	None	replace
685	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  x  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  x  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  x  +  1);	  mantissa    =    Math.pow(10,    exp    +    1);    	non-compiled	[CE]  ';'  expected	180	None	replace
686	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  exp  /  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  exp  /  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  exp  /  1);	  mantissa    =    Math.pow(10,    exp    +    1);    	non-compiled	[CE]  ';'  expected	180	None	replace
687	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  exp  +  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  exp  +  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  exp  +  2);	  mantissa    =    Math.pow(10,    exp    +    1);    	non-compiled	[CE]  ';'  expected	180	None	replace
688	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  value  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  value  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  value  +  1);	  mantissa    =    Math.pow(10,    exp    +    1);    	non-compiled	[CE]  ';'  expected	180	None	replace
689	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  exp  +  1  -  1);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  exp  +  1  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  exp  +  1  -  1);	  mantissa    =    Math.pow(10,    exp    +    1);    	non-compiled	[CE]  ';'  expected	180	None	replace
690	[BUG]  [BUGGY]  mantissa  =  Math.pow(10,  exp  *  1);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  =  Math.pow(10,  exp  *  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  =  Math.pow(10,  exp  *  1);	  mantissa    =    Math.pow(10,    exp    +    1);    	non-compiled	[CE]  ';'  expected	180	None	replace
691	[BUG]  [BUGGY]  int  value  =  (int)x  -  0xff;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  -  0xff;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  -  0xff;	  long    value    =    (long)x    -    0xff;    	non-compiled	[CE]  ';'  expected	122	None	replace
692	[BUG]  [BUGGY]  double  value  =  (double)x  -  0xff;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  (double)x  -  0xff;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  -  0xff;	  long    value    =    (long)x    -    0xff;    	non-compiled	[CE]  ';'  expected	122	None	replace
693	[BUG]  [BUGGY]  long  value  =  (int)x  -  0xff;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (int)x  -  0xff;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (int)x  -  0xff;	  long    value    =    (long)x    -    0xff;    	non-compiled	[CE]  ';'  expected	122	None	replace
694	[BUG]  [BUGGY]  long  value  =(long)x  -  100.0;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =(long)x  -  100.0;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =(long)x  -  100.0;	  long    value    =    (long)x    -    0xff;    	non-compiled	[CE]  ';'  expected	122	None	replace
695	[BUG]  [BUGGY]  ((  long)x  +  1)  ==  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  ==  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  ==  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
696	[BUG]  [BUGGY]  ((  long)x  +  1)  >=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  >=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  >=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
697	[BUG]  [BUGGY]  ((  long)x  +  1)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
698	[BUG]  [BUGGY]  ((  long)x  +  1)  ==  Math.pow(10,  exp  +  1)  >>  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  ==  Math.pow(10,  exp  +  1)  >>  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  ==  Math.pow(10,  exp  +  1)  >>  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
699	[BUG]  [BUGGY]  ((  long)x  +  1)!=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)!=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)!=  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
700	[BUG]  [BUGGY]  ((  long)x  +  1)  ==  Math.pow(10,  exp  +  1)  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  ==  Math.pow(10,  exp  +  1)  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  ==  Math.pow(10,  exp  +  1)  >=  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
701	[BUG]  [BUGGY]  ((  long)x  +  1)  <=  Math.pow(10,  exp  +  1))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  <=  Math.pow(10,  exp  +  1))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  <=  Math.pow(10,  exp  +  1))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
702	[BUG]  [BUGGY]  ((  long)x  +  1)  <  Math.pow(10,  exp  +  1))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  ((  long)x  +  1)  <  Math.pow(10,  exp  +  1))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	((  long)x  +  1)  <  Math.pow(10,  exp  +  1))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  ((    long)x    +    1)    <=    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
703	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  x)+  1);	  int    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	132	None	replace
704	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);	  int    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	132	None	replace
705	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)+  2);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  Math.pow(10,  x)+  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  Math.pow(10,  x)+  2);	  int    value    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	132	None	replace
706	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(exp))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(exp))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(exp))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(x))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
707	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)?  mantissa  /  10  :  10;  exp++;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)?  mantissa  /  10  :  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)?  mantissa  /  10  :  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    <    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	184	None	replace
708	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)?  mantissa  :  10;  exp++;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)?  mantissa  :  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  100)?  mantissa  :  10;  exp++;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    <    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	184	None	replace
709	[BUG]  [BUGGY]  t  value  =  getLastChar();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  t  value  =  getLastChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	t  value  =  getLastChar();	  int    value    =    getLastChar()    +    1;    	non-compiled	[CE]  ';'  expected	28	None	replace
710	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
711	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
712	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
713	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
714	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
715	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
716	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
717	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value  /=  10;  exp++;  }  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ')'  expected	242	None	replace
718	[BUG]  [BUGGY]  mantissa  /=  10;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	mantissa  /=  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    	non-compiled	[CE]  ';'  expected	197	None	replace
719	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  prev)  {  mantissa  /=  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    	non-compiled	[CE]  ';'  expected	197	None	replace
720	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  value)  {  mantissa  /=  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    	non-compiled	[CE]  ';'  expected	197	None	replace
721	[BUG]  [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa)  {  mantissa  /=  10;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa)  {  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(value  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa)  {  mantissa  /=  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    	non-compiled	[CE]  ';'  expected	197	None	replace
722	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value)  {  mantissa  /=  10;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value)  {  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  value)  {  mantissa  /=  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    	non-compiled	[CE]  ';'  expected	197	None	replace
723	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  prev)  {  mantissa  /=  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    	non-compiled	[CE]  ';'  expected	197	None	replace
724	[BUG]  [BUGGY]  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    	non-compiled	[CE]  ';'  expected	197	None	replace
725	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  *  100.0;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  *  100.0;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  *  100.0;	  double    value    =    getLastChar().doubleValue()    /    100.0;    	non-compiled	[CE]  ';'  expected	120	None	replace
726	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  +  100.0;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  +  100.0;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  +  100.0;	  double    value    =    getLastChar().doubleValue()    /    100.0;    	non-compiled	[CE]  ';'  expected	120	None	replace
727	[BUG]  [BUGGY]  double  value  =  getFirstChar().doubleValue()  /  100.0;  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getFirstChar().doubleValue()  /  100.0;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar().doubleValue()  /  100.0;	  double    value    =    getLastChar().doubleValue()    /    100.0;    	non-compiled	[CE]  ';'  expected	120	None	replace
728	[BUG]  [BUGGY]  long  value  =  getLastChar().doubleValue()  /  100.0;  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().doubleValue()  /  100.0;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().doubleValue()  /  100.0;	  double    value    =    getLastChar().doubleValue()    /    100.0;    	non-compiled	[CE]  ';'  expected	120	None	replace
729	[BUG]  [BUGGY]  Double  value  =  getLastChar().doubleValue()  *  100.0;  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Double  value  =  getLastChar().doubleValue()  *  100.0;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Double  value  =  getLastChar().doubleValue()  *  100.0;	  double    value    =    getLastChar().doubleValue()    /    100.0;    	non-compiled	[CE]  ';'  expected	120	None	replace
730	[BUG]  [BUGGY]  double  value  =  getLastChar().doubleValue()  /  20.0;  [CE]  ';'  expected  [FE]                                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar().doubleValue()  /  20.0;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar().doubleValue()  /  20.0;	  double    value    =    getLastChar().doubleValue()    /    100.0;    	non-compiled	[CE]  ';'  expected	120	None	replace
731	[BUG]  [BUGGY]  add(Long.toString(prev)+  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(prev)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(prev)+  1);	  add(Long.toString(x)+    1);    	non-compiled	[CE]  ';'  expected	75	None	replace
732	[BUG]  [BUGGY]  add(Long.toString(x)+  1,  prev);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  add(Long.toString(x)+  1,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	add(Long.toString(x)+  1,  prev);	  add(Long.toString(x)+    1);    	non-compiled	[CE]  ';'  expected	75	None	replace
733	[BUG]  [BUGGY]  String  value  =  (String)x;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  value  =  (String)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  value  =  (String)x;	  char    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	148	None	replace
734	[BUG]  [BUGGY]  char  value  =(x  <  '0'  ||  x  >  '9')?(x  +  1):  x;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(x  <  '0'  ||  x  >  '9')?(x  +  1):  x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(x  <  '0'  ||  x  >  '9')?(x  +  1):  x;	  char    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	148	None	replace
735	[BUG]  [BUGGY]  char  value  =(x  <  '0'  ||  x  >  '9')?  (int)x  :  x;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =(x  <  '0'  ||  x  >  '9')?  (int)x  :  x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =(x  <  '0'  ||  x  >  '9')?  (int)x  :  x;	  char    value    =    (int)x;    	non-compiled	[CE]  ';'  expected	148	None	replace
736	[BUG]  [BUGGY]  int  value  =  (int)x  +  3;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  +  3;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  +  3;	  long    value    =    (long)x    +    3;    	non-compiled	[CE]  ';'  expected	104	None	replace
737	[BUG]  [BUGGY]  double  value  =  (double)x  +  3;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  (double)x  +  3;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  +  3;	  long    value    =    (long)x    +    3;    	non-compiled	[CE]  ';'  expected	104	None	replace
738	[BUG]  [BUGGY]  Char  value  =(char)Math.pow(10,  x);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Char  value  =(char)Math.pow(10,  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Char  value  =(char)Math.pow(10,  x);	  char    value    =(int)Math.pow(10,    x);    	non-compiled	[CE]  ';'  expected	161	None	replace
739	[BUG]  [BUGGY]  String  value  =  Math.pow(10,  Math.pow(10,  prev));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  String  value  =  Math.pow(10,  Math.pow(10,  prev));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	String  value  =  Math.pow(10,  Math.pow(10,  prev));	  char    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	41	None	replace
740	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  prev  +  1));	  char    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	41	None	replace
741	[BUG]  [BUGGY]  Char  value  =  Math.pow(10,  Math.pow(10,  x));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Char  value  =  Math.pow(10,  Math.pow(10,  x));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Char  value  =  Math.pow(10,  Math.pow(10,  x));	  char    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	41	None	replace
742	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev),  x);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  Math.pow(10,  prev),  x);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  Math.pow(10,  prev),  x);	  char    value    =    Math.pow(10,    Math.pow(10,    prev));    	non-compiled	[CE]  ';'  expected	41	None	replace
743	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	14	None	replace
744	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1)+  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  1)+  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	14	None	replace
745	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  2));  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  2));  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  prev  -  2));	  int    mantissa    =    Math.pow(10,    Math.pow(10,    prev    -    1));    	non-compiled	[CE]  ';'  expected	14	None	replace
746	[BUG]  [BUGGY]  double  value  =  getFirstChar()  /  2;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getFirstChar()  /  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getFirstChar()  /  2;	  double    value    =    getLastChar()    /    2;    	non-compiled	[CE]  ';'  expected	153	None	replace
747	[BUG]  [BUGGY]  double  value  =  getLastChar()  /  2  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar()  /  2  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar()  /  2  +  1;	  double    value    =    getLastChar()    /    2;    	non-compiled	[CE]  ';'  expected	153	None	replace
748	[BUG]  [BUGGY]  double  value  =  getLastChar()  *  2;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getLastChar()  *  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getLastChar()  *  2;	  double    value    =    getLastChar()    /    2;    	non-compiled	[CE]  ';'  expected	153	None	replace
749	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  2  +  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  2  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  2  +  1);	  double    value    =    Math.pow(10,    prev    -    2);    	non-compiled	[CE]  ';'  expected	54	None	replace
750	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev  -  2  -  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev  -  2  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev  -  2  -  1);	  double    value    =    Math.pow(10,    prev    -    2);    	non-compiled	[CE]  ';'  expected	54	None	replace
751	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  prev  -  2);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  prev  -  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  prev  -  2);	  double    value    =    Math.pow(10,    prev    -    2);    	non-compiled	[CE]  ';'  expected	54	None	replace
752	[BUG]  [BUGGY]  Integer  value  =  getNumberValue();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getNumberValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getNumberValue();	  Integer    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	113	None	replace
753	[BUG]  [BUGGY]  Integer  value  =  getLongValue()  -  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLongValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLongValue()  -  1;	  Integer    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	113	None	replace
754	[BUG]  [BUGGY]  Integer  value  =  getIntValue();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getIntValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getIntValue();	  Integer    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	113	None	replace
755	[BUG]  [BUGGY]  Integer  value  =  getLongValue()  +  1;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getLongValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getLongValue()  +  1;	  Integer    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	113	None	replace
756	[BUG]  [BUGGY]  Integer  value  =  getUpperBound();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getUpperBound();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getUpperBound();	  Integer    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	113	None	replace
757	[BUG]  [BUGGY]  Integer  value  =  getBigIntegerValue();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getBigIntegerValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getBigIntegerValue();	  Integer    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	113	None	replace
758	[BUG]  [BUGGY]  Integer  value  =  getDecimalValue();  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  value  =  getDecimalValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  value  =  getDecimalValue();	  Integer    value    =    getLongValue();    	non-compiled	[CE]  ';'  expected	113	None	replace
759	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  2;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)/  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  2;	  double    value    =    Math.pow(10,    prev)/    10;    	non-compiled	[CE]  ';'  expected	52	None	replace
760	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  10  +  1;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)/  10  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  10  +  1;	  double    value    =    Math.pow(10,    prev)/    10;    	non-compiled	[CE]  ';'  expected	52	None	replace
761	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  4;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)/  4;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  4;	  double    value    =    Math.pow(10,    prev)/    10;    	non-compiled	[CE]  ';'  expected	52	None	replace
762	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  8;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)/  8;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  8;	  double    value    =    Math.pow(10,    prev)/    10;    	non-compiled	[CE]  ';'  expected	52	None	replace
763	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  3;  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)/  3;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  3;	  double    value    =    Math.pow(10,    prev)/    10;    	non-compiled	[CE]  ';'  expected	52	None	replace
764	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  prev)/  12;  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  prev)/  12;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  prev)/  12;	  double    value    =    Math.pow(10,    prev)/    10;    	non-compiled	[CE]  ';'  expected	52	None	replace
765	[BUG]  [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
766	[BUG]  [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(value)  <  Math.abs(x))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
767	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
768	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    Math.abs(value))    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
769	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)/  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)/  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x)/  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
770	[BUG]  [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
771	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x  +  1)+  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
772	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  2);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  2);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
773	[BUG]  [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  mantissa  =  Math.pow(10,  Math.pow(10,  x)+  1);	  int    mantissa    =    Math.pow(10,    Math.pow(10,    x)+    1);    	non-compiled	[CE]  ';'  expected	138	None	replace
774	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  /  10);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x  /  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  /  10);	  int    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	39	None	replace
775	[BUG]  [BUGGY]  char  value  =  Math.pow(10,  x  *  10);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  Math.pow(10,  x  *  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  Math.pow(10,  x  *  10);	  int    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	39	None	replace
776	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  prev  /  10);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  prev  /  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  prev  /  10);	  int    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	39	None	replace
777	[BUG]  [BUGGY]  int  value  =  Math.pow(10,  x  *  10  +  1);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  Math.pow(10,  x  *  10  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  Math.pow(10,  x  *  10  +  1);	  int    value    =    Math.pow(10,    x    *    10);    	non-compiled	[CE]  ';'  expected	39	None	replace
778	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)-  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)-  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x  +  1)-  1);	  double    value    =    Math.pow(10,    Math.pow(10,    x)-    1);    	non-compiled	[CE]  ';'  expected	164	None	replace
779	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)-  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  x)-  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  x)-  2);	  double    value    =    Math.pow(10,    Math.pow(10,    x)-    1);    	non-compiled	[CE]  ';'  expected	164	None	replace
780	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  +  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  +  1);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE);    	non-compiled	[CE]  ';'  expected	205	None	replace
781	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  /  10);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  /  10);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  /  10);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE);    	non-compiled	[CE]  ';'  expected	205	None	replace
782	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  -  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  -  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  -  1);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE);    	non-compiled	[CE]  ';'  expected	205	None	replace
783	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE)+  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE)+  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE)+  1;	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE);    	non-compiled	[CE]  ';'  expected	205	None	replace
784	[BUG]  [BUGGY]  long  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE);    	non-compiled	[CE]  ';'  expected	205	None	replace
785	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE,  prev);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE,  prev);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE,  prev);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE);    	non-compiled	[CE]  ';'  expected	205	None	replace
786	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  /  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  /  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Predicate.DEFAULT_VALUE  /  2);	  double    value    =    Math.pow(10,    Predicate.DEFAULT_VALUE);    	non-compiled	[CE]  ';'  expected	205	None	replace
787	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  100)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
788	[BUG]  [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1))  <=  100)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  (mantissa  /  10  *  Math.pow(10,  exp  +  1))  <=  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	(mantissa  /  10  *  Math.pow(10,  exp  +  1))  <=  100)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	5	None	replace
789	[BUG]  [BUGGY]  int  mantissa  =  Math.pow(10,  exp  +  1)/  10;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  mantissa  =  Math.pow(10,  exp  +  1)/  10;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  mantissa  =  Math.pow(10,  exp  +  1)/  10;	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    100)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
790	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  exp++;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  1000)  {  exp++;  }	  if(Math.abs(x)    <    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
791	[BUG]  [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  1000)  {  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  100)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <    1000)    {    while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
792	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  exp++;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  <  1000)  {  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    exp++;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
793	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)!=  1000)  {  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    exp++;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
794	[BUG]  [BUGGY]  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    exp++;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
795	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  exp++;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >>  1000)  {  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    exp++;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
796	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  exp++;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)  >=  100)  {  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    exp++;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
797	[BUG]  [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)>  1000)  {  exp++;  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  /  10  *  Math.pow(10,  exp  +  1)>  1000)  {  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  /  10  *  Math.pow(10,  exp  +  1)>  1000)  {  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    exp++;    }    	non-compiled	[CE]  ';'  expected	63	None	replace
798	[BUG]  [BUGGY]  Integer  mantissa  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getLastChar()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getLastChar()  +  1;	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
799	[BUG]  [BUGGY]  Integer  mantissa  =  getFirstChar();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getFirstChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getFirstChar();	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
800	[BUG]  [BUGGY]  Integer  mantissa  =  getLastInt();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getLastInt();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getLastInt();	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
801	[BUG]  [BUGGY]  Integer  mantissa  =  getFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getFirstChild();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getFirstChild();	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
802	[BUG]  [BUGGY]  Integer  mantissa  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getLastChar()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getLastChar()  -  1;	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
803	[BUG]  [BUGGY]  Integer  mantissa  =  getLastChar().intValue();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getLastChar().intValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getLastChar().intValue();	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
804	[BUG]  [BUGGY]  Integer  mantissa  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getLastChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getLastChar().doubleValue();	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
805	[BUG]  [BUGGY]  Integer  mantissa  =  getEndChar();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  Integer  mantissa  =  getEndChar();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	Integer  mantissa  =  getEndChar();	  Integer    mantissa    =    getLastChar();    	non-compiled	[CE]  ';'  expected	192	None	replace
806	[BUG]  [BUGGY]  long  value  =  getFirstChar().doubleValue();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getFirstChar().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getFirstChar().doubleValue();	  double    value    =    getFirstChar().doubleValue();    	non-compiled	[CE]  ';'  expected	117	None	replace
807	[BUG]  [BUGGY]  double  value  =  getSemiColon().doubleValue();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  getSemiColon().doubleValue();  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  getSemiColon().doubleValue();	  double    value    =    getFirstChar().doubleValue();    	non-compiled	[CE]  ';'  expected	117	None	replace
808	[BUG]  [BUGGY]  int  value  =  (int)x  +  10;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  int  value  =  (int)x  +  10;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	int  value  =  (int)x  +  10;	  long    value    =    (long)x    +    10;    	non-compiled	[CE]  ';'  expected	106	None	replace
809	[BUG]  [BUGGY]  long  value  =  (long)x  /  10;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  (long)x  /  10;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  (long)x  /  10;	  long    value    =    (long)x    +    10;    	non-compiled	[CE]  ';'  expected	106	None	replace
810	[BUG]  [BUGGY]  double  value  =  (double)x  +  1;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  (double)x  +  1;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  (double)x  +  1;	  double    value    =    (double)x;    	non-compiled	[CE]  ';'  expected	146	None	replace
811	[BUG]  [BUGGY]  double  value  =(int)x;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =(int)x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =(int)x;	  double    value    =    (double)x;    	non-compiled	[CE]  ';'  expected	146	None	replace
812	[BUG]  [BUGGY]  char  value  =  x;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  x;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  x;	  char    value    =    (char)x;    	non-compiled	[CE]  ';'  expected	147	None	replace
813	[BUG]  [BUGGY]  char  value  =  prev;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  char  value  =  prev;  [BUGGY]      long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	char  value  =  prev;	  char    value    =    (char)x;    	non-compiled	[CE]  ';'  expected	147	None	replace
814	[BUG]  [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(value  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(value  /  10  *  Math.pow(10,  exp  +  1)  ==  mantissa)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
815	[BUG]  [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  value)  {  mantissa  /=  10;  exp++;  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  bucket  /  10  *  Math.pow(10,  exp  +  1)  {  value)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	bucket  /  10  *  Math.pow(10,  exp  +  1)  {  value)  {  mantissa  /=  10;  exp++;  }	  while(mantissa    /    10    *    Math.pow(10,    exp    +    1)    ==    value)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  not  a  statement	83	None	replace
816	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(value))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    *    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
817	[BUG]  [BUGGY]  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    *    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
818	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(x))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    *    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
819	[BUG]  [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <=  Math.abs(value))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    *    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
820	[BUG]  [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(Math.abs(x)  <  Math.abs(prev))  {  while(mantissa  *  10  *  Math.pow(10,  exp  +  1)  >=  1000)  {  mantissa  /=  10;  exp++;  }	  if(Math.abs(x)    <=    Math.abs(x))    {    while(mantissa    *    10    *    Math.pow(10,    exp    +    1)    >=    1000)    {    mantissa    /=    10;    exp++;    }    	non-compiled	[CE]  ';'  expected	217	None	replace
821	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)+  2);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)+  2);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)+  2);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	60	None	replace
822	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev  +  1)+  1);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	60	None	replace
823	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)*  1);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)*  1);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)*  1);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	60	None	replace
824	[BUG]  [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)+  3);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  double  value  =  Math.pow(10,  Math.pow(10,  prev)+  3);  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	double  value  =  Math.pow(10,  Math.pow(10,  prev)+  3);	  double    value    =    Math.pow(10,    Math.pow(10,    prev)+    1);    	non-compiled	[CE]  ';'  expected	60	None	replace
825	[BUG]  [BUGGY]  long  value  =  getLastChar().doubleValue()  +  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().doubleValue()  +  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().doubleValue()  +  1;	  long    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	116	None	replace
826	[BUG]  [BUGGY]  long  value  =  getLastChar().doubleValue()  -  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().doubleValue()  -  1;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().doubleValue()  -  1;	  long    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	116	None	replace
827	[BUG]  [BUGGY]  long  value  =  getLastChar().doubleValue()  +  2;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().doubleValue()  +  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().doubleValue()  +  2;	  long    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	116	None	replace
828	[BUG]  [BUGGY]  long  value  =  getLastChar().doubleValue()  /  2;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  long  value  =  getLastChar().doubleValue()  /  2;  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	long  value  =  getLastChar().doubleValue()  /  2;	  long    value    =    getLastChar().doubleValue();    	non-compiled	[CE]  ';'  expected	116	None	replace
829	[BUG]  [BUGGY]  if(x  <  0  ||  prev  >  Long.MAX_VALUE)  {  add(Long.toString(prev));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0  ||  prev  >  Long.MAX_VALUE)  {  add(Long.toString(prev));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0  ||  prev  >  Long.MAX_VALUE)  {  add(Long.toString(prev));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  add(Long.toString(prev));    	non-compiled	[CE]  ';'  expected	175	None	replace
830	[BUG]  [BUGGY]  if(x  <  0  ||  prev  >  Long.MAX_VALUE)  {  add(Long.toString(prev));  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0  ||  prev  >  Long.MAX_VALUE)  {  add(Long.toString(prev));  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0  ||  prev  >  Long.MAX_VALUE)  {  add(Long.toString(prev));  }	  add(Long.toString(prev));    	non-compiled	[CE]  ';'  expected	175	None	replace
831	[BUG]  [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  add(Long.toString(prev));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      void  addNumber(double  x)  {    char  prev  =  getLastChar();  if  (x  <  0  &&  prev  ==  '-')  {  add(     "       ");  }  if  ((long)  x  ==  x)  {      [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  add(Long.toString(prev));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +       "E     "  +  Integer.toString(exp));  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	if(x  <  0  ||  prev  ==  '-')  {  add(Long.toString(prev));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  add(Long.toString(prev));    	non-compiled	[CE]  ';'  expected	175	None	replace
