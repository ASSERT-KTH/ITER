bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] append(op); [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { [BUGGY] append(op); [BUGGY] } [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20851441405707477	200	200	1	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { [BUGGY] [BUGGY] append(op); } [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20851441405707477	200	200	1	add	
3	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { append(op); [BUGGY] } [BUGGY]  [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20851441405707477	201	201	1	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { append(op); [BUGGY] [BUGGY] } [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20851441405707477	201	201	1	add	
5	[BUG] [BUGGY] char prev = getLastChar(); [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   [BUGGY] char prev = getLastChar(); [BUGGY] if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	236	236	1	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   [BUGGY] [BUGGY] char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	236	236	1	add	
7	[BUG] [BUGGY] if (x < 0 && prev == '-') { [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); [BUGGY] if (x < 0 && prev == '-') { [BUGGY] add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	237	237	1	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); [BUGGY] [BUGGY] if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	237	237	1	add	
9	[BUG] [BUGGY] if ((long) x == x) { [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } [BUGGY] if ((long) x == x) { [BUGGY] long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } [BUGGY] [BUGGY] if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	241	241	1	add	
11	[BUG] [BUGGY] long value = (long) x; [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { [BUGGY] long value = (long) x; [BUGGY] long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { [BUGGY] [BUGGY] long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	242	242	1	add	
13	[BUG] [BUGGY] long mantissa = value; [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; [BUGGY] long mantissa = value; [BUGGY] int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	243	243	1	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; [BUGGY] [BUGGY] long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	243	243	1	add	
15	[BUG] [BUGGY] int exp = 0; [FE] ComparisonFailure [CONTEXT]   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; [BUGGY] int exp = 0; [BUGGY] if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	244	244	1	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]   char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; [BUGGY] [BUGGY] int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	244	244	1	add	
17	[BUG] [BUGGY] if (Math.abs(x) >= 100) { [FE] ComparisonFailure [CONTEXT]  char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; [BUGGY] if (Math.abs(x) >= 100) { [BUGGY] while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	245	245	1	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  char prev = getLastChar(); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; [BUGGY] [BUGGY] if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	245	245	1	add	
19	[BUG] [BUGGY] if (exp > 2) { [FE] ComparisonFailure [CONTEXT] if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } [BUGGY] if (exp > 2) { [BUGGY] add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	251	251	1	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if ((long) x == x) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } [BUGGY] [BUGGY] if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	251	251	1	add	
21	[BUG] [BUGGY] add(Long.toString(value)); [FE] ComparisonFailure [CONTEXT] if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { [BUGGY] add(Long.toString(value)); [BUGGY] } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { [BUGGY] [BUGGY] add(Long.toString(value)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	254	254	1	add	
23	[BUG] [BUGGY] } else { [FE] ComparisonFailure [CONTEXT] while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } [BUGGY] } else { [BUGGY] add(String.valueOf(x)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	256	256	1	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } [BUGGY] [BUGGY] } else { add(String.valueOf(x)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure51/src/com/google/javascript/jscomp/CodeConsumer.java	0.20412414523193154	256	256	1	add	
