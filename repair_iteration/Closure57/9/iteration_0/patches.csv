bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
2	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals(qualifiedName))  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
4	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals(qualifiedName))  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
6	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	  	if  (target  !=  null)  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]    Node  target  =  callee.getNext();  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getNext();  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getNext();		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
9	[BUG]  [BUGGY]    Node  target  =  callee.getLastChild();  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getLastChild();  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getLastChild();		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
10	[BUG]  [BUGGY]    Node  target  =  callee.getFirstChild();  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]        AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getFirstChild();  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getFirstChild();		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
11	[BUG]  [BUGGY]    Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]          AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  target.getString();  }		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
12	[BUG]  [BUGGY]    Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]            AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
13	[BUG]  [BUGGY]    Name  target  =  callee.getFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Name  target  =  callee.getFirstChild();  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Name  target  =  callee.getFirstChild();		non-compiled	[CE]  cannot  find  symbol	18	None	add
14	[BUG]  [BUGGY]    Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
15	[BUG]  [BUGGY]    Node  target  =  callee.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                  AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
16	[BUG]  [BUGGY]    Node  target  =  callee.getNext();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  callee.getNext();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  callee.getNext();  if(target  ==  null)  {  className  =  target.getString();  }		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
17	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    parent.replaceChild(callee,  target);  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	    parent.replaceChild(callee,  target);		compilable	  [FE]  IllegalArgumentException  	18	1	add
18	[BUG]  [BUGGY]    parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]                      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    parent.replaceChild(callee,  target);  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    parent.replaceChild(callee,  target);		compilable	  [FE]  IllegalArgumentException  	18	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.STRING)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
20	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.STRING)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
21	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
22	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
23	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
24	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
25	[BUG]  [BUGGY]    Node  target  =  parent.getFirstChild();  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]            AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    Node  target  =  parent.getFirstChild();  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    Node  target  =  parent.getFirstChild();		non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	18	None	add
26	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
27	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]                AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
28	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
29	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
30	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
31	[BUG]  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]  if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	    if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }		non-compiled	[CE]  ';'  expected	18	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
33	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  ==  0)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
35	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  ==  0)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
37	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
39	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	if  (target  !=  null)  {  	compilable	  [FE]  AssertionFailedError  	17	1	replace
