bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  node);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  node);	  aughtExceptionHandler.handleMissingClassName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	410	None	replace
2	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  callee);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(target,  callee);	  aughtExceptionHandler.handleMissingClassName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	410	None	replace
3	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(node,  callee,  functionName);	  aughtExceptionHandler.handleMissingClassName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	410	None	replace
4	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(node,  callee,  qualifiedName);	  aughtExceptionHandler.handleMissingClassName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	410	None	replace
5	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(name,  callee);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(name,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(name,  callee);	  aughtExceptionHandler.handleMissingClassName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	410	None	replace
6	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	207	None	replace
7	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	207	None	replace
8	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	207	None	replace
9	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	207	None	replace
10	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	207	None	replace
11	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	207	None	replace
12	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	333	None	replace
13	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	333	None	replace
14	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	333	None	replace
15	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	333	None	replace
16	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	333	None	replace
17	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	333	None	replace
18	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	333	None	replace
19	[BUG]  [BUGGY]  parent.replaceChild(node,  new  Node(Token.GETPROP,  functionName));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  new  Node(Token.GETPROP,  functionName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  new  Node(Token.GETPROP,  functionName));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    functionName));    	non-compiled	[CE]  illegal  start  of  type	360	None	replace
20	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName),  target);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName),  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName),  target);	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    functionName));    	non-compiled	[CE]  illegal  start  of  type	360	None	replace
21	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName,  target));  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName,  target));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName,  target));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    functionName));    	non-compiled	[CE]  illegal  start  of  type	360	None	replace
22	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName,  qualifiedName));  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName,  qualifiedName));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    functionName));    	non-compiled	[CE]  illegal  start  of  type	360	None	replace
23	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  target));  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  target));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  target));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    functionName));    	non-compiled	[CE]  illegal  start  of  type	360	None	replace
24	[BUG]  [BUGGY]  parent.replaceChild(target,  new  Node(Token.GETPROP,  functionName));  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  new  Node(Token.GETPROP,  functionName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  new  Node(Token.GETPROP,  functionName));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    functionName));    	non-compiled	[CE]  illegal  start  of  type	360	None	replace
25	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  className));  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  className));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  className));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    functionName));    	non-compiled	[CE]  illegal  start  of  type	360	None	replace
26	[BUG]  [BUGGY]  Name  target  =  callEe.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callEe.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callEe.getLastChild();	  Name    target    =    callEe.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
27	[BUG]  [BUGGY]  Name  target  =  callee.getLocalName();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getLocalName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getLocalName();	  Name    target    =    callEe.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
28	[BUG]  [BUGGY]  Name  target  =  callee.getType();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getType();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getType();	  Name    target    =    callEe.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
29	[BUG]  [BUGGY]  Name  target  =  callee.getString();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getString();	  Name    target    =    callEe.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
30	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild(),  qualifiedName;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getFirstChild(),  qualifiedName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild(),  qualifiedName;	  Name    target    =    callEe.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
31	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
32	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	224	None	replace
33	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
34	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(className))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(className))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(className))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
35	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(name))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(name))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(name))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
36	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "prototype "))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "prototype "))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "prototype "))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
37	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target    >=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
38	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target    >=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
39	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target    >=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
40	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target    >=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
41	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target    >=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	64	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  <=  0)  {	  if(target!=    null    &&    target.getString().length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	154	1	replace
43	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  <=  0)  {	  if(target!=    null    &&    target.getString().length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	154	1	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().length()  <  0)  {	  if(target!=    null    &&    target.getString().length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	154	1	replace
45	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().length()  <  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().length()  <  0)  {	  if(target!=    null    &&    target.getString().length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	154	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()!=  0)  {	  if(target!=    null    &&    target.getString().length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	154	1	replace
47	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()!=  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()!=  0)  {	  if(target!=    null    &&    target.getString().length()    <    0)    {    	compilable	  [FE]  AssertionFailedError  	154	1	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()!=  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=    null    &&    target.getType()    >>    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
49	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()!=  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=    null    &&    target.getType()    >>    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=    null    &&    target.getType()    >>    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
51	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=    null    &&    target.getType()    >>    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
53	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
55	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
56	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  NullPointerException  	242	1	replace
57	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(target.getString()))  {  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  NullPointerException  	242	1	replace
58	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(target.getString()))  {  [CE]  cannot  find  symbol  name  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  name	242	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
60	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
62	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	242	1	replace
63	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getNext();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getNext();	  Class    <?>    target    =    callee.getClass();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
64	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getParent();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getParent();	  Class    <?>    target    =    callee.getClass();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
65	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP);	  Class    <?>    target    =    callee.getClass();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
66	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP,  qualifiedName);	  Class    <?>    target    =    callee.getClass();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
67	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP,  functionName);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getProp(Node.SOURCENAME_PROP,  functionName);	  Class    <?>    target    =    callee.getClass();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
68	[BUG]  [BUGGY]  Node  target  =  node.getChildren();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getChildren();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getChildren();	  Node    target    =    callee.getChildren();    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
69	[BUG]  [BUGGY]  Node  target  =  callee.getChildren()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getChildren()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getChildren()  -  1;	  Node    target    =    callee.getChildren();    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
70	[BUG]  [BUGGY]  Node  target  =  parent.getChildren();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  parent.getChildren();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getChildren();	  Node    target    =    callee.getChildren();    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
71	[BUG]  [BUGGY]  Node  target  =  callee.getChildren(),  functionName;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getChildren(),  functionName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getChildren(),  functionName;	  Node    target    =    callee.getChildren();    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
72	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  node  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	290	1	replace
73	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  node  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	290	1	replace
74	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	290	1	replace
75	[BUG]  [BUGGY]  if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	290	1	replace
76	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  target  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  target  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	290	1	replace
77	[BUG]  [BUGGY]  if(target!=  target  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  target  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  target  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	290	1	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  parent  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  parent  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	290	1	replace
79	[BUG]  [BUGGY]  if(target!=  parent  ||  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  parent  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  parent  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	290	1	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  node  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  node  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	290	1	replace
81	[BUG]  [BUGGY]  if(target  ==  node  &&  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  node  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  node  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	290	1	replace
82	[BUG]  [BUGGY]  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	className  =  target.getString();	  Class    <?>    target    =    target.getClass();    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
83	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }	  Class    <?>    target    =    target.getClass();    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
84	[BUG]  [BUGGY]  Class  <?>  target  =  parent.getClass();  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  parent.getClass();  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  parent.getClass();  className  =  target.getString();	  Class    <?>    target    =    target.getClass();    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
85	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }	  Class    <?>    target    =    target.getClass();    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
86	[BUG]  [BUGGY]  Class  <?>  target  =  node.getClass();  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  node.getClass();  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  node.getClass();  className  =  target.getString();	  Class    <?>    target    =    target.getClass();    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
87	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?>    target    =    target.getClass();    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
88	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  className  =  target.getString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?>    target    =    target.getClass();    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
89	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target    >=    null    &&    target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
90	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	205	None	replace
91	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	205	None	replace
92	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
93	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	205	None	replace
94	[BUG]  [BUGGY]  Node  target  =  callEe.getLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callEe.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callEe.getLastChild();	  Node    target    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
95	[BUG]  [BUGGY]  Node  target  =  call.getLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  call.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  call.getLastChild();	  Node    target    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
96	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	257	None	replace
97	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	257	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	388	1	replace
99	[BUG]  [BUGGY]  if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	388	1	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	388	1	replace
101	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	388	1	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  parent.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	388	1	replace
103	[BUG]  [BUGGY]  if(target!=  null  ||  parent.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  parent.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	388	1	replace
104	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	221	None	replace
105	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
106	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	221	None	replace
107	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
108	[BUG]  [BUGGY]  Node  target  =  parent.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  parent.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getParent();  if(target!=  null)  {  className  =  target.getString();  }	  Node    target    =    callee.getParent();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
109	[BUG]  [BUGGY]  Node  target  =  node.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getParent();  if(target!=  null)  {  className  =  target.getString();  }	  Node    target    =    callee.getParent();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
110	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target);	  aughtExceptionHandler.handleMissingName(qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	373	None	replace
111	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(target,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target,  qualifiedName);	  aughtExceptionHandler.handleMissingName(qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	373	None	replace
112	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  qualifiedName);	  aughtExceptionHandler.handleMissingName(qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	373	None	replace
113	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(className);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(className);	  aughtExceptionHandler.handleMissingName(qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	373	None	replace
114	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee);	  aughtExceptionHandler.handleMissingName(qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	373	None	replace
115	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(name);	  aughtExceptionHandler.handleMissingName(qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	373	None	replace
116	[BUG]  [BUGGY]  If(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=    null    &&    target.getString().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	190	None	replace
117	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=    null    &&    target.getString().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	190	None	replace
118	[BUG]  [BUGGY]  If(target!=  null  &&  target.getString().length()  >  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  &&  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=    null    &&    target.getString().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	190	None	replace
119	[BUG]  [BUGGY]  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=    null    &&    target.getString().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	190	None	replace
120	[BUG]  [BUGGY]  If(target!=  null  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=    null    &&    target.getString().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	190	None	replace
121	[BUG]  [BUGGY]  If(target  ==  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target  ==  null  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=    null    &&    target.getString().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	190	None	replace
122	[BUG]  [BUGGY]  If(target!=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  &&  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=    null    &&    target.getString().length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	190	None	replace
123	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
124	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
125	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    If(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
126	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
127	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  >=  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
128	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
129	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  >>  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	169	None	add
130	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    qualifiedName.equals(target.getString()))    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ')'  expected	169	None	add
131	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	299	None	replace
132	[BUG]  [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	299	None	replace
133	[BUG]  [BUGGY]  parent.replaceChild(node,  callee);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	299	None	replace
134	[BUG]  [BUGGY]  node.replaceChild(parent,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  node.replaceChild(parent,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	node.replaceChild(parent,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	299	None	replace
135	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  callee);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.replaceChild(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.replaceChild(parent,  callee);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	299	None	replace
136	[BUG]  [BUGGY]  parent.replaceChild(parent,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(parent,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(parent,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	299	None	replace
137	[BUG]  [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.replaceChild(parent,  target);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.replaceChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target);  NodeUtil.replaceChild(parent,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	299	None	replace
138	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  qualifiedName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  qualifiedName);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
139	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target,  callee.getString(),  functionName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(target,  callee.getString(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target,  callee.getString(),  functionName);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
140	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee.getString(),  qualifiedName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee.getString(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(node,  callee.getString(),  qualifiedName);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
141	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node.getString(),  qualifiedName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node.getString(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  node.getString(),  qualifiedName);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
142	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  callee.getString(),  functionName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(name,  callee.getString(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(name,  callee.getString(),  functionName);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
143	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  functionName);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  functionName);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
144	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node.getString(),  functionName);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node.getString(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  node.getString(),  functionName);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
145	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  className);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  callee.getString(),  className);	  aughtExceptionHandler.handleMissingName(node,    callee.getString(),    functionName);    	non-compiled	[CE]  illegal  start  of  type	435	None	replace
146	[BUG]  [BUGGY]  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
147	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
148	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
149	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  }  else  {  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  }  else  {  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  }  else  {  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
150	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
151	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	80	None	replace
152	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  }	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
153	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Class  <?>  target  =  calle  [CE]  ';'  expected  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Class  <?>  target  =  calle  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  }  else  {  Class  <?>  target  =  calle	          parent.replaceChild(callee,    target);    Node    parent    =    callee.getParent();    parent.replaceChild(callee,    target);    	non-compiled	[CE]  ';'  expected	80	None	replace
154	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	320	None	replace
155	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	320	None	replace
156	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  >=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  >=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  >=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	320	None	replace
157	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	456	None	replace
158	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	456	None	replace
159	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  qualifiedName)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  qualifiedName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  qualifiedName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	456	None	replace
160	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	456	None	replace
161	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	456	None	replace
162	[BUG]  [BUGGY]  Node  target  =  callee.nextChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.nextChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.nextChild();	  Node    target    =    callee.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
163	[BUG]  [BUGGY]  Node  target  =  callee.next(),  functionName;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.next(),  functionName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.next(),  functionName;	  Node    target    =    callee.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
164	[BUG]  [BUGGY]  Node  target  =  callee.next()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.next()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.next()  -  1;	  Node    target    =    callee.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
165	[BUG]  [BUGGY]  Node  target  =  callee.next(),  functionName);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.next(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.next(),  functionName);	  Node    target    =    callee.next();    	non-compiled	[CE]  	40	None	replace
166	[BUG]  [BUGGY]  Node  target  =  node.next();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.next();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.next();	  Node    target    =    callee.next();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
167	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
168	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
169	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
170	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
171	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
172	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  >=  Token.GETPROP)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  >=  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
173	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
174	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
175	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  call.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  call.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    callee.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  call.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	307	None	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(qualifiedName))  {	  if(target    ==    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	312	1	replace
177	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(qualifiedName))  {	  if(target    ==    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	312	1	replace
178	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext();  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  className  =  target.getString();	  Node    target    =    node.getNext();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	276	None	replace
179	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
180	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
181	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  callee.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
182	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  If(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  If(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    If(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
183	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
184	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  callee.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
185	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  callee.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
186	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	52	None	add
187	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
188	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
189	[BUG]  [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
190	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
191	[BUG]  [BUGGY]  NodeUtil.removeChild(callee,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(callee,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
192	[BUG]  [BUGGY]  Name  target  =  caller.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  caller.getFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  caller.getFirstChild();	  Name    target    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	254	1	replace
194	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	254	1	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(callee!=  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	254	1	replace
196	[BUG]  [BUGGY]  if(callee!=  null  &&  callee.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	254	1	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	254	1	replace
198	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target    [Delete]    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	254	1	replace
199	[BUG]  [BUGGY]  Node  target  =  callee.getPrevious();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getPrevious();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getPrevious();	  Node    target    =    callee.getParent();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
200	[BUG]  [BUGGY]  Node  target  =  node.getParent();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getParent();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getParent();	  Node    target    =    callee.getParent();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
201	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
202	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
203	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
204	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
205	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
206	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
207	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	non-compiled	[CE]  ';'  expected	81	None	add
208	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  ';'  expected	81	None	add
209	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
210	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
211	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
212	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
213	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
214	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  }  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
215	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
216	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
217	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
218	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	81	1	add
219	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	382	None	add
220	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	382	None	add
221	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	382	None	add
222	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	382	None	add
223	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	382	None	add
224	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	382	None	add
225	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	382	None	add
226	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [CE]  ')'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getString().equals(qualifiedName))    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ')'  expected	382	None	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
228	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
230	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
232	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
234	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
236	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
238	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	238	1	replace
239	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=    null    ||    target.getType()    >=    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
240	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=    null    ||    target.getType()    >=    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
241	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=    null    ||    target.getType()    >=    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
242	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=    null    ||    target.getType()    >=    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
243	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=    null    ||    target.getType()    >=    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	65	None	replace
244	[BUG]  [BUGGY]  Node  target  =  callee.getParent()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getParent()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getParent()  -  1;	  Node    target    =    callee.getNext()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
245	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild().getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getFirstChild().getNext()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild().getNext()  -  1;	  Node    target    =    callee.getNext()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
246	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getLastChild()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild()  -  1;	  Node    target    =    callee.getNext()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
247	[BUG]  [BUGGY]  Node  target  =  node.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getNext()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext()  -  1;	  Node    target    =    callee.getNext()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
248	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild()  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getFirstChild()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild()  -  1;	  Node    target    =    callee.getNext()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
249	[BUG]  [BUGGY]  Node  target  =  parent.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  parent.getNext()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext()  -  1;	  Node    target    =    callee.getNext()    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
250	[BUG]  [BUGGY]  Name  target  =  callee,  parent.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee,  parent.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee,  parent.getLastChild();	  Name    target    =    callee,    parent.getFirstChild();    	non-compiled	[CE]  	430	None	replace
251	[BUG]  [BUGGY]  Name  target  =  parent,  callee.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  parent,  callee.getFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  parent,  callee.getFirstChild();	  Name    target    =    callee,    parent.getFirstChild();    	non-compiled	[CE]  	430	None	replace
252	[BUG]  [BUGGY]  Name  target  =  callee,  node.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee,  node.getFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee,  node.getFirstChild();	  Name    target    =    callee,    parent.getFirstChild();    	non-compiled	[CE]  	430	None	replace
253	[BUG]  [BUGGY]  Name  target  =  node,  parent.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  node,  parent.getFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  node,  parent.getFirstChild();	  Name    target    =    callee,    parent.getFirstChild();    	non-compiled	[CE]  	430	None	replace
254	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	451	None	add
255	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	451	None	add
256	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    If(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	451	None	add
257	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	451	None	add
258	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >=  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	451	None	add
259	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	451	None	add
260	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >>  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	451	None	add
261	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ')'  expected	451	None	add
262	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  target,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  target,  qualifiedName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	407	None	replace
263	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  callee,  functionName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	407	None	replace
264	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  node,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  node,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  node,  qualifiedName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	407	None	replace
265	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(target,  callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(target,  callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(target,  callee,  qualifiedName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	407	None	replace
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  >=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  >=  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=    null    &&    target.getType()    >=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
267	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  >=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  >=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  >=  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=    null    &&    target.getType()    >=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	326	1	replace
269	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	326	1	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	326	1	replace
271	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	326	1	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	326	1	replace
273	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	326	1	replace
274	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
275	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
276	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
277	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
278	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
279	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.CALL)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
280	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
281	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	384	None	add
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	150	1	replace
283	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().length()  >  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	150	1	replace
284	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  [Delete]  0)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  [Delete]  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  [Delete]  0)  {	  if(target!=    null    &&    target.getString().length()    >    0)    {    	non-compiled	[CE]  ')'  expected	150	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	150	1	replace
286	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  >  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    >    0)    {    	compilable	  [FE]  AssertionFailedError  	150	1	replace
287	[BUG]  [BUGGY]  Node  target  =  callEe.getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callEe.getNext();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callEe.getNext();	  Node    target    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	297	None	replace
288	[BUG]  [BUGGY]  Node  target  =  call.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  call.getNext();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  call.getNext();	  Node    target    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	297	None	replace
289	[BUG]  [BUGGY]  Node  target  =  calledee.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  calledee.getNext();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  calledee.getNext();	  Node    target    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	297	None	replace
290	[BUG]  [BUGGY]  Node  target  =  callNode.getNext();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callNode.getNext();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callNode.getNext();	  Node    target    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	297	None	replace
291	[BUG]  [BUGGY]  Node  target  =  caller.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  caller.getNext();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  caller.getNext();	  Node    target    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	297	None	replace
292	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
293	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
294	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
295	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
296	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(node,  callee);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(node,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(node,  callee);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
297	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
298	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
299	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  callee);  parent.removeChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(target,  callee);  parent.removeChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  callee);  parent.removeChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	417	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()!=  Token.STRING)  {	  if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
301	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()!=  Token.STRING)  {	  if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()!=  Token.STRING)  {	  if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
303	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()!=  Token.STRING)  {	  if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
304	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()!=  Token.STRING)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  >=  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()!=  Token.STRING)  {	  if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	75	None	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	198	1	replace
306	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	198	1	replace
307	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	198	None	replace
308	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null    ||    className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	139	None	replace
309	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null    ||    className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	139	None	replace
310	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(className!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(className!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(className!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null    ||    className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	139	None	replace
311	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null  &&  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null  &&  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target!=  null  &&  className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null    ||    className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
312	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getParentClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getParentClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getParentClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null    ||    className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
313	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(className!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(className!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(className!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null    ||    className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	139	None	replace
314	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getParent();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getParent();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getParent();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null    ||    className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
316	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
317	[BUG]  [BUGGY]  Node  target  =  callee.getParent(),  functionName);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getParent(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getParent(),  functionName);	  Node    target    =    callee.getNext(),    functionName);    	non-compiled	[CE]  	46	None	replace
318	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild(),  functionName);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getFirstChild(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild(),  functionName);	  Node    target    =    callee.getNext(),    functionName);    	non-compiled	[CE]  	46	None	replace
319	[BUG]  [BUGGY]  Node  target  =  callee.getNext(),  className);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext(),  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext(),  className);	  Node    target    =    callee.getNext(),    functionName);    	non-compiled	[CE]  	46	None	replace
320	[BUG]  [BUGGY]  Node  target  =  callee.getNext(),  name);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext(),  name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext(),  name);	  Node    target    =    callee.getNext(),    functionName);    	non-compiled	[CE]  	46	None	replace
321	[BUG]  [BUGGY]  Node  target  =  callee.getPrevious(),  functionName);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getPrevious(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getPrevious(),  functionName);	  Node    target    =    callee.getNext(),    functionName);    	non-compiled	[CE]  	46	None	replace
322	[BUG]  [BUGGY]  Node  target  =  callee.getNext(),  functionName,  qualifiedName);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext(),  functionName,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext(),  functionName,  qualifiedName);	  Node    target    =    callee.getNext(),    functionName);    	non-compiled	[CE]  	46	None	replace
323	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
324	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
325	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  null  ||  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
326	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  If(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  If(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    If(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
327	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  null  ||  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
328	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
329	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  null  ||  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
330	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
331	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	366	None	replace
332	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	366	None	replace
333	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	366	None	replace
334	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	366	None	replace
335	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	366	None	replace
336	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	366	None	replace
337	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	366	None	replace
338	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target!=  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	147	None	add
339	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target!=  null  &&  target.getString().length()  >>  0)  {	  	non-compiled	[CE]  ';'  expected	147	None	add
340	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	147	None	add
341	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target  ==  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	147	None	add
342	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  [Delete]  0)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  [Delete]  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target!=  null  &&  target.getString().length()  [Delete]  0)  {	  	non-compiled	[CE]  ')'  expected	147	None	add
343	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target  >=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target  >=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target  >=  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	147	None	add
344	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  If(target!=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  If(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    If(target!=  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	147	None	add
345	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  [BUGGY]  0)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target!=  null  &&  target.getString().length()  [BUGGY]  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target!=  null  &&  target.getString().length()  [BUGGY]  0)  {	  	non-compiled	[CE]  ')'  expected	147	None	add
346	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target  >>  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  if(target  >>  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >=    0)    {    if(target  >>  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	147	None	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	240	1	replace
348	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	240	1	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	240	1	replace
350	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	240	1	replace
351	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  sourceName.equals(target.getString()))  {  [CE]  cannot  find  symbol  sourceName  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  sourceName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  sourceName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    functionName.equals(target.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  sourceName	240	None	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
353	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
355	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
357	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
359	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
360	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  NullPointerException  	284	1	replace
361	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  NullPointerException  	284	1	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
363	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
365	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	284	1	replace
366	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  NullPointerException  	284	1	replace
367	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EMPTY)  {  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  NullPointerException  	284	1	replace
368	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	352	None	replace
369	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	352	None	replace
370	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	352	None	replace
371	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	352	None	replace
372	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	352	None	replace
373	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	352	None	replace
374	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
375	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
376	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.STRING)    {    if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
377	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.STRING)    {    If(target  ==  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
378	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
379	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.STRING)    {    if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
380	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.STRING)    {    If(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	50	None	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
382	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
383	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  NullPointerException  	202	1	replace
384	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  NullPointerException  	202	1	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
386	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
388	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
390	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
392	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.BLOCK  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  AssertionFailedError  	202	1	replace
393	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	423	None	add
394	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	423	None	add
395	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	423	None	add
396	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	423	None	add
397	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	423	None	add
398	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	423	None	add
399	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	423	None	add
400	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
401	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
402	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
403	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
404	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
405	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
406	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
407	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.EXPR_RESULT)    {    if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  ';'  expected	283	None	add
408	[BUG]  [BUGGY]  if(target!=  null  &&  group.getType()  ==  Token.STRING)  {  [CE]  cannot  find  symbol  group  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  group.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  group.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    call.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  group	60	None	replace
409	[BUG]  [BUGGY]  if(target!=  null  &&  child.getType()  ==  Token.STRING)  {  [CE]  cannot  find  symbol  child  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  child.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  child.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    call.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  child	60	None	replace
410	[BUG]  [BUGGY]  if(target!=  null  &&  name.getType()  ==  Token.STRING)  {  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  name.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  name.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    call.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  name	60	None	replace
411	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target!=  null  &&  target.getString().equals(className))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target!=  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    if(target!=  null  &&  target.getString().equals(className))  {	  	non-compiled	[CE]  ';'  expected	274	None	add
412	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  ==  null  &&  target.getString().equals(className))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  ==  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    if(target  ==  null  &&  target.getString().equals(className))  {	  	non-compiled	[CE]  ';'  expected	274	None	add
413	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  If(target!=  null  &&  target.getString().equals(className))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  If(target!=  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    If(target!=  null  &&  target.getString().equals(className))  {	  	non-compiled	[CE]  ';'  expected	274	None	add
414	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  >=  null  &&  target.getString().equals(className))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  >=  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    if(target  >=  null  &&  target.getString().equals(className))  {	  	non-compiled	[CE]  ';'  expected	274	None	add
415	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  >>  null  &&  target.getString().equals(className))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  >>  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    if(target  >>  null  &&  target.getString().equals(className))  {	  	non-compiled	[CE]  ';'  expected	274	None	add
416	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target!=  null  &&  target.getString().equals(ClassName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target!=  null  &&  target.getString().equals(ClassName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    if(target!=  null  &&  target.getString().equals(ClassName))  {	  	non-compiled	[CE]  ';'  expected	274	None	add
417	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  [BUGGY]  null  &&  target.getString().equals(className))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  [BUGGY]  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    if(target  [BUGGY]  null  &&  target.getString().equals(className))  {	  	non-compiled	[CE]  ')'  expected	274	None	add
418	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  [Delete]  null  &&  target.getString().equals(className))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  if(target  [Delete]  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(className))    {    if(target  [Delete]  null  &&  target.getString().equals(className))  {	  	non-compiled	[CE]  ')'  expected	274	None	add
419	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	344	None	replace
420	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  parent.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  parent.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  parent.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	344	None	replace
421	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	344	None	replace
422	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getName().equals(qualifiedName))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getName().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getName().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
423	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getName().equals(functionName))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getName().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getName().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
424	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(target.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(target.getName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(target.getName()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
425	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
426	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
427	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  parent.getName().equals(qualifiedName))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  parent.getName().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  parent.getName().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
428	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  callee.getName().equals(qualifiedName))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  callee.getName().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  callee.getName().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
429	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getName().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol	450	None	replace
430	[BUG]  [BUGGY]  parent.replaceChild(node,  callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee,  qualifiedName);	  parent.replaceChild(callee,    target,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	215	None	replace
431	[BUG]  [BUGGY]  parent.replaceChild(target,  callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  callee,  qualifiedName);	  parent.replaceChild(callee,    target,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	215	None	replace
432	[BUG]  [BUGGY]  parent.replaceChild(node,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee,  functionName);	  parent.replaceChild(callee,    target,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	215	None	replace
433	[BUG]  [BUGGY]  parent.replaceChild(callee,  node,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  node,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  node,  qualifiedName);	  parent.replaceChild(callee,    target,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	215	None	replace
434	[BUG]  [BUGGY]  parent.replaceChild(node,  target,  functionName);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target,  functionName);	  parent.replaceChild(callee,    target,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	215	None	replace
435	[BUG]  [BUGGY]  parent.replaceChild(node,  callee,  target);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee,  target);	  parent.replaceChild(callee,    target,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	215	None	replace
436	[BUG]  [BUGGY]  parent.replaceChild(node,  target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target,  qualifiedName);	  parent.replaceChild(callee,    target,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	215	None	replace
437	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	94	None	replace
438	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( " "))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( " "))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( " "))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	94	None	replace
439	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
440	[BUG]  [BUGGY]  Node  target  =  callNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callNode.getFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callNode.getFirstChild();	  Node    target    =    nameNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	392	None	replace
441	[BUG]  [BUGGY]  Node  target  =  callNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callNode.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callNode.getLastChild();	  Node    target    =    nameNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	392	None	replace
442	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();	  Class    <?>    className    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	369	None	replace
443	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getLastChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getLastChild();	  Class    <?>    className    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	369	None	replace
444	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getNext();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getNext();	  Class    <?>    className    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	369	None	replace
445	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getType();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getType();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getType();	  Class    <?>    className    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	369	None	replace
446	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getSimpleName();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getSimpleName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getSimpleName();	  Class    <?>    className    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	369	None	replace
447	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getLocalName();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getLocalName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getLocalName();	  Class    <?>    className    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	369	None	replace
448	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
449	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
450	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
451	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
452	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
453	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
454	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
455	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ';'  expected	122	None	replace
456	[BUG]  [BUGGY]  Class  <?>  target  =  node.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  node.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  node.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
457	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	128	None	replace
458	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  target.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  target.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  target  =  target.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	128	None	replace
459	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target!=  null  &&  target.getString().length()  <  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target!=  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    if(target!=  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ';'  expected	153	None	add
460	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  ==  null  &&  target.getString().length()  <  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  ==  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    if(target  ==  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ';'  expected	153	None	add
461	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  >=  null  &&  target.getString().length()  <  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  >=  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    if(target  >=  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ';'  expected	153	None	add
462	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  If(target!=  null  &&  target.getString().length()  <  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  If(target!=  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    If(target!=  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ';'  expected	153	None	add
463	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  >>  null  &&  target.getString().length()  <  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  >>  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    if(target  >>  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ';'  expected	153	None	add
464	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  <  0)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    if(target  [BUGGY]  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ')'  expected	153	None	add
465	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  [Delete]  null  &&  target.getString().length()  <  0)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  [Delete]  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    if(target  [Delete]  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ')'  expected	153	None	add
466	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  [BUG]  null  &&  target.getString().length()  <  0)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  if(target  [BUG]  null  &&  target.getString().length()  <  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    <    0)    {    if(target  [BUG]  null  &&  target.getString().length()  <  0)  {	  	non-compiled	[CE]  ')'  expected	153	None	add
467	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	328	None	replace
468	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	328	None	replace
469	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	328	None	replace
470	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	328	None	replace
471	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	328	None	replace
472	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	328	None	replace
473	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
474	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
475	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	78	None	add
476	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
477	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
478	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  ';'  expected	78	None	add
479	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.removeChild(callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    parent.removeChild(callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
480	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.removeChild(callee);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.removeChild(callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    parent.removeChild(callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
481	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.removeChild(callee);  parent.removeChild(callee,  target);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.removeChild(callee);  parent.removeChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    parent.removeChild(callee);  parent.removeChild(callee,  target);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	78	None	add
482	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
483	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	78	1	add
484	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  call);  parent.replaceChild(callee,  target);  [CE]  cannot  find  symbol  call  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  call);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    parent.replaceChild(callee,  call);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  cannot  find  symbol  call	78	None	add
485	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target!=  node  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	350	None	add
486	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  node  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target  >=  node  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	350	None	add
487	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  node  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target  ==  node  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	350	None	add
488	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  node  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target  >>  node  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	350	None	add
489	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  If(target!=  node  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  If(target!=  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    If(target!=  node  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	350	None	add
490	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target!=  node  &&  target.getType()  >=  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target!=  node  &&  target.getType()  >=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target!=  node  &&  target.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	350	None	add
491	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  [Delete]  node  &&  target.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  [Delete]  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target  [Delete]  node  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ')'  expected	350	None	add
492	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  node  &&  target.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target  [BUGGY]  node  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ')'  expected	350	None	add
493	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target!=  node  &&  target.getType()  >>  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  if(target!=  node  &&  target.getType()  >>  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    &&    target.getType()    ==    Token.NAME)    {    if(target!=  node  &&  target.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	350	None	add
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	1	replace
495	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	1	replace
496	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    ||    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	164	None	replace
497	[BUG]  [BUGGY]  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    ||    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	164	None	replace
498	[BUG]  [BUGGY]  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    ||    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	164	None	replace
499	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  node  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	1	replace
500	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  node  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	164	1	replace
501	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  ';'  expected	31	None	replace
502	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  functionName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(target,  functionName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  functionName);	  NodeUtil.copyNameAnnotations(target,    parent);    	non-compiled	[CE]  illegal  start  of  type	399	None	replace
503	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  callee);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(target,  callee);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  callee);	  NodeUtil.copyNameAnnotations(target,    parent);    	non-compiled	[CE]  illegal  start  of  type	399	None	replace
504	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(target,  qualifiedName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  qualifiedName);	  NodeUtil.copyNameAnnotations(target,    parent);    	non-compiled	[CE]  illegal  start  of  type	399	None	replace
505	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  className);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(target,  className);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  className);	  NodeUtil.copyNameAnnotations(target,    parent);    	non-compiled	[CE]  illegal  start  of  type	399	None	replace
506	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(callee,  parent);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(callee,  parent);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(callee,  parent);	  NodeUtil.copyNameAnnotations(target,    parent);    	non-compiled	[CE]  illegal  start  of  type	399	None	replace
507	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  parent,  functionName);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(target,  parent,  functionName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  parent,  functionName);	  NodeUtil.copyNameAnnotations(target,    parent);    	non-compiled	[CE]  illegal  start  of  type	399	None	replace
508	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  target);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  target);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(name,  target);	  NodeUtil.copyNameAnnotations(target,    parent);    	non-compiled	[CE]  illegal  start  of  type	399	None	replace
509	[BUG]  [BUGGY]  Node  parent.replaceChild(callee,  target);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    Node    parent.replaceChild(callee,    target);    	non-compiled	[CE]  	85	None	replace
510	[BUG]  [BUGGY]  Node  parent  =  callee.replaceChild(parent,  target);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  =  callee.replaceChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.replaceChild(parent,  target);	          parent.replaceChild(callee,    target);    Node    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
511	[BUG]  [BUGGY]  node.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  node.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	node.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    Node    parent.replaceChild(callee,    target);    	non-compiled	[CE]  	85	None	replace
512	[BUG]  [BUGGY]  Node  parent  =  callee.replaceChild(node,  target);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  =  callee.replaceChild(node,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.replaceChild(node,  target);	          parent.replaceChild(callee,    target);    Node    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
513	[BUG]  [BUGGY]  Node  parent  =  callee.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  =  callee.removeFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.removeFirstChild();	          parent.replaceChild(callee,    target);    Node    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
514	[BUG]  [BUGGY]  Node  parent  =  callee.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  =  callee.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    Node    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
515	[BUG]  [BUGGY]  node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	node.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    Node    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
516	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild(),  qualifiedName);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getLastChild(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild(),  qualifiedName);	  Node    target    =    callee.getLastChild(),    functionName);    	non-compiled	[CE]  	43	None	replace
517	[BUG]  [BUGGY]  Node  target  =  parent.getLastChild(),  functionName);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  parent.getLastChild(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getLastChild(),  functionName);	  Node    target    =    callee.getLastChild(),    functionName);    	non-compiled	[CE]  	43	None	replace
518	[BUG]  [BUGGY]  Node  target  =  node.getLastChild(),  functionName);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getLastChild(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getLastChild(),  functionName);	  Node    target    =    callee.getLastChild(),    functionName);    	non-compiled	[CE]  	43	None	replace
519	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild(),  functionName,  qualifiedName);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getLastChild(),  functionName,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild(),  functionName,  qualifiedName);	  Node    target    =    callee.getLastChild(),    functionName);    	non-compiled	[CE]  	43	None	replace
520	[BUG]  [BUGGY]  Node  target  =  node.getFirstChild(),  functionName);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getFirstChild(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getFirstChild(),  functionName);	  Node    target    =    callee.getLastChild(),    functionName);    	non-compiled	[CE]  	43	None	replace
521	[BUG]  [BUGGY]  Node  target  =  callee.getfirstChild(),  functionName);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getfirstChild(),  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getfirstChild(),  functionName);	  Node    target    =    callee.getLastChild(),    functionName);    	non-compiled	[CE]  	43	None	replace
522	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ';'  expected	348	None	add
523	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ';'  expected	348	None	add
524	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ';'  expected	348	None	add
525	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ';'  expected	348	None	add
526	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ';'  expected	348	None	add
527	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ';'  expected	348	None	add
528	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifier.equals(target.getQualifiedName()))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifier.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifier.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ';'  expected	348	None	add
529	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getQualifiedName()))    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  	non-compiled	[CE]  ')'  expected	348	None	add
530	[BUG]  [BUGGY]  parent.replaceChild(node,  callee,  className);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee,  className);	  parent.replaceChild(callee,    target,    className);    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
531	[BUG]  [BUGGY]  parent.replaceChild(node,  target,  className);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target,  className);	  parent.replaceChild(callee,    target,    className);    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
532	[BUG]  [BUGGY]  parent.replaceChild(callee,  node,  className);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  node,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  node,  className);	  parent.replaceChild(callee,    target,    className);    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
533	[BUG]  [BUGGY]  parent.replaceChild(target,  callee,  className);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  callee,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  callee,  className);	  parent.replaceChild(callee,    target,    className);    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
534	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	323	None	replace
535	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	323	None	replace
536	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	323	None	replace
537	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	323	None	replace
538	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	323	None	replace
539	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	323	None	replace
540	[BUG]  [BUGGY]  NodeUtil.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
541	[BUG]  [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target);  NodeUtil.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
542	[BUG]  [BUGGY]  node.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  node.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	node.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
543	[BUG]  [BUGGY]  parent.replaceChild(node,  callee);  NodeUtil.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee);  NodeUtil.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee);  NodeUtil.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
544	[BUG]  [BUGGY]  parent.replaceChild(callee,  node);  NodeUtil.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  node);  NodeUtil.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  node);  NodeUtil.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
545	[BUG]  [BUGGY]  parent.replaceChild(callee,  target);  NodeUtil.replaceChild(target,  callee);  [CE]  illegal  start  of  type  [FE]                              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target);  NodeUtil.replaceChild(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target);  NodeUtil.replaceChild(target,  callee);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
546	[BUG]  [BUGGY]  NodeUtil.replaceChild(target,  callee);  [CE]  illegal  start  of  type  [FE]                                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.replaceChild(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.replaceChild(target,  callee);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
547	[BUG]  [BUGGY]  parent.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  node);  [CE]  illegal  start  of  type  [FE]                                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  node);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  node);	          parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  functionName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  functionName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  Reporter(),  functionName);	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  Reporter());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  Reporter());  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  node,  new  Reporter());	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callee,  new  Reporter());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  callee,  new  Reporter());  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  callee,  new  Reporter());	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
551	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  parent);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  parent);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  Reporter(),  parent);	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
552	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  callee);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  callee);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  Reporter(),  callee);	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  qualifiedName);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  qualifiedName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  Reporter(),  qualifiedName);	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  factory);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  factory);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  Reporter(),  factory);	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
555	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  this);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter(),  this);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  Reporter(),  this);	  NodeTraversal.traverse(compiler,    target,    new    Reporter());    	non-compiled	[CE]  illegal  start  of  type	400	None	replace
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=    null    &&    target.getType()    >=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
557	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=    null    &&    target.getType()    >=    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	26	1	replace
558	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  ==  null  &&  target.getString().length()!=  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  ==  null  &&  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target  ==  null  &&  target.getString().length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
559	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()!=  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target!=  null  &&  target.getString().length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
560	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target  ==  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
561	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target!=  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
562	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  ==  null  &&  target.getString().length()  >>  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  ==  null  &&  target.getString().length()  >>  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target  ==  null  &&  target.getString().length()  >>  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
563	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
564	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target!=  null  &&  target.getString().length()  >>  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
565	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  >=  null  &&  target.getString().length()!=  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  if(target  >=  null  &&  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    if(target  >=  null  &&  target.getString().length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
566	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  If(target  ==  null  &&  target.getString().length()!=  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  If(target  ==  null  &&  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()!=    0)    {    If(target  ==  null  &&  target.getString().length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	155	None	add
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
568	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
569	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  className.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  className.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  NullPointerException  	174	1	replace
570	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  className.equals(target.getString()))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  className.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  className.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  NullPointerException  	174	1	replace
571	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
572	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
574	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
575	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  name.equals(target.getString()))  {  [CE]  cannot  find  symbol  name  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  name.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  name.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  name	174	None	replace
576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
577	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
579	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    functionName.equals(target.getString()))    {    	compilable	  [FE]  AssertionFailedError  	174	1	replace
580	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
581	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
582	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  >=  null  &&  target.getType()  ==  Token.EMPTY)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  >=  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    if(target  >=  null  &&  target.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
583	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  If(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  If(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    If(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
584	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target!=  null  &&  target.getType()  >=  Token.EMPTY)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target!=  null  &&  target.getType()  >=  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    if(target!=  null  &&  target.getType()  >=  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
585	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  >>  null  &&  target.getType()  ==  Token.EMPTY)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  >>  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    if(target  >>  null  &&  target.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
586	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.EMPTY)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  ')'  expected	278	None	add
587	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target!=  null  &&  target.getType()  >>  Token.EMPTY)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  if(target!=  null  &&  target.getType()  >>  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    if(target!=  null  &&  target.getType()  >>  Token.EMPTY)  {	  	non-compiled	[CE]  ';'  expected	278	None	add
588	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parent.replaceChild(callee,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
589	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  className  =  callee.getString();  }	          parent.replaceChild(callee,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
590	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(!functionName.equals(qualifiedName));  }  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(!functionName.equals(qualifiedName));  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  Preconditions.checkState(!functionName.equals(qualifiedName));  }	          parent.replaceChild(callee,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
591	[BUG]  [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  Class  <?>  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  Class  <?>  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  }  else  {  Class  <?>  className  =  callee.getString();  }	          parent.replaceChild(callee,    target);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
592	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target!=  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(functionName))    {    if(target!=  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	262	None	add
593	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  ==  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  ==  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(functionName))    {    if(target  ==  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	262	None	add
594	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  If(target!=  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  If(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(functionName))    {    If(target!=  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	262	None	add
595	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  >=  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  >=  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(functionName))    {    if(target  >=  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	262	None	add
596	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  >>  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  >>  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(functionName))    {    if(target  >>  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	262	None	add
597	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(functionName))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(functionName))    {    if(target  [BUGGY]  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ')'  expected	262	None	add
598	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  [Delete]  null  &&  target.getString().equals(functionName))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  if(target  [Delete]  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(functionName))    {    if(target  [Delete]  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ')'  expected	262	None	add
599	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
600	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
602	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
603	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
604	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
605	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
606	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
608	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
610	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
611	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	57	None	replace
612	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
613	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent  ==  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    if(parent  ==  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
614	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
615	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent  >=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent  >=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    if(parent  >=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
616	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent!=  null  &&  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent!=  null  &&  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    if(parent!=  null  &&  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
617	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  If(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  If(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    If(parent!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
618	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent  >>  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent  >>  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    if(parent  >>  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
619	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=    null    &&    target.getType()    ==    Token.STRING)    {    if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	303	None	add
620	[BUG]  [BUGGY]  Name  target  =  callee.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getParent();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getParent();	  Name    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
621	[BUG]  [BUGGY]  Name  target  =  callee.getNext(),  qualifiedName;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getNext(),  qualifiedName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getNext(),  qualifiedName;	  Name    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
622	[BUG]  [BUGGY]  Name  target  =  callee.getNext(),  qualifiedName);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getNext(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getNext(),  qualifiedName);	  Name    target    =    callee.getNext();    	non-compiled	[CE]  	114	None	replace
623	[BUG]  [BUGGY]  Name  target  =  callee.getNext(),  functionName;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getNext(),  functionName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getNext(),  functionName;	  Name    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
624	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {	  if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    	compilable	  [FE]  AssertionFailedError  	447	1	replace
625	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {	  if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    	compilable	  [FE]  AssertionFailedError  	447	1	replace
626	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.ASSIGN)  {	  if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    	compilable	  [FE]  AssertionFailedError  	447	1	replace
627	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.ASSIGN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.ASSIGN)  {	  if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    	compilable	  [FE]  AssertionFailedError  	447	1	replace
628	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
629	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
630	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
631	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
632	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
633	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
634	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  callee);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
635	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  callee);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
636	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  ';'  expected	416	None	add
637	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
638	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
639	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
640	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
641	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  [CE]  ';'  expected  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);	  	non-compiled	[CE]  ';'  expected	416	None	add
642	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
643	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
644	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
645	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    callee);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  callee);	  	compilable	  [FE]  IllegalArgumentException  	416	1	add
646	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	321	None	replace
647	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	321	None	replace
648	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	321	None	replace
649	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	321	None	replace
650	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	106	None	replace
651	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	106	None	replace
652	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	106	None	replace
653	[BUG]  [BUGGY]  Node  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  ';'  expected	106	None	replace
654	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getFirstChild();  if(className!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getFirstChild();  if(className!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  callee.getFirstChild();  if(className!=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	106	None	replace
655	[BUG]  [BUGGY]  Node  target  =  callee.removeLastChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.removeLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.removeLastChild();	  Node    target    =    callee.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	461	None	replace
656	[BUG]  [BUGGY]  Node  target  =  callee.replaceChild(node,  target);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.replaceChild(node,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.replaceChild(node,  target);	  Node    target    =    callee.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	461	None	replace
657	[BUG]  [BUGGY]  Node  target  =  callee.removeFirstChild(),  qualifiedName);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.removeFirstChild(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.removeFirstChild(),  qualifiedName);	  Node    target    =    callee.removeFirstChild();    	non-compiled	[CE]  	461	None	replace
658	[BUG]  [BUGGY]  Node  target  =  node.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.removeFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.removeFirstChild();	  Node    target    =    callee.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	461	None	replace
659	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
660	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
661	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  >=  null  &&  target.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  >=  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target  >=  null  &&  target.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
662	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  If(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  If(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    If(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
663	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >=  Token.GETPROP)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >=  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  target.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
664	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  >>  null  &&  target.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  >>  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target  >>  null  &&  target.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
665	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >>  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  >>  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target!=  null  &&  target.getType()  >>  Token.GETPROP)  {	  	non-compiled	[CE]  ';'  expected	171	None	add
666	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ')'  expected	171	None	add
667	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  ')'  expected	171	None	add
668	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
669	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
670	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee  ==  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    if(callee  ==  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
671	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee  >=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee  >=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    if(callee  >=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
672	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee!=  null  &&  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee!=  null  &&  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    if(callee!=  null  &&  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
673	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee  >>  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee  >>  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    if(callee  >>  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
674	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  If(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  If(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    If(callee!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
675	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee!=  null  &&  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  if(callee!=  null  &&  target.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=    null    &&    target.getType()    ==    Token.STRING)    {    if(callee!=  null  &&  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	386	None	add
676	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target    >=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	188	1	replace
677	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target    >=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	188	1	replace
678	[BUG]  [BUGGY]  Node  target  =  callee.getChildCount()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getChildCount()  -  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getChildCount()  -  1;	  Node    target    =    callee.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
679	[BUG]  [BUGGY]  Node  target  =  callee.getChildCount()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getChildCount()  +  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getChildCount()  +  1;	  Node    target    =    callee.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
680	[BUG]  [BUGGY]  Node  target  =  callee.getChildCount()  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getChildCount()  -  2;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getChildCount()  -  2;	  Node    target    =    callee.getChildCount();    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
681	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	337	None	replace
682	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	337	None	replace
683	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	337	None	replace
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(className!=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(className))    {    	compilable	  [FE]  AssertionFailedError  	275	1	replace
685	[BUG]  [BUGGY]  if(className!=  null  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(className!=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(className))    {    	compilable	  [FE]  AssertionFailedError  	275	1	replace
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(className))    {    	compilable	  [FE]  AssertionFailedError  	275	1	replace
687	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().equals(className))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(className))    {    	compilable	  [FE]  AssertionFailedError  	275	1	replace
688	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className!=  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(className!=  null  &&  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(className))    {    	compilable	  [FE]  AssertionFailedError  	275	1	replace
689	[BUG]  [BUGGY]  if(className!=  null  &&  target.getString().equals(className))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className!=  null  &&  target.getString().equals(className))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(className!=  null  &&  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(className))    {    	compilable	  [FE]  AssertionFailedError  	275	1	replace
690	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	294	None	replace
691	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	294	None	replace
692	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	294	None	replace
693	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	294	None	replace
694	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	294	None	replace
695	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	294	None	replace
696	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	294	None	replace
697	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target  ==  null  ||  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
698	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target!=  null  ||  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target!=  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target!=  null  ||  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
699	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target  ==  null  ||  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
700	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target  ==  null  ||  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
701	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  If(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  If(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    If(target  ==  null  ||  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
702	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  >=  null  ||  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  >=  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target  >=  null  ||  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
703	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  [BUGGY]  Token.STRING)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  [BUGGY]  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target  ==  null  ||  target.getType()  [BUGGY]  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	74	None	add
704	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	74	None	add
705	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  [Delete]  Token.STRING)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  if(target  ==  null  ||  target.getType()  [Delete]  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    ||    target.getType()!=    Token.STRING)    {    if(target  ==  null  ||  target.getType()  [Delete]  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	74	None	add
706	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
707	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
708	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
709	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
710	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
711	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
712	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
713	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
714	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  NullPointerException  	176	1	replace
715	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  NullPointerException  	176	1	replace
716	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETELEM)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETELEM)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  NullPointerException  	176	1	replace
717	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETELEM)  {  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETELEM)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETELEM)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  NullPointerException  	176	1	replace
718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
719	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
720	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
721	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	176	1	replace
722	[BUG]  [BUGGY]  Name  target  =  callee.getLastChild()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getLastChild()  +  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getLastChild()  +  1;	  Name    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
723	[BUG]  [BUGGY]  Name  target  =  callee.getLastChild(),  qualifiedName;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getLastChild(),  qualifiedName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getLastChild(),  qualifiedName;	  Name    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
724	[BUG]  [BUGGY]  Name  target  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  node.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  node.getLastChild();	  Name    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
725	[BUG]  [BUGGY]  Name  target  =  callee.getLastChild(),  qualifiedName);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getLastChild(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getLastChild(),  qualifiedName);	  Name    target    =    callee.getLastChild();    	non-compiled	[CE]  	112	None	replace
726	[BUG]  [BUGGY]  Name  target  =  callee.getPreviousChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getPreviousChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getPreviousChild();	  Name    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
727	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();	  Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	255	None	replace
728	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	255	None	replace
729	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	255	None	replace
730	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
731	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
733	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
735	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
737	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
738	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
739	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
741	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	397	1	replace
742	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  parent.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  parent.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  UnsupportedOperationException  	397	1	replace
743	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  parent.getString().equals(qualifiedName))  {  [FE]  UnsupportedOperationException  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  parent.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  parent.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  UnsupportedOperationException  	397	1	replace
744	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	457	None	replace
745	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	457	None	replace
746	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	457	None	replace
747	[BUG]  [BUGGY]  parent  ==  target)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  target)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  target)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  callee.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	457	None	replace
748	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  callee.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	457	None	replace
749	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
750	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
751	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
752	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
753	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
754	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
755	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
756	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
757	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
758	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
760	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
762	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	204	1	replace
763	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
764	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getClass();	  Class    <?>    className    =    callee.getString();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
765	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=    null    &&    target.getType()    {    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	302	None	replace
766	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=    null    &&    target.getType()    {    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	302	None	replace
767	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=    null    &&    target.getType()    {    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	302	None	replace
768	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=    null    &&    target.getType()    {    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	302	None	replace
769	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	371	None	replace
770	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	371	None	replace
771	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	371	None	replace
772	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  functionName)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  functionName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  functionName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	371	None	replace
773	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  qualifiedName)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  qualifiedName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  qualifiedName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	371	None	replace
774	[BUG]  [BUGGY]  Node  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  ';'  expected	371	None	replace
775	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getParent();  if(target!=  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
776	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getParentClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getParentClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getParentClass();  if(target!=  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
777	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	6	None	replace
778	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	6	None	replace
779	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
780	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	6	None	replace
781	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	6	None	replace
782	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
783	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
784	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
785	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	266	None	add
786	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	266	None	add
787	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	266	None	add
788	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	266	None	add
789	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >=  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	266	None	add
790	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	266	None	add
791	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >>  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	266	None	add
792	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
793	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
794	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
795	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
796	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >=  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
797	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
798	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >>  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	167	None	add
799	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	260	None	replace
800	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	260	None	replace
801	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(className.equals(functionName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	260	None	replace
802	[BUG]  [BUGGY]  Class  <?>  className  =  node.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  node.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  node.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	260	None	replace
803	[BUG]  [BUGGY]  Class  <?>  className  =  parent.getQualifiedName();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  parent.getQualifiedName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  parent.getQualifiedName();	  Class    <?>    className    =    target.getQualifiedName();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	260	None	replace
804	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals( "prototype "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
805	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals( "prototype "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals( "prototype "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
806	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getString().equals( "prototype "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
807	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getString().equals( "prototype "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getString().equals( "prototype "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
808	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals( "prototype "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
809	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().equals( "prototype "))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals( "prototype "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
810	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "property "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "property "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
811	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "property "))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "property "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "property "))  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
812	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
813	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "prototype ")||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    	compilable	  [FE]  AssertionFailedError  	271	1	replace
814	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  new  Node(Token.GETPROP,  qualifiedName));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target,  new  Node(Token.GETPROP,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  new  Node(Token.GETPROP,  qualifiedName));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	357	None	replace
815	[BUG]  [BUGGY]  parent.replaceChild(node,  new  Node(Token.GETPROP,  qualifiedName));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  new  Node(Token.GETPROP,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  new  Node(Token.GETPROP,  qualifiedName));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	357	None	replace
816	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  callee.getQualifiedName()));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  callee.getQualifiedName()));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  callee.getQualifiedName()));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	357	None	replace
817	[BUG]  [BUGGY]  parent.replaceChild(target,  new  Node(Token.GETPROP,  qualifiedName));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  new  Node(Token.GETPROP,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  new  Node(Token.GETPROP,  qualifiedName));	  parent.replaceChild(callee,    new    Node(Token.GETPROP,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	357	None	replace
818	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {	  	non-compiled	[CE]  ';'  expected	446	None	add
819	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target  ==  null  &&  target.getType()  ==  Token.ASSIGN)  {	  	non-compiled	[CE]  ';'  expected	446	None	add
820	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  >=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  >=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target  >=  null  &&  target.getType()  ==  Token.ASSIGN)  {	  	non-compiled	[CE]  ';'  expected	446	None	add
821	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  If(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  If(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    If(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {	  	non-compiled	[CE]  ';'  expected	446	None	add
822	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target!=  null  &&  target.getType()  >=  Token.ASSIGN)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target!=  null  &&  target.getType()  >=  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target!=  null  &&  target.getType()  >=  Token.ASSIGN)  {	  	non-compiled	[CE]  ';'  expected	446	None	add
823	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  >>  null  &&  target.getType()  ==  Token.ASSIGN)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  >>  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target  >>  null  &&  target.getType()  ==  Token.ASSIGN)  {	  	non-compiled	[CE]  ';'  expected	446	None	add
824	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.ASSIGN)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.ASSIGN)  {	  	non-compiled	[CE]  ')'  expected	446	None	add
825	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target!=  null  &&  target.getType()  >>  Token.ASSIGN)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target!=  null  &&  target.getType()  >>  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target!=  null  &&  target.getType()  >>  Token.ASSIGN)  {	  	non-compiled	[CE]  ';'  expected	446	None	add
826	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.ASSIGN)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.ASSIGN)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.ASSIGN)  {	  	non-compiled	[CE]  ')'  expected	446	None	add
827	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	220	None	replace
828	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
829	[BUG]  [BUGGY]  Class  <?>  className  =  target.getProp(Node.SOURCENAME_PROP);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getProp(Node.SOURCENAME_PROP);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getProp(Node.SOURCENAME_PROP);	  Class    <?>    className    =    target.getString();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
830	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  functionName);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  functionName);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	301	None	replace
831	[BUG]  [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target);  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target);  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	301	None	replace
832	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  qualifiedName);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	301	None	replace
833	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  null);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  null);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  null);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	301	None	replace
834	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  name);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target,  name);	          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent);    parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	301	None	replace
835	[BUG]  [BUGGY]  Name  target  =  callee.removeLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.removeLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.removeLastChild();	  Name    target    =    callee.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	429	None	replace
836	[BUG]  [BUGGY]  Name  target  =  callee.removeFirstChild(),  qualifiedName);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.removeFirstChild(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.removeFirstChild(),  qualifiedName);	  Name    target    =    callee.removeFirstChild();    	non-compiled	[CE]  	429	None	replace
837	[BUG]  [BUGGY]  Name  target  =  callee.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.replaceChild(callee,  target);	  Name    target    =    callee.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	429	None	replace
838	[BUG]  [BUGGY]  Name  target  =  callee.removeFirstChild(),  qualifiedName;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.removeFirstChild(),  qualifiedName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.removeFirstChild(),  qualifiedName;	  Name    target    =    callee.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	429	None	replace
839	[BUG]  [BUGGY]  Name  target  =  callee.replaceChild(node,  target);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.replaceChild(node,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.replaceChild(node,  target);	  Name    target    =    callee.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	429	None	replace
840	[BUG]  [BUGGY]  Node  target  =  callee.getNameNode();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNameNode();  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNameNode();	  Node    target    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	340	None	replace
841	[BUG]  [BUGGY]  Node  target  =  callee.getType();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getType();  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getType();	  Node    target    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	340	None	replace
842	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	313	None	replace
843	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	201	None	add
844	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target  ==  null  &&  target.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	201	None	add
845	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  >=  null  &&  target.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  >=  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target  >=  null  &&  target.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	201	None	add
846	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  If(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  If(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    If(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	201	None	add
847	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target!=  null  &&  target.getType()  >=  Token.BLOCK)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target!=  null  &&  target.getType()  >=  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target!=  null  &&  target.getType()  >=  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	201	None	add
848	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  >>  null  &&  target.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  >>  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target  >>  null  &&  target.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	201	None	add
849	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target!=  null  &&  target.getType()  >>  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target!=  null  &&  target.getType()  >>  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target!=  null  &&  target.getType()  >>  Token.BLOCK)  {	  	non-compiled	[CE]  ';'  expected	201	None	add
850	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ')'  expected	201	None	add
851	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.BLOCK)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  ')'  expected	201	None	add
852	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
853	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	210	None	replace
854	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "class "))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "class "))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "class "))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
855	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
856	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
857	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
858	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
859	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
860	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
861	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
862	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
863	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
864	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
865	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
866	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
867	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
868	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
869	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION    ||    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	200	1	replace
870	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	354	None	replace
871	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	354	None	replace
872	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	354	None	replace
873	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	354	None	replace
874	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	354	None	replace
875	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	354	None	replace
876	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target,  functionName);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target,  functionName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(parent,  target,  functionName);	  NodeUtil.copyNameAnnotations(parent,    target);    	non-compiled	[CE]  illegal  start  of  type	402	None	replace
877	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(node,  target);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(node,  target);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(node,  target);	  NodeUtil.copyNameAnnotations(parent,    target);    	non-compiled	[CE]  illegal  start  of  type	402	None	replace
878	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target,  qualifiedName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(parent,  target,  qualifiedName);	  NodeUtil.copyNameAnnotations(parent,    target);    	non-compiled	[CE]  illegal  start  of  type	402	None	replace
879	[BUG]  [BUGGY]  NodeUtil.copyReferenceAnnotations(target,  parent);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyReferenceAnnotations(target,  parent);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyReferenceAnnotations(target,  parent);	  NodeUtil.copyNameAnnotations(parent,    target);    	non-compiled	[CE]  illegal  start  of  type	402	None	replace
880	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(className,  target);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(className,  target);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(className,  target);	  NodeUtil.copyNameAnnotations(parent,    target);    	non-compiled	[CE]  illegal  start  of  type	402	None	replace
881	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target,  className);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target,  className);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(parent,  target,  className);	  NodeUtil.copyNameAnnotations(parent,    target);    	non-compiled	[CE]  illegal  start  of  type	402	None	replace
882	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  ==  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  ==  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().equals(functionName))    {    if(target  ==  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	264	None	add
883	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target!=  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().equals(functionName))    {    if(target!=  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	264	None	add
884	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  If(target  ==  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  If(target  ==  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().equals(functionName))    {    If(target  ==  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	264	None	add
885	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  >=  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  >=  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().equals(functionName))    {    if(target  >=  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	264	None	add
886	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  If(target!=  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  If(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().equals(functionName))    {    If(target!=  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	264	None	add
887	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  >>  null  &&  target.getString().equals(functionName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  >>  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().equals(functionName))    {    if(target  >>  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ';'  expected	264	None	add
888	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(functionName))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().equals(functionName))    {    if(target  [BUGGY]  null  &&  target.getString().equals(functionName))  {	  	non-compiled	[CE]  ')'  expected	264	None	add
889	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  Node    target    =    node.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
890	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild();  if(target  >=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getFirstChild();  if(target  >=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild();  if(target  >=  null)  {  className  =  target.getString();  }	  Node    target    =    node.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
891	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    null  &&  target.getType()  ==  Token.NAME)  {  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target    	non-compiled	[CE]  ';'  expected	15	None	replace
892	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	339	None	replace
893	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	339	None	replace
894	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(!className.equals(functionName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	339	None	replace
895	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(functionName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	339	None	replace
896	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  functionName);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  functionName);	  aughtExceptionHandler.handleMissingName(target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	381	None	replace
897	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target,  functionName,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(target,  functionName,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target,  functionName,  qualifiedName);	  aughtExceptionHandler.handleMissingName(target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	381	None	replace
898	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  target,  functionName);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  target,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  target,  functionName);	  aughtExceptionHandler.handleMissingName(target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	381	None	replace
899	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target,  className);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(target,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target,  className);	  aughtExceptionHandler.handleMissingName(target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	381	None	replace
900	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  target,  functionName);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(name,  target,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(name,  target,  functionName);	  aughtExceptionHandler.handleMissingName(target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	381	None	replace
901	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(className,  target);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(className,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(className,  target);	  aughtExceptionHandler.handleMissingName(target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	381	None	replace
902	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP);	  Class    <?>    className    =    callee.getString();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
903	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP,  qualifiedName);	  Class    <?>    className    =    callee.getString();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
904	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP,  functionName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getProp(Node.SOURCENAME_PROP,  functionName);	  Class    <?>    className    =    callee.getString();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
905	[BUG]  [BUGGY]  parent.replaceChild(callee,  node,  functionName);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  node,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  node,  functionName);	  parent.replaceChild(callee,    node);    	non-compiled	[CE]  illegal  start  of  type	439	None	replace
906	[BUG]  [BUGGY]  Node  parent  =  callee.replaceChild(node,  parent);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  =  callee.replaceChild(node,  parent);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.replaceChild(node,  parent);	  parent.replaceChild(callee,    node);    	non-compiled	[CE]  illegal  start  of  type	439	None	replace
907	[BUG]  [BUGGY]  Node  node  =  parent.replaceChild(callee,  target);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  node  =  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  node  =  parent.replaceChild(callee,  target);	  parent.replaceChild(callee,    node);    	non-compiled	[CE]  illegal  start  of  type	439	None	replace
908	[BUG]  [BUGGY]  Node  parent  =  callee.replaceChild(parent,  node);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent  =  callee.replaceChild(parent,  node);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.replaceChild(parent,  node);	  parent.replaceChild(callee,    node);    	non-compiled	[CE]  illegal  start  of  type	439	None	replace
909	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getFirstChild();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	393	None	replace
910	[BUG]  [BUGGY]  Node  target  =  node.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getFirstChild();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	393	None	replace
911	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getFirstChild();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	393	None	replace
912	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  parent.getString();  }	  Node    target    =    parent.getFirstChild();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	393	None	replace
913	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getFirstChild();    if(target!=    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	393	None	replace
914	[BUG]  [BUGGY]  Node  target  =  node.getNext();  if(parent!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getNext();  if(parent!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext();  if(parent!=  null)  {  className  =  target.getString();  }	  Node    target    =    callee.getNext();    if(parent!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
915	[BUG]  [BUGGY]  Node  target  =  parent.getNext();  if(parent!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  parent.getNext();  if(parent!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext();  if(parent!=  null)  {  className  =  target.getString();  }	  Node    target    =    callee.getNext();    if(parent!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
916	[BUG]  [BUGGY]  Node  target  =  node.getNext();  if(parent!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getNext();  if(parent!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext();  if(parent!=  null)  {  className  =  callee.getString();  }	  Node    target    =    callee.getNext();    if(parent!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
917	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	259	None	replace
918	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	259	None	replace
919	[BUG]  [BUGGY]  Class  <?>  className  =  target!=  null?  null  :  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target!=  null?  null  :  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target!=  null?  null  :  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	259	None	replace
920	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	259	None	replace
921	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	259	None	replace
922	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	259	None	replace
923	[BUG]  [BUGGY]  Class  <?>  className  =  node.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  node.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  node.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	259	None	replace
924	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  parent.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  parent.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	259	None	replace
925	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  functionName));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  functionName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.FUNCTION,  functionName));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
926	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  new  Node(Token.FUNCTION,  qualifiedName));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target,  new  Node(Token.FUNCTION,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  new  Node(Token.FUNCTION,  qualifiedName));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
927	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  name));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  name));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.FUNCTION,  name));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
928	[BUG]  [BUGGY]  parent.replaceChild(node,  new  Node(Token.FUNCTION,  qualifiedName));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  new  Node(Token.FUNCTION,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  new  Node(Token.FUNCTION,  qualifiedName));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
929	[BUG]  [BUGGY]  parent.replaceChild(node,  new  Node(Token.FUNCTION,  functionName));  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  new  Node(Token.FUNCTION,  functionName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  new  Node(Token.FUNCTION,  functionName));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
930	[BUG]  [BUGGY]  parent.replaceChild(target,  new  Node(Token.FUNCTION,  qualifiedName));  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  new  Node(Token.FUNCTION,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  new  Node(Token.FUNCTION,  qualifiedName));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
931	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  qualifiedName),  target);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  qualifiedName),  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.FUNCTION,  qualifiedName),  target);	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
932	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  className));  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  className));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.FUNCTION,  className));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
933	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  callee.getQualifiedName()));  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  callee.getQualifiedName()));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.FUNCTION,  callee.getQualifiedName()));	  parent.replaceChild(callee,    new    Node(Token.FUNCTION,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	438	None	replace
934	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
935	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
936	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
937	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
938	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
939	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
940	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
941	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifier.equals(target.getString()))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifier.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifier.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	241	None	add
942	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target!=  null  &&  target.getString().equals(   "*   "))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target!=  null  &&  target.getString().equals(   "*   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "*   "))    {    if(target!=  null  &&  target.getString().equals(   "*   "))  {	  	non-compiled	[CE]  ';'  expected	414	None	add
943	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target  ==  null  &&  target.getString().equals(   "*   "))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target  ==  null  &&  target.getString().equals(   "*   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "*   "))    {    if(target  ==  null  &&  target.getString().equals(   "*   "))  {	  	non-compiled	[CE]  ';'  expected	414	None	add
944	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target!=  null  &&  target.getString().equals( ".*   "))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target!=  null  &&  target.getString().equals( ".*   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "*   "))    {    if(target!=  null  &&  target.getString().equals( ".*   "))  {	  	non-compiled	[CE]  ';'  expected	414	None	add
945	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  If(target!=  null  &&  target.getString().equals(   "*   "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  If(target!=  null  &&  target.getString().equals(   "*   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "*   "))    {    If(target!=  null  &&  target.getString().equals(   "*   "))  {	  	non-compiled	[CE]  	414	None	add
946	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target  >=  null  &&  target.getString().equals(   "*   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target  >=  null  &&  target.getString().equals(   "*   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "*   "))    {    if(target  >=  null  &&  target.getString().equals(   "*   "))  {	  	non-compiled	[CE]  ';'  expected	414	None	add
947	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target!=  null  &&  target.getString().equals( ",*   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "*   "))  {  if(target!=  null  &&  target.getString().equals( ",*   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "*   "))    {    if(target!=  null  &&  target.getString().equals( ",*   "))  {	  	non-compiled	[CE]  ';'  expected	414	None	add
948	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild();  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getLastChild();  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild();  className  =  target.getString();	  Node    target    =    parent.getLastChild();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	316	None	replace
949	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(className  ==  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
950	[BUG]  [BUGGY]  if(className  ==  null  ||  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(className  ==  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target    ==    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
951	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    If(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
952	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    If(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
953	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    If(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
954	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    If(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
955	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    If(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
956	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	245	1	replace
957	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(functionName))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	245	1	replace
958	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	245	1	replace
959	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	245	1	replace
960	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	245	1	replace
961	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	245	1	replace
962	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	245	1	replace
963	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	245	1	replace
964	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	245	1	replace
965	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	245	1	replace
966	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	279	1	replace
967	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	279	1	replace
968	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	279	1	replace
969	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	279	1	replace
970	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	279	1	replace
971	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.EMPTY)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.EMPTY)    {    	compilable	  [FE]  AssertionFailedError  	279	1	replace
972	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  qualifiedName)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  qualifiedName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  qualifiedName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	441	None	replace
973	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  functionName)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  functionName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  functionName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	441	None	replace
974	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	209	None	replace
975	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	209	None	replace
976	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	209	None	replace
977	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	209	None	replace
978	[BUG]  [BUGGY]  Class  <?>  className  =  call.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  call.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  call.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getQualifiedName();    if(functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
979	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getLastChild();	  Class    <?>    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
980	[BUG]  [BUGGY]  Class  <?>  target  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  node.getFirstChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  node.getFirstChild();	  Class    <?>    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
981	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getType();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getType();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getType();	  Class    <?>    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
982	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getChildCount();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getChildCount();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getChildCount();	  Class    <?>    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
983	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getQualifiedName();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getQualifiedName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getQualifiedName();	  Class    <?>    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
984	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getLocalChildCount();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getLocalChildCount();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getLocalChildCount();	  Class    <?>    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
985	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
986	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
987	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
988	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
989	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);	  	non-compiled	[CE]  ';'  expected	418	None	add
990	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
991	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
992	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
993	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
994	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
995	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
996	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
997	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
998	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
999	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
1000	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
1001	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  }  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
1002	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
1003	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(parent,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	418	1	add
1004	[BUG]  [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  functionName));  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  functionName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  Node.newString(Token.NAME,  functionName));	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1005	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  functionName));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  functionName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  functionName));	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1006	[BUG]  [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  name));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  name));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  Node.newString(Token.NAME,  name));	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1007	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  qualifiedName));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  qualifiedName));	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1008	[BUG]  [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  className));  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  className));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  Node.newString(Token.NAME,  className));	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1009	[BUG]  [BUGGY]  parent.replaceChild(target,  Node.newString(Token.NAME,  qualifiedName));  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  Node.newString(Token.NAME,  qualifiedName));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  Node.newString(Token.NAME,  qualifiedName));	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1010	[BUG]  [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  qualifiedName),  target);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  qualifiedName),  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  Node.newString(Token.NAME,  qualifiedName),  target);	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1011	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  name));  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME,  name));  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  Node.newString(Token.NAME,  name));	  parent.replaceChild(callee,    Node.newString(Token.NAME,    qualifiedName));    	non-compiled	[CE]  illegal  start  of  type	437	None	replace
1012	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	355	None	replace
1013	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	355	None	replace
1014	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	355	None	replace
1015	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  AssertionFailedError  	281	1	replace
1016	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  AssertionFailedError  	281	1	replace
1017	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT_EXPECTED)  {  [CE]  cannot  find  symbol  OBJECTLIT_EXPECTED  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT_EXPECTED)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT_EXPECTED)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  cannot  find  symbol  OBJECTLIT_EXPECTED	281	None	replace
1018	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.OBJECTLIT)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  AssertionFailedError  	281	1	replace
1019	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.OBJECTLIT)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.OBJECTLIT)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  AssertionFailedError  	281	1	replace
1020	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  NullPointerException  	281	1	replace
1021	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  NullPointerException  	281	1	replace
1022	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  AssertionFailedError  	281	1	replace
1023	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    	compilable	  [FE]  AssertionFailedError  	281	1	replace
1024	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    if(target  ==  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1025	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1026	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()!=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    if(target  ==  null  &&  target.getString().length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1027	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    if(target  >=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1028	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  If(target  ==  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  If(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    If(target  ==  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1029	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    if(target  ==  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1030	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1031	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getString().length()    ==    0)    {    If(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
1032	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	330	None	replace
1033	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	330	None	replace
1034	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	330	None	replace
1035	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	330	None	replace
1036	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	330	None	replace
1037	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString()    	non-compiled	[CE]  not  a  statement	330	None	replace
1038	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	223	None	replace
1039	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(!functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
1040	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	98	None	replace
1041	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	98	None	replace
1042	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
1043	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
1044	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	98	None	replace
1045	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(functionName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(functionName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(functionName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
1046	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	222	None	replace
1047	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	222	None	replace
1048	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	222	None	replace
1049	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	222	None	replace
1050	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	222	None	replace
1051	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	222	None	replace
1052	[BUG]  [BUGGY]  Node  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  parent!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  ';'  expected	258	None	replace
1053	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }	  parent!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	258	None	replace
1054	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	258	None	replace
1055	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	  parent!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	258	None	replace
1056	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  node);	  aughtExceptionHandler.handleMissingName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	405	None	replace
1057	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target,  callee);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(target,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target,  callee);	  aughtExceptionHandler.handleMissingName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	405	None	replace
1058	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(node,  callee,  functionName);	  aughtExceptionHandler.handleMissingName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	405	None	replace
1059	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(node,  callee,  qualifiedName);	  aughtExceptionHandler.handleMissingName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	405	None	replace
1060	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  callee);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(name,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(name,  callee);	  aughtExceptionHandler.handleMissingName(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	405	None	replace
1061	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getFirstChild();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1062	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(functionName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	97	None	replace
1063	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getFirstChild();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
1064	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(qualifiedName.equals( " "))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(qualifiedName.equals( " "))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(qualifiedName.equals( " "))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	97	None	replace
1065	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1066	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals( "* "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1067	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1068	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals( "* "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1069	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "* ")||  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "* ")||  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1070	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "* ")||  target.getString().equals( "* "))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "* ")||  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "* ")||  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1071	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "class "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "class "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1072	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "class "))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "class "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "class "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1073	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1074	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().equals( "* "))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals( "* "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1075	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "_ "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "_ "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1076	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "_ "))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals( "_ "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "_ "))  {	  if(target!=    null    &&    target.getString().equals(   "*   "))    {    	compilable	  [FE]  AssertionFailedError  	415	1	replace
1077	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	338	None	replace
1078	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	338	None	replace
1079	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	338	None	replace
1080	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	338	None	replace
1081	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ObjectTraversal());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ObjectTraversal());  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  node,  new  ObjectTraversal());	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1082	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  callee,  new  ObjectTraversal());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  callee,  new  ObjectTraversal());  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  callee,  new  ObjectTraversal());	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1083	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  callee);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  callee);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  callee);	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1084	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  parent);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  parent);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  parent);	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1085	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  functionName);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  functionName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  functionName);	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1086	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  this);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  this);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  this);	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1087	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  factory);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  factory);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  factory);	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1088	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  qualifiedName);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  qualifiedName);  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal(),  qualifiedName);	  NodeTraversal.traverse(compiler,    target,    new    ObjectTraversal());    	non-compiled	[CE]  illegal  start  of  type	341	None	replace
1089	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString    	non-compiled	[CE]  not  a  statement	295	None	replace
1090	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString    	non-compiled	[CE]  not  a  statement	295	None	replace
1091	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString    	non-compiled	[CE]  not  a  statement	295	None	replace
1092	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString    	non-compiled	[CE]  not  a  statement	295	None	replace
1093	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString    	non-compiled	[CE]  not  a  statement	295	None	replace
1094	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString    	non-compiled	[CE]  not  a  statement	295	None	replace
1095	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString    	non-compiled	[CE]  not  a  statement	295	None	replace
1096	[BUG]  [BUGGY]  Node  target  =  caller.getLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  caller.getLastChild();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  caller.getLastChild();	  Node    target    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1097	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
1098	[BUG]  [BUGGY]  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
1099	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
1100	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
1101	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  If(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  If(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  If(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
1102	[BUG]  [BUGGY]  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	63	None	replace
1103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1104	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1106	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1108	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1110	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1112	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1114	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1116	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  >=  0)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1118	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	449	1	replace
1119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().length()!=  0)  {	  if(target    ==    null    &&    target.getString().length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
1120	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().length()!=  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().length()!=  0)  {	  if(target    ==    null    &&    target.getString().length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
1121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().length()  >=  0)  {	  if(target    ==    null    &&    target.getString().length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
1122	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().length()  >=  0)  {	  if(target    ==    null    &&    target.getString().length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
1123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getString().length()!=  0)  {	  if(target    ==    null    &&    target.getString().length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
1124	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getString().length()!=  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getString().length()!=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getString().length()!=  0)  {	  if(target    ==    null    &&    target.getString().length()!=    0)    {    	compilable	  [FE]  AssertionFailedError  	156	1	replace
1125	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  target,  className);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  target,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  target,  className);	  aughtExceptionHandler.handleMissingName(callee,    parent,    className);    	non-compiled	[CE]  illegal  start  of  type	390	None	replace
1126	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target,  callee,  className);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(target,  callee,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target,  callee,  className);	  aughtExceptionHandler.handleMissingName(callee,    parent,    className);    	non-compiled	[CE]  illegal  start  of  type	390	None	replace
1127	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node,  className);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  node,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  node,  className);	  aughtExceptionHandler.handleMissingName(callee,    parent,    className);    	non-compiled	[CE]  illegal  start  of  type	390	None	replace
1128	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  callee,  functionName);	  aughtExceptionHandler.handleMissingName(callee,    parent,    className);    	non-compiled	[CE]  illegal  start  of  type	390	None	replace
1129	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee,  className);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(node,  callee,  className);	  aughtExceptionHandler.handleMissingName(callee,    parent,    className);    	non-compiled	[CE]  illegal  start  of  type	390	None	replace
1130	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  callee,  qualifiedName);	  aughtExceptionHandler.handleMissingName(callee,    parent,    className);    	non-compiled	[CE]  illegal  start  of  type	390	None	replace
1131	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(name,  callee,  className);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingName(name,  callee,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(name,  callee,  className);	  aughtExceptionHandler.handleMissingName(callee,    parent,    className);    	non-compiled	[CE]  illegal  start  of  type	390	None	replace
1132	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  target,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  target,  qualifiedName);	  aughtExceptionHandler.handleMissingClassName(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	408	None	replace
1133	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  callee,  functionName);	  aughtExceptionHandler.handleMissingClassName(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	408	None	replace
1134	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  callee,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(target,  callee,  qualifiedName);	  aughtExceptionHandler.handleMissingClassName(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	408	None	replace
1135	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  node,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  node,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  node,  qualifiedName);	  aughtExceptionHandler.handleMissingClassName(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	408	None	replace
1136	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  functionName,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  functionName,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  functionName,  qualifiedName);	  aughtExceptionHandler.handleMissingClassName(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	408	None	replace
1137	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  parent,  qualifiedName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  parent,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(target,  parent,  qualifiedName);	  aughtExceptionHandler.handleMissingClassName(callee,    parent,    qualifiedName);    	non-compiled	[CE]  illegal  start  of  type	408	None	replace
1138	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    callee.getString();    if(!functionName.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
1139	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	411	None	replace
1140	[BUG]  [BUGGY]  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	411	None	replace
1141	[BUG]  [BUGGY]  Class  <?>  target  =  parent.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  parent.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  parent.getClass();  if(target!=  functionName)  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    target    =    parent.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	411	None	replace
1142	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  target,  functionName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  target,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  target,  functionName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    functionName);    	non-compiled	[CE]  illegal  start  of  type	406	None	replace
1143	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  node,  functionName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  node,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  node,  functionName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    functionName);    	non-compiled	[CE]  illegal  start  of  type	406	None	replace
1144	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  callee,  functionName,  target);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  callee,  functionName,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  callee,  functionName,  target);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    functionName);    	non-compiled	[CE]  illegal  start  of  type	406	None	replace
1145	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  parent,  functionName,  target);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  parent,  functionName,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  parent,  functionName,  target);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    functionName);    	non-compiled	[CE]  illegal  start  of  type	406	None	replace
1146	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(target,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(target,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(target,  callee,  functionName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    functionName);    	non-compiled	[CE]  illegal  start  of  type	406	None	replace
1147	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(node,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClass(node,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(node,  callee,  functionName);	  aughtExceptionHandler.handleMissingClass(callee,    parent,    functionName);    	non-compiled	[CE]  illegal  start  of  type	406	None	replace
1148	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1149	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1150	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1151	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1152	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);	  	non-compiled	[CE]  ';'  expected	420	None	add
1153	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1154	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1155	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1156	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(target,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1158	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    if(target!=  null)  {  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  }	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1160	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1161	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1162	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	420	1	add
1163	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [CE]  ';'  expected  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.copyNameAnnotations(callee,    target);    parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  ';'  expected	420	None	add
1164	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
1165	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target  ==  null  ||  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
1166	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  If(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  If(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    If(target!=  null  ||  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
1167	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target  >=  null  ||  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
1168	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target!=  null  ||  callee.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target!=  null  ||  callee.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target!=  null  ||  callee.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
1169	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target  >>  null  ||  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
1170	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target!=  null  ||  callee.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target!=  null  ||  callee.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target!=  null  ||  callee.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	54	None	add
1171	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  ||  callee.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  null  ||  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	54	None	add
1172	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  ||  callee.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    callee.getType()    ==    Token.STRING)    {    if(target  [Delete]  null  ||  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	54	None	add
1173	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	305	None	add
1174	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	305	None	add
1175	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	305	None	add
1176	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	305	None	add
1177	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	305	None	add
1178	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	305	None	add
1179	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ';'  expected	305	None	add
1180	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ')'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ')'  expected	305	None	add
1181	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [CE]  ')'  expected  [FE]                    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    qualifiedName.equals(target.getString()))    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  	non-compiled	[CE]  ')'  expected	305	None	add
1182	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.STRING)  {	  if(target    >>    null    &&    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	73	1	replace
1183	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.STRING)  {	  if(target    >>    null    &&    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	73	1	replace
1184	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.OBJECTLIT_EXPECTED)  {  [CE]  cannot  find  symbol  OBJECTLIT_EXPECTED  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.OBJECTLIT_EXPECTED)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.OBJECTLIT_EXPECTED)  {	  if(target    >>    null    &&    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  OBJECTLIT_EXPECTED	73	None	replace
1185	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1186	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1187	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1188	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1189	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1190	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1191	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1192	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	448	None	add
1193	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	206	None	replace
1194	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	206	None	replace
1195	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	206	None	replace
1196	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(functionName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	206	None	replace
1197	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	206	None	replace
1198	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1199	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(functionName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	158	1	replace
1200	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(functionName))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(functionName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	158	1	replace
1201	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	158	1	replace
1202	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	158	1	replace
1203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
1204	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
1205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
1206	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
1207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  >  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
1208	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0  ||  className.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  >  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	158	1	replace
1209	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  <  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	158	1	replace
1210	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0  ||  className.equals(qualifiedName))  {  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  <  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	compilable	  [FE]  NullPointerException  	158	1	replace
1211	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  name.equals(qualifiedName))  {  [CE]  cannot  find  symbol  name  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  name.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  ==  0  ||  name.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol  name	158	None	replace
1212	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target!=  node  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	289	None	add
1213	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  node  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	289	None	add
1214	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  node  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target  >=  node  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	289	None	add
1215	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  node  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target  >>  node  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	289	None	add
1216	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  If(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  If(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    If(target!=  node  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	289	None	add
1217	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target!=  node  ||  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target!=  node  ||  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target!=  node  ||  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	289	None	add
1218	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target!=  node  ||  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target!=  node  ||  target.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target!=  node  ||  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	289	None	add
1219	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  [Delete]  node  ||  target.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  [Delete]  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target  [Delete]  node  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	289	None	add
1220	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  node  ||  target.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    node    ||    target.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  node  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	289	None	add
1221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(functionName))  {	  if(target    ==    null    &&    target.getString().equals(functionName))    {    	compilable	  [FE]  AssertionFailedError  	265	1	replace
1222	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(functionName))  {	  if(target    ==    null    &&    target.getString().equals(functionName))    {    	compilable	  [FE]  AssertionFailedError  	265	1	replace
1223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(functionName))  {	  if(target    ==    null    &&    target.getString().equals(functionName))    {    	compilable	  [FE]  AssertionFailedError  	265	1	replace
1224	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  &&  target.getString().equals(functionName))  {	  if(target    ==    null    &&    target.getString().equals(functionName))    {    	compilable	  [FE]  AssertionFailedError  	265	1	replace
1225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().equals(functionName))  {	  if(target    ==    null    &&    target.getString().equals(functionName))    {    	compilable	  [FE]  AssertionFailedError  	265	1	replace
1226	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().equals(functionName))  {	  if(target    ==    null    &&    target.getString().equals(functionName))    {    	compilable	  [FE]  AssertionFailedError  	265	1	replace
1227	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	5	None	replace
1228	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	5	None	replace
1229	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	5	None	replace
1230	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	5	None	replace
1231	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  target.getClass();  if(!className.equals(functionName))  {  className  =  callee.getString();  }	  Class    <?>    className    =    target.getClass();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	5	None	replace
1232	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getClass();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	5	None	replace
1233	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString()    	non-compiled	[CE]  not  a  statement	343	None	replace
1234	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString()    	non-compiled	[CE]  not  a  statement	343	None	replace
1235	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString()    	non-compiled	[CE]  not  a  statement	343	None	replace
1236	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1237	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1238	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    Node  parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	non-compiled	[CE]  ';'  expected	90	None	add
1239	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	non-compiled	[CE]  cannot  find  symbol	90	None	add
1240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1241	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1243	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1244	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1245	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1246	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  node.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    node.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1247	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  node.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  node.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    node.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1248	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1249	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    NodeUtil.removeChild(parent,  target);  NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	90	1	add
1250	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  Parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [CE]  cannot  find  symbol  Parent  [FE]                    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  Parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        NodeUtil.removeChild(parent,    target);    Parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);	  	non-compiled	[CE]  cannot  find  symbol  Parent	90	None	add
1251	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target    [Delete]    null    &&    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	395	None	replace
1252	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild()  /  1;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getFirstChild()  /  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild()  /  1;	  Name    target    =    callee.getFirstChild()    +    1;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1253	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild(),  qualifiedName  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getFirstChild(),  qualifiedName  +  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild(),  qualifiedName  +  1;	  Name    target    =    callee.getFirstChild()    +    1;    	non-compiled	[CE]  	117	None	replace
1254	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild(),  functionName  +  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getFirstChild(),  functionName  +  1;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild(),  functionName  +  1;	  Name    target    =    callee.getFirstChild()    +    1;    	non-compiled	[CE]  	117	None	replace
1255	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild(),  qualifiedName);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Name  target  =  callee.getFirstChild(),  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild(),  qualifiedName);	  Name    target    =    callee.getFirstChild()    +    1;    	non-compiled	[CE]  	117	None	replace
1256	[BUG]  [BUGGY]  parent.replaceChild(node,  callee,  factory);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee,  factory);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee,  factory);	  parent.replaceChild(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
1257	[BUG]  [BUGGY]  parent.replaceChild(node,  callee,  sourceName);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee,  sourceName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee,  sourceName);	  parent.replaceChild(node,    callee);    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
1258	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ';'  expected	280	None	add
1259	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    if(target  ==  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ';'  expected	280	None	add
1260	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  >=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  >=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    if(target  >=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ';'  expected	280	None	add
1261	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  If(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  If(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    If(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ';'  expected	280	None	add
1262	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target!=  null  &&  target.getType()  >=  Token.OBJECTLIT)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target!=  null  &&  target.getType()  >=  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    if(target!=  null  &&  target.getType()  >=  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ';'  expected	280	None	add
1263	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  >>  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  >>  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    if(target  >>  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ';'  expected	280	None	add
1264	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target!=  null  &&  target.getType()  >>  Token.OBJECTLIT)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target!=  null  &&  target.getType()  >>  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    if(target!=  null  &&  target.getType()  >>  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ';'  expected	280	None	add
1265	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.OBJECTLIT)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  ')'  expected	280	None	add
1266	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(!functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	232	None	replace
1267	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getFirstChild();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(!functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	232	None	replace
1268	[BUG]  [BUGGY]  final  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  final  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	final  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(!functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	232	None	replace
1269	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getClass();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getClass();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getClass();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(!functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	232	None	replace
1270	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	292	None	replace
1271	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	292	None	replace
1272	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	292	None	replace
1273	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	292	None	replace
1274	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	292	None	replace
1275	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	292	None	replace
1276	[BUG]  [BUGGY]  if(target!=  null  &&  call.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  call  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  call.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  call.getType()  ==  Token.NAME)  {	  if(target    >=    null    &&    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  call	243	None	replace
1277	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1278	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFirstChild();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFirstChild();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1279	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "class "))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "class "))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals( "class "))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1280	[BUG]  [BUGGY]  Class  <?>  className  =  target.getLocalQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getLocalQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getLocalQualifiedName();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }	  Class    <?>    className    =    target.getString();    if(qualifiedName.equals(   "class   "))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1281	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	331	None	replace
1282	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	331	None	replace
1283	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	331	None	replace
1284	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	331	None	replace
1285	[BUG]  [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null)  {  Class  <?>  className  =  callee.getString();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	331	None	replace
1286	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(ClassName.equals(functionName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	331	None	replace
1287	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getFirstChild();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	331	None	replace
1288	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(FunctionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(FunctionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(FunctionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(ClassName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	331	None	replace
1289	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	249	None	replace
1290	[BUG]  [BUGGY]  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	249	None	replace
1291	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	249	None	replace
1292	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	249	None	replace
1293	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ';'  expected	249	None	replace
1294	[BUG]  [BUGGY]  final  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  final  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	final  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  Class    <?>    className    =    callee.getString();    if(functionName.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	229	None	replace
1295	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1296	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1297	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1298	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1299	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1300	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1301	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1302	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	425	None	add
1303	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
1304	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
1305	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getClass();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
1306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	452	1	replace
1307	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(functionName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	452	1	replace
1308	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(name))  {  [CE]  cannot  find  symbol  name  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(name))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(name))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol  name	452	None	replace
1309	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  name.equals(qualifiedName))  {  [CE]  cannot  find  symbol  name  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  name.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  name.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol  name	452	None	replace
1310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	452	1	replace
1311	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME    &&    className.equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	452	1	replace
1312	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    Callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	432	None	replace
1313	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    Callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	432	None	replace
1314	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  Callee.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  Callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  Callee.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    Callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	432	None	replace
1315	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  Callee.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    Callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	432	None	replace
1316	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }	  if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    Callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	432	None	replace
1317	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	365	None	replace
1318	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	365	None	replace
1319	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	365	None	replace
1320	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1321	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    if(target  ==  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1322	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  If(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  If(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    If(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1323	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target  >=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target  >=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    if(target  >=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1324	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    if(target!=  null  &&  target.getString().length()  >=  0  ||  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1325	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target  >>  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target  >>  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    if(target  >>  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1326	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  ==  0  ||  name.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  ==  0  ||  name.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    if(target!=  null  &&  target.getString().length()  ==  0  ||  name.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1327	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  ==  0  ||  ClassName.equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  if(target!=  null  &&  target.getString().length()  ==  0  ||  ClassName.equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0    ||    className.equals(qualifiedName))    {    if(target!=  null  &&  target.getString().length()  ==  0  ||  ClassName.equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	157	None	add
1328	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  if(target!=  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1329	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1330	[BUG]  [BUGGY]  Node  target  =  node.getNext();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getNext();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext();  if(target!=  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1331	[BUG]  [BUGGY]  Node  target  =  node.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1332	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  className  =  callee.getString();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext();  className  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  className  =  callee.getString();	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1333	[BUG]  [BUGGY]  Node  target  =  callee.getParent();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getParent();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getParent();  if(target!=  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1334	[BUG]  [BUGGY]  Node  target  =  callee.getParent();  if(target  ==  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getParent();  if(target  ==  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getParent();  if(target  ==  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1335	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  if(target  >=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext();  if(target  >=  null)  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  if(target  >=  null)  {  className  =  callee.getString();  }	  Node    target    =    parent.getNext();    if(target    ==    null)    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	455	None	replace
1336	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    if(target!=  null  ||  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	197	None	add
1337	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    if(target  ==  null  ||  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	197	None	add
1338	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  If(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  If(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    If(target!=  null  ||  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	197	None	add
1339	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  >=  null  ||  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  >=  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    if(target  >=  null  ||  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	197	None	add
1340	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  >>  null  ||  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  >>  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    if(target  >>  null  ||  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	197	None	add
1341	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target!=  null  ||  target.getType()  >=  Token.VAR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target!=  null  ||  target.getType()  >=  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    if(target!=  null  ||  target.getType()  >=  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	197	None	add
1342	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target!=  null  ||  target.getType()  >>  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target!=  null  ||  target.getType()  >>  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    if(target!=  null  ||  target.getType()  >>  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	197	None	add
1343	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.VAR)    {    if(target  [BUGGY]  null  ||  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ')'  expected	197	None	add
1344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
1345	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
1346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
1347	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	172	1	replace
1348	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	230	None	replace
1349	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	230	None	replace
1350	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	230	None	replace
1351	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent    ==    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	230	None	replace
1352	[BUG]  [BUGGY]  Node  target  =  caller.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  caller.getParent();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  caller.getParent();	  Node    target    =    caller.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1353	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild();  if(target  >=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getLastChild();  if(target  >=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild();  if(target  >=  null)  {  className  =  target.getString();  }	  Node    target    =    node.getLastChild();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
1354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    ==    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	179	1	replace
1355	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target    ==    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	179	1	replace
1356	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  if(target  >=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  callee.getNext();  if(target  >=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  if(target  >=  null)  {  className  =  target.getString();  }	  Node    target    =    parent.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
1357	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getString();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  callee.getString();	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    	non-compiled	[CE]  not  a  statement	377	None	replace
1358	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  target.getString();	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    	non-compiled	[CE]  not  a  statement	377	None	replace
1359	[BUG]  [BUGGY]  Class  <?>  className  =  node.getString();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  node.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  node.getString();	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    	non-compiled	[CE]  illegal  start  of  type	377	None	replace
1360	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getQualifiedName();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getQualifiedName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  parent.getQualifiedName();	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    	non-compiled	[CE]  not  a  statement	377	None	replace
1361	[BUG]  [BUGGY]  Class  <?>  className  =  name.getString();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  name.getString();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  name.getString();	  parent    ==    null)    {    Class    <?>    className    =    parent.getString();    	non-compiled	[CE]  illegal  start  of  type	377	None	replace
1362	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1363	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1364	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1365	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1366	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1367	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1368	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1369	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	  parent    ==    null    &&    parent.getType()    ==    Token.GETPROP)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	7	None	replace
1370	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target!=  null  &&  target.getString().length()  >  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target!=  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    if(target!=  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ';'  expected	149	None	add
1371	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  ==  null  &&  target.getString().length()  >  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  ==  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    if(target  ==  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ';'  expected	149	None	add
1372	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  >=  null  &&  target.getString().length()  >  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  >=  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    if(target  >=  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ';'  expected	149	None	add
1373	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  If(target!=  null  &&  target.getString().length()  >  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  If(target!=  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    If(target!=  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ';'  expected	149	None	add
1374	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  >>  null  &&  target.getString().length()  >  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  >>  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    if(target  >>  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ';'  expected	149	None	add
1375	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  >  0)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    if(target  [BUGGY]  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ')'  expected	149	None	add
1376	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  [Delete]  null  &&  target.getString().length()  >  0)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  [Delete]  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    if(target  [Delete]  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ')'  expected	149	None	add
1377	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  [BUG]  null  &&  target.getString().length()  >  0)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  if(target  [BUG]  null  &&  target.getString().length()  >  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    >    0)    {    if(target  [BUG]  null  &&  target.getString().length()  >  0)  {	  	non-compiled	[CE]  ')'  expected	149	None	add
1378	[BUG]  [BUGGY]  parent.replaceChild(node,  callee,  name);  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  callee,  name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee,  name);	  parent.replaceChild(callee,    target,    name);    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
1379	[BUG]  [BUGGY]  parent.replaceChild(target,  callee,  name);  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  callee,  name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  callee,  name);	  parent.replaceChild(callee,    target,    name);    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
1380	[BUG]  [BUGGY]  parent.replaceChild(callee,  node,  name);  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  node,  name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  node,  name);	  parent.replaceChild(callee,    target,    name);    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
1381	[BUG]  [BUGGY]  parent.replaceChild(node,  target,  name);  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(node,  target,  name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target,  name);	  parent.replaceChild(callee,    target,    name);    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
1382	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  name,  className);  [CE]  illegal  start  of  type  [FE]                            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target,  name,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  name,  className);	  parent.replaceChild(callee,    target,    name);    	non-compiled	[CE]  illegal  start  of  type	217	None	replace
1383	[BUG]  [BUGGY]  Node  target  =  node.getNext(),  functionName;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Node  target  =  node.getNext(),  functionName;  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext(),  functionName;	  Node    target    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	460	None	replace
1384	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1385	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1386	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    If(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1387	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    if(target  >=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1388	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  >=  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1389	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  >=  Token.CALL)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  >=  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  >=  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1390	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    if(target  >>  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1391	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    if(target!=  null  &&  target.getType()  >>  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  ';'  expected	427	None	add
1392	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    if(target!=  null  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	235	None	add
1393	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    if(target  ==  null  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	235	None	add
1394	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  If(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  If(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    If(target!=  null  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	235	None	add
1395	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  >=  null  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  >=  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    if(target  >=  null  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	235	None	add
1396	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  >>  null  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  >>  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    if(target  >>  null  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	235	None	add
1397	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  ||  target.getType()  >=  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  ||  target.getType()  >=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    if(target!=  null  ||  target.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	235	None	add
1398	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  ||  target.getType()  >>  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  ||  target.getType()  >>  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    if(target!=  null  ||  target.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	235	None	add
1399	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.NAME)    {    if(target  [BUGGY]  null  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ')'  expected	235	None	add
1400	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1401	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1402	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    If(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1403	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    if(target  >=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1404	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  >=  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1405	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1406	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    if(target  >>  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1407	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  >>  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	56	None	add
1408	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	335	None	replace
1409	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {	  parent    ==    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    callee.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString()    	non-compiled	[CE]  not  a  statement	335	None	replace
1410	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	443	None	replace
1411	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getParent();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getParent();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getParent();  if(target!=  className)  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	443	None	replace
1412	[BUG]  [BUGGY]  Class  <?>  target  =  node.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  node.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  node.getClass();  if(target!=  className)  {  className  =  target.getString();  }	  Class    <?>    target    =    callee.getClass();    if(target!=    className)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	443	None	replace
1413	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	363	None	replace
1414	[BUG]  [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	363	None	replace
1415	[BUG]  [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	363	None	replace
1416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1417	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1419	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1421	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1423	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1424	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1425	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1426	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(name))  {  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(name))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(name))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  cannot  find  symbol  name	424	None	replace
1427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1428	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	424	1	replace
1429	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1430	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1431	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()!=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    if(target  ==  null  &&  target.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1432	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1433	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  If(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  If(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    If(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1434	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  >=  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  >=  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    if(target  ==  null  &&  target.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1435	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    If(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1436	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()    ==    Token.NAME)    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	233	None	add
1437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1438	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1440	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1442	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1444	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1446	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1448	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1450	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1452	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.CALL  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR    ||    target.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	428	1	replace
1453	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	268	None	add
1454	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP    &&    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	268	None	add
1455	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP    &&    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	268	None	add
1456	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP    &&    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	268	None	add
1457	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >=  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	268	None	add
1458	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >>  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	268	None	add
1459	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.GETPROP    &&    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	268	None	add
1460	[BUG]  [BUGGY]  Class  <?>  className  =  target.getRawClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getRawClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getRawClass();	  Class    <?>    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1461	[BUG]  [BUGGY]  Class  <?>  className  =  target.getFunctionName();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getFunctionName();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getFunctionName();	  Class    <?>    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1462	[BUG]  [BUGGY]  Class  <?>  className  =  target.getReturnType();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getReturnType();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getReturnType();	  Class    <?>    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1463	[BUG]  [BUGGY]  Class  <?>  className  =  target.getType();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  className  =  target.getType();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getType();	  Class    <?>    className    =    target.getString();    	non-compiled	[CE]  illegal  start  of  type	208	None	replace
1464	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >>  0)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().length()  >>  0)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  >>  0)  {	  if(target!=    null    &&    target.getString().length()    >=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	148	None	replace
1465	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    if(target!=  null  &&  target.getString().equals(   "prototype   "))  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1466	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target!=  null  &&  target.getString().equals( ".prototype   "))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target!=  null  &&  target.getString().equals( ".prototype   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    if(target!=  null  &&  target.getString().equals( ".prototype   "))  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1467	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target  ==  null  &&  target.getString().equals(   "prototype   "))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target  ==  null  &&  target.getString().equals(   "prototype   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    if(target  ==  null  &&  target.getString().equals(   "prototype   "))  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1468	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  If(target!=  null  &&  target.getString().equals(   "prototype   "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  If(target!=  null  &&  target.getString().equals(   "prototype   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    If(target!=  null  &&  target.getString().equals(   "prototype   "))  {	  	non-compiled	[CE]  	270	None	add
1469	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target!=  null  &&  target.getString().equals( ",prototype   "))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target!=  null  &&  target.getString().equals( ",prototype   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    if(target!=  null  &&  target.getString().equals( ",prototype   "))  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1470	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target  >=  null  &&  target.getString().equals(   "prototype   "))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getString().equals(   "prototype   "))  {  if(target  >=  null  &&  target.getString().equals(   "prototype   "))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(   "prototype   "))    {    if(target  >=  null  &&  target.getString().equals(   "prototype   "))  {	  	non-compiled	[CE]  ';'  expected	270	None	add
1471	[BUG]  [BUGGY]  parent.replaceChild(callee,  callee);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  callee);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  callee);	  parent.replaceChild(target,    callee);    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1472	[BUG]  [BUGGY]  parent.addChildToFront(callee,  target);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.addChildToFront(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.addChildToFront(callee,  target);	  parent.replaceChild(target,    callee);    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1473	[BUG]  [BUGGY]  parent.addChildToBack(callee,  target);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.addChildToBack(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.addChildToBack(callee,  target);	  parent.replaceChild(target,    callee);    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1474	[BUG]  [BUGGY]  parent.replaceChild(target,  callee,  functionName);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(target,  callee,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  callee,  functionName);	  parent.replaceChild(target,    callee);    	non-compiled	[CE]  illegal  start  of  type	213	None	replace
1475	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	133	None	replace
1476	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(parent!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  callee.getClass();  if(parent!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(parent!=  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1477	[BUG]  [BUGGY]  Class  <?>  target  =  node.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  node.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  node.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1478	[BUG]  [BUGGY]  Class  <?>  target  =  call.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  call.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  call.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  Class    <?>    target    =    parent.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1479	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	237	None	add
1480	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	237	None	add
1481	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	237	None	add
1482	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	237	None	add
1483	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >=  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	237	None	add
1484	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	237	None	add
1485	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME    ||    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getType()  >>  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	237	None	add
1486	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1487	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1489	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1491	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1493	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1494	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  NullPointerException  	59	1	replace
1495	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  NullPointerException  	59	1	replace
1496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1497	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]              NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1499	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]                NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  callee.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	59	1	replace
1500	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  NullPointerException  	59	1	replace
1501	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.STRING    ||    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  NullPointerException  	59	1	replace
1502	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target  ==  null  &&  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1503	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target!=  null  &&  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1504	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  ==  null  &&  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  ==  null  &&  target.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target  ==  null  &&  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1505	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  ==  null  &&  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  ==  null  &&  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target  ==  null  &&  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1506	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()  >>  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target!=  null  &&  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1507	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1508	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target!=  null  &&  target.getType()  >=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target!=  null  &&  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1509	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  >=  null  &&  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  if(target  >=  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    if(target  >=  null  &&  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1510	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  If(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  If(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    If(target  ==  null  &&  target.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	76	None	add
1511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  target  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  target  &&  target.getType()  ==  Token.STRING)  {	  if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
1512	[BUG]  [BUGGY]  if(target!=  target  &&  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  target  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  target  &&  target.getType()  ==  Token.STRING)  {	  if(target    ==    null    &&    target.getType()!=    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	77	1	replace
1513	[BUG]  [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	287	None	replace
1514	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  className  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	287	None	replace
1515	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString()  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString()	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	287	None	replace
1516	[BUG]  [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent  ==  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  callee.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	287	None	replace
1517	[BUG]  [BUGGY]  if(target!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	  parent!=    null    &&    parent.getType()    ==    Token.NAME)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	287	None	replace
1518	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  functionName,  qualifiedName);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target,  functionName,  qualifiedName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  functionName,  qualifiedName);	  parent.replaceChild(callee,    target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
1519	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  functionName,  className);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target,  functionName,  className);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  functionName,  className);	  parent.replaceChild(callee,    target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
1520	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  functionName,  name);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  parent.replaceChild(callee,  target,  functionName,  name);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  functionName,  name);	  parent.replaceChild(callee,    target,    functionName);    	non-compiled	[CE]  illegal  start  of  type	212	None	replace
1521	[BUG]  [BUGGY]  Class  <?>  target  =  node.getClass();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  node.getClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  node.getClass();	  Class    <?>    target    =    target.getClass();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1522	[BUG]  [BUGGY]  Class  <?>  target  =  call.getClass();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  call.getClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  call.getClass();	  Class    <?>    target    =    target.getClass();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1523	[BUG]  [BUGGY]  Class  <?>  target  =  target.getParent();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  target.getParent();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  target.getParent();	  Class    <?>    target    =    target.getClass();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1524	[BUG]  [BUGGY]  Class  <?>  target  =  this.target.getClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  this.target.getClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  this.target.getClass();	  Class    <?>    target    =    target.getClass();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1525	[BUG]  [BUGGY]  Class  <?>  target  =  type.getClass();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  type.getClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  type.getClass();	  Class    <?>    target    =    target.getClass();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1526	[BUG]  [BUGGY]  Class  <?>  target  =  className.getClass();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  Class  <?>  target  =  className.getClass();  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  className.getClass();	  Class    <?>    target    =    target.getClass();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
1527	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
1528	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
1529	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
1530	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
1531	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    if(target!=  null)  {  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }	  	non-compiled	[CE]  ';'  expected	86	None	add
1532	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  ==  null)  {  className  =  target.getString();  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
1533	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  ==  null)  {  className  =  target.getString();  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  ==  null)  {  className  =  target.getString();  }	  	compilable	  [FE]  IllegalArgumentException  	86	1	add
1534	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  Parent  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  Parent  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    Parent  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }	  	non-compiled	[CE]  ';'  expected	86	None	add
1535	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  >=  null)  {  className  =  target.getString();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  >=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target  >=  null)  {  className  =  target.getString();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	86	None	add
1536	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  Node  target  =  callee.getNext();  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  Node  target  =  callee.getNext();  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    Node  target  =  callee.getNext();  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }	  	non-compiled	[CE]  variable  target  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	86	None	add
1537	[BUG]  [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  call.getString();  }  [CE]  cannot  find  symbol  call  [FE]                  IllegalArgumentException    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]          parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  call.getString();  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	                parent.replaceChild(callee,        target);        parent.replaceChild(callee,    target);    if(target!=    null)    {    className    =    target.getString();    }    parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  call.getString();  }	  	non-compiled	[CE]  cannot  find  symbol  call	86	None	add
1538	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getString().equals(functionName))  {	  if(target!=    null    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	273	1	replace
1539	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  ==  null  ||  target.getString().equals(functionName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getString().equals(functionName))  {	  if(target!=    null    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	273	1	replace
1540	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	273	1	replace
1541	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	273	1	replace
1542	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target  >=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    ||    target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	273	None	replace
1543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className  ==  null  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(className  ==  null  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	273	1	replace
1544	[BUG]  [BUGGY]  if(className  ==  null  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(className  ==  null  ||  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(className  ==  null  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    ||    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	273	1	replace
1545	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=    null    &&    Target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  ';'  expected	367	None	replace
1546	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=    null    &&    Target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  ';'  expected	367	None	replace
1547	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=    null    &&    Target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  ';'  expected	367	None	replace
1548	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=    null    &&    Target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  ';'  expected	367	None	replace
1549	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {  [BUGGY]      className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=    null    &&    Target.getString().equals(qualifiedName))    {    	non-compiled	[CE]  ';'  expected	367	None	replace
1550	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  target,  functionName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  target,  functionName);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  target,  functionName);	  aughtExceptionHandler.handleMissingClassName(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	376	None	replace
1551	[BUG]  [BUGGY]  if(target!=  null)  {  aughtExceptionHandler.handleMissingClassName(callee,  target);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  aughtExceptionHandler.handleMissingClassName(callee,  target);  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  aughtExceptionHandler.handleMissingClassName(callee,  target);  }	  aughtExceptionHandler.handleMissingClassName(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	376	None	replace
1552	[BUG]  [BUGGY]  if(target!=  null)  {  aughtExceptionHandler.handleMissingClassName(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  if(target!=  null)  {  aughtExceptionHandler.handleMissingClassName(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  aughtExceptionHandler.handleMissingClassName(callee,  target);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingClassName(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	376	None	replace
1553	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee,  target);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();      [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee,  target);  [BUGGY]      if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(node,  callee,  target);	  aughtExceptionHandler.handleMissingClassName(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	376	None	replace
