bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
2	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
3	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	29	None	replace
4	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
5	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
7	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
8	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	29	None	replace
9	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
10	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
11	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
12	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  If(target!=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    If(target!=  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
13	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >=  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >=  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
14	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  >>  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
15	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
16	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >>  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target!=  null  &&  target.getType()  >>  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target!=  null  &&  target.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
17	[BUG]  [BUGGY]  Node  parent  =  callee.getParent();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  parent  =  callee.getParent();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  parent  =  callee.getParent();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  Node  target  =  node.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getLastChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  Node  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getLastChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  Node  target  =  parent.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getLastChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  Node  target  =  parent.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getLastChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
23	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
24	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  >=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
25	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    If(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
26	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
27	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  >>  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
28	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  >>  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
29	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
30	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
31	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
32	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  ==  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
33	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  If(target!=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    If(target!=  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
34	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >=  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  >=  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
35	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  >>  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  >>  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
36	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [BUGGY]  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  [BUGGY]  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
37	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getString().equals(qualifiedName))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target  [Delete]  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target  [Delete]  null  &&  target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
38	[BUG]  [BUGGY]  Node  target  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getLastChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getLastChild();	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  Node  target  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getLastChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getLastChild();	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  Node  target  =  callee.next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.next();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.next();	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  Node  target  =  callee.getPreviousChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getPreviousChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getPreviousChild();	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild(),  functionName;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getLastChild(),  functionName;  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild(),  functionName;	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  Node  target  =  callee.getLastChild(),  functionName);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getLastChild(),  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getLastChild(),  functionName);	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  Node  target  =  callee.getNextChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNextChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNextChild();	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  Node  target  =  callee.getParent();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getParent();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getParent();	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  Node  target  =  callee.getNext(),  functionName);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext(),  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext(),  functionName);	      Node    target    =    callee.getNext();    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  Node  target  =  callee.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext()  -  1;  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext()  -  1;	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  Node  target  =  callee.getNext(),  qualifiedName);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext(),  qualifiedName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext(),  qualifiedName);	      Node    target    =    callee.getNext();    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  Node  target  =  callee.getNext(),  functionName;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext(),  functionName;  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext(),  functionName;	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
51	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
53	[BUG]  [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
55	[BUG]  [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  callee.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
57	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
58	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
59	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
60	[BUG]  [BUGGY]  if(target!=  null  &&  call.getType()  ==  Token.STRING)  {  [CE]  cannot  find  symbol  call  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  call.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  call.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  cannot  find  symbol  call	39	None	replace
61	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
62	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
63	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  If(target!=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    If(target!=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
64	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  >=  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
65	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  ||  target.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
66	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  >>  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
67	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target!=  null  ||  target.getType()  >>  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target!=  null  ||  target.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
68	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  null  ||  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	19	None	add
69	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	20	1	replace
70	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	20	1	replace
71	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	replace
72	[BUG]  [BUGGY]  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  [Delete]  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	20	None	replace
73	[BUG]  [BUGGY]  if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >>  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	20	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  ||  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
75	[BUG]  [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  ||  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  ||  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
77	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()!=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()!=  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
78	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
79	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
80	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  [CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]      IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    Node  parent  =  callee.getParent();  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	17	None	add
81	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
82	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
83	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
84	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
85	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  Node  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    Node  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  ';'  expected	17	None	add
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
87	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    parent.replaceChild(callee,  target);  if(target!=  null)  {  className  =  target.getString();  }	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
88	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  target);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,  target);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
89	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.replaceChild(callee,  target);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
90	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
91	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
92	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
93	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
94	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
95	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
96	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
97	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
98	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
99	[BUG]  [BUGGY]  Node  target  =  node.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  Node  target  =  parent.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getNext();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
101	[BUG]  [BUGGY]  Node  target  =  callee.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getParent();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getParent();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
102	[BUG]  [BUGGY]  Node  target  =  callee.getNext();  if(parent!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext();  if(parent!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext();  if(parent!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
103	[BUG]  [BUGGY]  Node  target  =  node.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getLastChild();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
104	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
105	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getFirstChild();	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
106	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
107	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
108	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getLastChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
109	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
110	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
111	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getFirstChild();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
112	[BUG]  [BUGGY]  Name  target  =  callee.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee.getLastChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getLastChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
113	[BUG]  [BUGGY]  Name  target  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  node.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  node.getFirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
114	[BUG]  [BUGGY]  Name  target  =  callee.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee.getNext();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getNext();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
115	[BUG]  [BUGGY]  Name  target  =  callEe.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callEe.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callEe.getFirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
116	[BUG]  [BUGGY]  Name  target  =  callee.getfirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee.getfirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getfirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
117	[BUG]  [BUGGY]  Name  target  =  callee.getFirstChild()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee.getFirstChild()  +  1;  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.getFirstChild()  +  1;	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
118	[BUG]  [BUGGY]  Name  target  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  parent.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  parent.getFirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
119	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
120	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
121	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  >=  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
122	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  If(target!=  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    If(target!=  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
123	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >=  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target!=  null  &&  target.getType()  >=  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
124	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  >>  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  >>  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
125	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target!=  null  &&  target.getType()  >>  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target!=  null  &&  target.getType()  >>  Token.VAR)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
126	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  [BUGGY]  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ')'  expected	32	None	add
127	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  ')'  expected	32	None	add
128	[BUG]  [BUGGY]  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  Class  <?>  target  =  target.getClass();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  target.getClass();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  target.getClass();	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
130	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
131	[BUG]  [BUGGY]  Class  <?>  target  =  target.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  target.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  target.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
132	[BUG]  [BUGGY]  Class  <?>  target  =  target.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  target.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  target.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
133	[BUG]  [BUGGY]  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
134	[BUG]  [BUGGY]  Class  <?>  target  =  target.getClass();  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  target.getClass();  className  =  target.getString();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  target.getClass();  className  =  target.getString();	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
135	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
136	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
137	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
138	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
139	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
140	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  className  =  target.getString();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  className  =  target.getString();	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
141	[BUG]  [BUGGY]  Node  target  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getFirstChild();	      Node    target    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
142	[BUG]  [BUGGY]  Node  target  =  callEe.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callEe.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callEe.getFirstChild();	      Node    target    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
143	[BUG]  [BUGGY]  Node  target  =  call.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  call.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  call.getFirstChild();	      Node    target    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
144	[BUG]  [BUGGY]  Node  target  =  caller.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  caller.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  caller.getFirstChild();	      Node    target    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
146	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
148	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  >=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
150	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  >  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  >  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
152	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  <  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
154	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  <  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  <  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().length()!=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
156	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().length()!=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().length()!=  0)  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
157	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	35	1	replace
158	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  ==  0  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	35	1	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
160	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().length()  ==  0  ||  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().length()    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	35	1	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
162	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
164	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.FUNCTION)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
166	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
168	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
170	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
172	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
173	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
174	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
175	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
176	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
177	[BUG]  [BUGGY]  Node  target  =  node.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
178	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
179	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
180	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  >=  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
181	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  If(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  If(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    If(target!=  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
182	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  parent.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
183	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  >>  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
184	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  parent.getType()  >>  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  parent.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
185	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	36	None	add
186	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
187	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  ==  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  ==  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
188	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  >=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
189	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >=  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
190	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  If(target!=  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    If(target!=  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
191	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >>  null  &&  target.getString().length()  ==  0)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  >>  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  >>  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
192	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  >>  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  >>  0)  {	  	non-compiled	[CE]  ';'  expected	34	None	add
193	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  ==  0)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [BUGGY]  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  [BUGGY]  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	34	None	add
194	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [Delete]  null  &&  target.getString().length()  ==  0)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target  [Delete]  null  &&  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target  [Delete]  null  &&  target.getString().length()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	34	None	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
196	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
198	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
200	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.FUNCTION  ||  target.getType()  ==  Token.VAR)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
202	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.BLOCK)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
204	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
205	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
206	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
207	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
208	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
209	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
210	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
211	[BUG]  [BUGGY]  parent.replaceChild(node,  target);  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(node,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  target);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
212	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  functionName);  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target,  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  functionName);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
213	[BUG]  [BUGGY]  parent.replaceChild(target,  callee);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(target,  callee);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(target,  callee);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
214	[BUG]  [BUGGY]  parent.replaceChild(node,  callee);  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(node,  callee);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(node,  callee);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
215	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  qualifiedName);  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target,  qualifiedName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  qualifiedName);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
216	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  factory);  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target,  factory);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  factory);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
217	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  name);  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target,  name);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  name);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
218	[BUG]  [BUGGY]  parent.replaceChild(callee,  target,  className);  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target,  className);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target,  className);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
219	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
220	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
221	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
222	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
223	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
224	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
225	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
226	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(qualifiedName.equals( "class "))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
227	[BUG]  [BUGGY]  Node  target  =  callee.getChildren();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getChildren();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getChildren();	      Node    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
228	[BUG]  [BUGGY]  Node  target  =  callee.getChildCount();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getChildCount();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getChildCount();	      Node    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
229	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(functionName.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
230	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	27	None	replace
231	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
232	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(!functionName.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
234	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
236	[BUG]  [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
238	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
240	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
242	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
243	[BUG]  [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  >=  null  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	6	None	replace
244	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
245	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  NullPointerException  	6	1	replace
246	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
247	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  ==  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
248	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  >=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
249	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    If(target!=  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
250	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >=  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target!=  null  &&  callee.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
251	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  >>  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  >>  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
252	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >>  Token.STRING)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target!=  null  &&  callee.getType()  >>  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target!=  null  &&  callee.getType()  >>  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
253	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [BUGGY]  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  [BUGGY]  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	38	None	add
254	[BUG]  [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  &&  callee.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  callee.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  &&  callee.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    if(target  [Delete]  null  &&  callee.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	38	None	add
255	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
256	[BUG]  [BUGGY]  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getString();  if(functionName.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
257	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
258	[BUG]  [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
259	[BUG]  [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getClass();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
260	[BUG]  [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  target.getQualifiedName();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
261	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
263	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
265	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(functionName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().equals(functionName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
267	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
269	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.GETPROP  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
271	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype "))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( "prototype "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "prototype "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
273	[BUG]  [BUGGY]  if(target!=  null  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
275	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(className))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals(className))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
276	[BUG]  [BUGGY]  Node  target  =  node.getNext();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getNext();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext();  if(target  ==  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getNext();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
277	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  {  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().length()  ==  0)  {  if(target!=  null  &&  target.getString().length()  {  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().length()    ==    0)    {    if(target!=  null  &&  target.getString().length()  {  0)  {	  	non-compiled	[CE]  ')'  expected	34	None	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
279	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.EMPTY)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
281	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.OBJECTLIT)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
282	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target!=  null  &&  target.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
283	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
284	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.EXPR_RESULT)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
285	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	21	None	replace
286	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	21	None	replace
287	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	21	None	replace
288	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	21	None	replace
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  node  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
290	[BUG]  [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  node  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  node  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
291	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	23	None	replace
292	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	23	None	replace
293	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	23	None	replace
294	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString()	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	23	None	replace
295	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  callee.getString	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	23	None	replace
296	[BUG]  [BUGGY]  Node  target  =  callee.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext()  +  1;  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext()  +  1;	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
297	[BUG]  [BUGGY]  Node  target  =  parent.getNext();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getNext();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext();	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
298	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  [CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  Node  parent  =  callee.getParent();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    Node  parent  =  callee.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	17	None	add
299	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,  target);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
300	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(parent,  target);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.replaceChild(parent,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.replaceChild(parent,  target);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
301	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent);  parent.replaceChild(callee,  target);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.removeChild(parent);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.removeChild(parent);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	17	None	add
302	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  {  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.FUNCTION)  {  if(target!=  null  &&  target.getType()  {  Token.FUNCTION)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    if(target!=  null  &&  target.getType()  {  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
303	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
304	[BUG]  [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(parent!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
305	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
306	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	37	1	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	37	1	replace
308	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  callee.getType()  ==  Token.GETPROP)  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	37	1	replace
309	[BUG]  [BUGGY]  Node  target  =  callee.getNextChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNextChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNextChild();  if(target!=  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
310	[BUG]  [BUGGY]  Node  target  =  parent.getNext();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getNext();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext();  if(target!=  null)  {  className  =  callee.getString();  }	      Node    target    =    callee.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target  ==  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
312	[BUG]  [BUGGY]  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  ==  null  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  ==  null  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
313	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	22	None	replace
314	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	22	None	replace
315	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  target.getClass();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	22	None	replace
316	[BUG]  [BUGGY]  Node  target  =  parent.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getLastChild();  if(target  ==  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getLastChild();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
317	[BUG]  [BUGGY]  Name  target  =  callee,  target.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee,  target.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee,  target.getFirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  	13	None	replace
318	[BUG]  [BUGGY]  Name  target  =  call.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  call.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  call.getFirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
319	[BUG]  [BUGGY]  Node  target  =  callee.getfirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getfirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getfirstChild();	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
320	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
321	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
322	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
323	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
324	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
326	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
327	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	27	None	replace
328	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	27	None	replace
329	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	27	None	replace
330	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	27	None	replace
331	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(ClassName.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
332	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
333	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
334	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
335	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
336	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
337	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
338	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString()	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  not  a  statement	29	None	replace
339	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
340	[BUG]  [BUGGY]  Node  target  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getParent();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getParent();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal());  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  ObjectTraversal());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
342	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
343	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString()  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString()	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
344	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  parent.getString();  if(className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
345	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(qualifiedName))  {  [CE]  cannot  find  symbol  name  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  name.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  name	6	None	replace
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
347	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  functionName.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
349	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  qualifiedName.equals(target.getQualifiedName()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  node  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
351	[BUG]  [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  node  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  node  &&  target.getType()  ==  Token.NAME)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
352	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
353	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
354	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
355	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.NAME)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
356	[BUG]  [BUGGY]  parent.replaceChild(callee,  target).replaceChild(node,  callee);  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target).replaceChild(node,  callee);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target).replaceChild(node,  callee);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
357	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  qualifiedName));  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  qualifiedName));  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  qualifiedName));	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
358	[BUG]  [BUGGY]  parent.replaceChild(callee,  target)&&  functionName.equals(qualifiedName);  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  target)&&  functionName.equals(qualifiedName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  target)&&  functionName.equals(qualifiedName);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  not  a  statement	18	None	replace
359	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  name));  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  name));  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  name));	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
360	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName));  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName));  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.GETPROP,  functionName));	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
361	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.NAME,  qualifiedName));  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  new  Node(Token.NAME,  qualifiedName));  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.NAME,  qualifiedName));	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
362	[BUG]  [BUGGY]  Node  target  =  parent.getNext();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getNext();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext();  if(target  ==  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getNext();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
363	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	28	None	replace
364	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	28	None	replace
365	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	28	None	replace
366	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  Class  <?>  className  =  target.getString();  if(className.equals(qualifiedName))  {  className  =  target.getString()	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	28	None	replace
367	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals(qualifiedName))  {  if(target!=  null  &&  Target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getString().equals(qualifiedName))    {    if(target!=  null  &&  Target.getString().equals(qualifiedName))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
368	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  className  =  target.getString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getFirstChild();  className  =  target.getString();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getFirstChild();  className  =  target.getString();	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
369	[BUG]  [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  callee.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  callee.getFirstChild();	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
370	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
371	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target!=  className)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
372	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target  >=  null)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target  >=  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getFirstChild();  if(target  >=  null)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	30	None	replace
373	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(qualifiedName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingName(qualifiedName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(qualifiedName);	      if(target!=    null)    {    Class    <?>    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
374	[BUG]  [BUGGY]  Class  <?>  className  =  parent.getString();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  className  =  parent.getString();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  className  =  parent.getString();	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
375	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  target);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  target);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
376	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  target);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  target);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
377	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getString();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  className  =  parent.getString();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  className  =  parent.getString();	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  not  a  statement	31	None	replace
378	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  parent,  functionName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  parent,  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  parent,  functionName);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
379	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  parent,  functionName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  parent,  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  parent,  functionName);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
380	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  functionName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClassName(target,  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(target,  functionName);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
381	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(target,  functionName);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingName(target,  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(target,  functionName);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    parent.getString();    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
382	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
383	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
384	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
385	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.STRING  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
386	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
387	[BUG]  [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(callee!=  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    callee.getType()    ==    Token.STRING)    {    	compilable	  [FE]  NullPointerException  	39	1	replace
388	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING)  {  if(target  [Delete]  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    if(target  [Delete]  null  &&  parent.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	36	None	add
389	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  target);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  target);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
390	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  parent,  className);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingName(callee,  parent,  className);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(callee,  parent,  className);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
391	[BUG]  [BUGGY]  Node  target  =  calledee.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  calledee.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  calledee.getFirstChild();	      Node    target    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
392	[BUG]  [BUGGY]  Node  target  =  nameNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  nameNode.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  nameNode.getFirstChild();	      Node    target    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
393	[BUG]  [BUGGY]  Node  target  =  parent.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getFirstChild();  if(target!=  null)  {  className  =  callee.getString();  }	      Node    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
394	[BUG]  [BUGGY]  Node  target  =  parent.getFirstChild();  if(callee!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getFirstChild();  if(callee!=  null)  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getFirstChild();  if(callee!=  null)  {  className  =  callee.getString();  }	      Node    target    =    callee.getFirstChild();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
395	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME)  {  if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    if(target  [Delete]  null  &&  target.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	37	1	replace
397	[BUG]  [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  parent.getType()  ==  Token.STRING  &&  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    parent.getType()    ==    Token.STRING)    {    	compilable	  [FE]  AssertionFailedError  	37	1	replace
398	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(callee,  target);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  NodeUtil.copyNameAnnotations(callee,  target);  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(callee,  target);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
399	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target,  parent);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  NodeUtil.copyNameAnnotations(target,  parent);  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target,  parent);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  target,  new  Reporter());  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeTraversal.traverse(compiler,  target,  new  Reporter());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
401	[BUG]  [BUGGY]  Node  next  =  callee.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  next  =  callee.getNext();  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  next  =  callee.getNext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
402	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  NodeUtil.copyNameAnnotations(parent,  target);  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(parent,  target);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
403	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(target);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  NodeUtil.copyNameAnnotations(target);  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	NodeUtil.copyNameAnnotations(target);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
404	[BUG]  [BUGGY]  Node  target  =  parent.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getFirstChild();  if(target  ==  null)  {  className  =  target.getString();  }	      Node    target    =    callee.getLastChild();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
405	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(node,  callee);	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
406	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  parent,  functionName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  parent,  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  parent,  functionName);	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
407	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  parent,  qualifiedName);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClass(callee,  parent,  qualifiedName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(callee,  parent,  qualifiedName);	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
408	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  parent,  qualifiedName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  parent,  qualifiedName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  parent,  qualifiedName);	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
409	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  qualifiedName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClassName(callee,  qualifiedName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(callee,  qualifiedName);	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
410	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClassName(node,  callee);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClassName(node,  callee);	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
411	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  className)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    target.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	22	None	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( " "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( " "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
413	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( " "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( " "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( " "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( "* "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
415	[BUG]  [BUGGY]  if(target!=  null  &&  target.getString().equals( "* "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getString().equals( "* "))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getString().equals( "* "))  {	  if(target!=    null    &&    target.getString().equals(qualifiedName))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
416	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
417	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  callee);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
418	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
419	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(parent,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
420	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	        parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
421	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee,  target);  parent.replaceChild(callee,  target);	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
422	[BUG]  [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee);  parent.replaceChild(callee,  target);  [CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]      parent.replaceChild(callee,  target);  NodeUtil.copyNameAnnotations(callee);  parent.replaceChild(callee,  target);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	        parent.replaceChild(callee,    target);    NodeUtil.copyNameAnnotations(callee);  parent.replaceChild(callee,  target);	  	non-compiled	[CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;	17	None	add
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
424	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getString().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
425	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  NullPointerException  	33	1	replace
426	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.STRING)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  NullPointerException  	33	1	replace
427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
428	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.VAR  ||  target.getType()  ==  Token.CALL)  {	  if(target!=    null    &&    target.getType()    ==    Token.VAR)    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
429	[BUG]  [BUGGY]  Name  target  =  callee.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee.removeFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.removeFirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
430	[BUG]  [BUGGY]  Name  target  =  callee,  parent.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee,  parent.getFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee,  parent.getFirstChild();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  	13	None	replace
431	[BUG]  [BUGGY]  Name  target  =  callee.cloneTree();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Name  target  =  callee.cloneTree();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Name  target  =  callee.cloneTree();	      Name    target    =    callee.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
432	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  Callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	29	None	replace
433	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  parent.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  parent.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(qualifiedName))  {  className  =  parent.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	29	None	replace
434	[BUG]  [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(functionName))  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null)  {  Class  <?>  className  =  callee.getString();  if(!className.equals(functionName))  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    className    =    target.getString();    if(!className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  variable  className  is  already  defined  in  method  extractClassNameIfGoog(Node,Node,String)	29	None	replace
435	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee.getString(),  functionName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingName(node,  callee.getString(),  functionName);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingName(node,  callee.getString(),  functionName);	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
436	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(node,  callee);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  aughtExceptionHandler.handleMissingClass(node,  callee);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	aughtExceptionHandler.handleMissingClass(node,  callee);	      if(target!=    null)    {    Class    <?>    className    =    callee.getString();    if(className.equals(qualifiedName))    {    className    =    callee.getString();    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
437	[BUG]  [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  qualifiedName));  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  Node.newString(Token.NAME,  qualifiedName));  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  Node.newString(Token.NAME,  qualifiedName));	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
438	[BUG]  [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  qualifiedName));  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  new  Node(Token.FUNCTION,  qualifiedName));  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  new  Node(Token.FUNCTION,  qualifiedName));	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
439	[BUG]  [BUGGY]  parent.replaceChild(callee,  node);  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent.replaceChild(callee,  node);  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent.replaceChild(callee,  node);	      parent.replaceChild(callee,    target);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
440	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target  ==  null  ||  className.equals(qualifiedName))  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
441	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	26	None	replace
442	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target  ==  className)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
443	[BUG]  [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.SCRIPT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.SCRIPT)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
445	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.SCRIPT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.SCRIPT)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.SCRIPT)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
446	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
447	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.ASSIGN)  {	  if(target!=    null    &&    target.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
449	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getString().length()  ==  0)  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
450	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  ||  target.getName().equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
452	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  className.equals(qualifiedName))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
454	[BUG]  [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target!=  null  &&  target.getType()  ==  Token.NAME  &&  qualifiedName.equals(target.getString()))  {	  if(target!=    null    &&    target.getType()    ==    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
455	[BUG]  [BUGGY]  Node  target  =  parent.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext();  if(target  ==  null)  {  className  =  callee.getString();  }	      Node    target    =    callee.getNext();    if(target    ==    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
456	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  callee.getClass();  if(target!=  className)  {  className  =  target.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	21	None	replace
457	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	parent  ==  null)  {  Class  <?>  target  =  parent.getClass();  if(target!=  null)  {  className  =  callee.getString();  }	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  not  a  statement	21	None	replace
458	[BUG]  [BUGGY]  Class  <?>  target  =  parent.getClass();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Class  <?>  target  =  parent.getClass();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Class  <?>  target  =  parent.getClass();	      if(target!=    null)    {    Class    <?>    target    =    callee.getClass();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
459	[BUG]  [BUGGY]  Node  target  =  callee.getNext(),  qualifiedName;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.getNext(),  qualifiedName;  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.getNext(),  qualifiedName;	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
460	[BUG]  [BUGGY]  Node  target  =  node.getNext();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  node.getNext();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  node.getNext();	      Node    target    =    callee.getNext();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
461	[BUG]  [BUGGY]  Node  target  =  callee.removeFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  callee.removeFirstChild();  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  callee.removeFirstChild();	      Node    target    =    callee.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
462	[BUG]  [BUGGY]  Node  target  =  parent.getNext();  if(callee!=  null)  {  className  =  callee.getString();  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  Node  target  =  parent.getNext();  if(callee!=  null)  {  className  =  callee.getString();  }  [BUGGY]    if  (target  !=  null)  {  className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	Node  target  =  parent.getNext();  if(callee!=  null)  {  className  =  callee.getString();  }	      Node    target    =    callee.getNext();    if(target!=    null)    {    className    =    target.getString();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
463	[BUG]  [BUGGY]  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  static  String  extractClassNameIfGoog(Node  node,  Node  parent,  String  functionName){  String  className  =  null;  if  (NodeUtil.isExprCall(parent))  {  Node  callee  =  node.getFirstChild();  if  (callee  !=  null  &&  callee.getType()  ==  Token.GETPROP)  {  String  qualifiedName  =  callee.getQualifiedName();  if  (functionName.equals(qualifiedName))  {  Node  target  =  callee.getNext();    [BUGGY]  if(target  [BUGGY]  null  &&  target.getType()  ==  Token.STRING)  {  [BUGGY]    className  =  target.getString();  }  }  }  }  return  className;  }  [CLASS]  ClosureCodingConvention  [METHOD]  extractClassNameIfGoog  [RETURN_TYPE]  String  Node  node  Node  parent  String  functionName  [VARIABLES]  Set  propertyTestFunctions  String  className  functionName  qualifiedName  boolean  DiagnosticType  OBJECTLIT_EXPECTED  long  serialVersionUID  Node  callee  node  parent  target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	if(target  [BUGGY]  null  &&  target.getType()  ==  Token.STRING)  {	  if(target!=    null    ||    target.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	20	None	replace
