bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return extractClassNameIfGoog(node, parent, "goog.require"); [FE] AssertionFailedError [CONTEXT] public String extractClassNameIfRequire(Node node, Node parent){ [BUGGY] return extractClassNameIfGoog(node, parent, "goog.require"); [BUGGY] } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfRequire [RETURN_TYPE] String  Node node Node parent [VARIABLES] Set propertyTestFunctions boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node node parent  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	185	185	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public String extractClassNameIfRequire(Node node, Node parent){ [BUGGY] [BUGGY] return extractClassNameIfGoog(node, parent, "goog.require"); } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfRequire [RETURN_TYPE] String  Node node Node parent [VARIABLES] Set propertyTestFunctions boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node node parent  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	185	185	1	add	
3	[BUG] [BUGGY] String className = null; [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ [BUGGY] String className = null; [BUGGY] if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	190	190	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ [BUGGY] [BUGGY] String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	190	190	1	add	
5	[BUG] [BUGGY] if (NodeUtil.isExprCall(parent)) { [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; [BUGGY] if (NodeUtil.isExprCall(parent)) { [BUGGY] Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	191	191	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; [BUGGY] [BUGGY] if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	191	191	1	add	
7	[BUG] [BUGGY] Node callee = node.getFirstChild(); [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { [BUGGY] Node callee = node.getFirstChild(); [BUGGY] if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	192	192	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { [BUGGY] [BUGGY] Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	192	192	1	add	
9	[BUG] [BUGGY] if (callee != null && callee.getType() == Token.GETPROP) { [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); [BUGGY] if (callee != null && callee.getType() == Token.GETPROP) { [BUGGY] String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	193	193	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); [BUGGY] [BUGGY] if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	193	193	1	add	
11	[BUG] [BUGGY] String qualifiedName = callee.getQualifiedName(); [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { [BUGGY] String qualifiedName = callee.getQualifiedName(); [BUGGY] if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	194	194	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { [BUGGY] [BUGGY] String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	194	194	1	add	
13	[BUG] [BUGGY] if (functionName.equals(qualifiedName)) { [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); [BUGGY] if (functionName.equals(qualifiedName)) { [BUGGY] Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	195	195	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); [BUGGY] [BUGGY] if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	195	195	1	add	
15	[BUG] [BUGGY] Node target = callee.getNext(); [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { [BUGGY] Node target = callee.getNext(); [BUGGY] if (target != null) { className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	196	196	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { [BUGGY] [BUGGY] Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	196	196	1	add	
17	[BUG] [BUGGY] if (target != null) { [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); [BUGGY] if (target != null) { [BUGGY] className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); [BUGGY] [BUGGY] if (target != null) { className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	197	197	1	add	
19	[BUG] [BUGGY] className = target.getString(); [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { [BUGGY] className = target.getString(); [BUGGY] } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	198	198	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { [BUGGY] [BUGGY] className = target.getString(); } } } } return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	198	198	1	add	
21	[BUG] [BUGGY] return className; [FE] AssertionFailedError [CONTEXT] if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } [BUGGY] return className; [BUGGY] } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	203	203	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); if (target != null) { className = target.getString(); } } } } [BUGGY] [BUGGY] return className; } [CLASS] ClosureCodingConvention [METHOD] extractClassNameIfGoog [RETURN_TYPE] String  Node node Node parent String functionName [VARIABLES] Set propertyTestFunctions String className functionName qualifiedName boolean DiagnosticType OBJECTLIT_EXPECTED long serialVersionUID Node callee node parent target  	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	1.0	203	203	1	add	
23	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static final long serialVersionUID = 1L; [CLASS] ClosureCodingConvention  [VARIABLES] 	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	0.20851441405707477	38	38	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static final long serialVersionUID = 1L; [CLASS] ClosureCodingConvention  [VARIABLES] 	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	0.20851441405707477	38	38	1	add	
25	[BUG] [BUGGY] private final Set<String> propertyTestFunctions = ImmutableSet.of( "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", [FE] AssertionFailedError [CONTEXT] [BUGGY] private final Set<String> propertyTestFunctions = ImmutableSet.of(  "goog.isDef", "goog.isNull", "goog.isDefAndNotNull",   "goog.isString", "goog.isNumber", "goog.isBoolean", [BUGGY] "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject"); [CLASS] ClosureCodingConvention  [VARIABLES] 	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	0.20851441405707477	278	280	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private final Set<String> propertyTestFunctions = ImmutableSet.of(  "goog.isDef", "goog.isNull", "goog.isDefAndNotNull",   "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isDef", "goog.isNull", "goog.isDefAndNotNull", "goog.isString", "goog.isNumber", "goog.isBoolean", "goog.isFunction", "goog.isArray", "goog.isObject"); [CLASS] ClosureCodingConvention  [VARIABLES] 	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	0.20851441405707477	278	280	1	add	
27	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static final long serialVersionUID = 1L; [CLASS] ClosureCodingConvention  [VARIABLES] 	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	0.20851441405707477	42	42	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static final long serialVersionUID = 1L; [CLASS] ClosureCodingConvention  [VARIABLES] 	projects/Closure57/src/com/google/javascript/jscomp/ClosureCodingConvention.java	0.20851441405707477	42	42	1	add	
