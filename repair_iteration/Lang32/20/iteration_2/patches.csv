bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  NullPointerException  	54	4	replace
2	[BUG]  [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  NullPointerException  	54	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  AssertionFailedError  	54	2	replace
4	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  AssertionFailedError  	54	2	replace
5	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  NullPointerException  	54	4	replace
6	[BUG]  [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  NullPointerException  	54	4	replace
7	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  &&  reflectUpToClass,  excludeFields);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  &&  reflectUpToClass,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  &&  reflectUpToClass,  excludeFields);	  testTransients    =    clazz.getSuperclass()    ||    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  ';'  expected	86	None	replace
8	[BUG]  [BUGGY]  testerTransients  =  clazz.getSuperclass()  &&  reflectUpToClass,  excludeFields);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testerTransients  =  clazz.getSuperclass()  &&  reflectUpToClass,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testerTransients  =  clazz.getSuperclass()  &&  reflectUpToClass,  excludeFields);	  testTransients    =    clazz.getSuperclass()    ||    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  ';'  expected	86	None	replace
9	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  ||  reflectUpToClass,  excludeFields;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  ||  reflectUpToClass,  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  ||  reflectUpToClass,  excludeFields;	  testTransients    =    clazz.getSuperclass()    ||    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  ';'  expected	86	None	replace
10	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	45	None	replace
11	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  initialNonZeroOddNumber,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  initialNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  initialNonZeroOddNumber,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	45	None	replace
12	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	45	None	replace
13	[BUG]  [BUGGY]  testTransients  =  clazz,  clazz.getSuperclass();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz,  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz,  clazz.getSuperclass();	  testTransients    =    clazz,    clazz.getSuperClass();    	non-compiled	[CE]  ';'  expected	80	None	replace
14	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	59	None	replace
15	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	59	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
17	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
18	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  If(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  If(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    If(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  ';'  expected	27	None	add
19	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	timeout	27	1	add
20	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  timeout  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  while(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    while(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	timeout	27	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	35	1	add
22	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	35	1	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
24	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
25	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
26	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZero  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZero  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZero	  	non-compiled	[CE]  ';'  expected	35	None	add
27	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplierNonZeroOddNumber);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
28	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  null);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  null);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
29	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  null,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  null,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  null,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	23	None	replace
30	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	23	None	replace
31	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperClass()  *  reflectUpToClass;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperClass()  *  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperClass()  *  reflectUpToClass;	  testTransients    =    clazz.getSuperClass()    +    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
32	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperClass()  +  ReflectUpToClass;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperClass()  +  ReflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperClass()  +  ReflectUpToClass;	  testTransients    =    clazz.getSuperClass()    +    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
33	[BUG]  [BUGGY]  clazz  =  builder.getSuperclass()  +  1;  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  builder.getSuperclass()  +  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  builder.getSuperclass()  +  1;	  clazz    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
34	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  timeout    	compilable	timeout	38	1	add
35	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  timeout  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  timeout    	compilable	timeout	38	1	add
36	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  timeout    	compilable	timeout	38	1	add
37	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  timeout    	compilable	timeout	38	1	add
38	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  timeout    	non-compiled	[CE]  illegal  start  of  expression	38	None	add
39	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  timeout    	compilable	timeout	38	1	add
40	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  timeout    	compilable	timeout	38	1	add
41	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  NullPointerException  	51	4	replace
42	[BUG]  [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  NullPointerException  	51	4	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  AssertionFailedError  	51	2	replace
44	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  AssertionFailedError  	51	2	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  AssertionFailedError  	51	2	replace
46	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  AssertionFailedError  	51	2	replace
47	[BUG]  [BUGGY]  class  =  clazz.getSuperclass();  [CE]  <identifier>  expected  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  class  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	class  =  clazz.getSuperclass();	          clazz    =    clazz.getSuperclass();    class    =    clazz.getSuperclass();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
48	[BUG]  [BUGGY]  Class  <?>  class  =  clazz.getSuperclass();  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Class  <?>  class  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Class  <?>  class  =  clazz.getSuperclass();	          clazz    =    clazz.getSuperclass();    class    =    clazz.getSuperclass();    	non-compiled	[CE]  not  a  statement	66	None	replace
49	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  null);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  null);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  null);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    null);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	47	None	replace
50	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  +  reflectUpToClass,  excludeFields;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  +  reflectUpToClass,  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  +  reflectUpToClass,  excludeFields;	  testTransients    =    clazz.getSuperclass()    +    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	74	None	replace
51	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  +  reflectUpToClass,  excludeFields);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  +  reflectUpToClass,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  +  reflectUpToClass,  excludeFields);	  testTransients    =    clazz.getSuperclass()    +    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	74	None	replace
52	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  /  reflectUpToClass;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  /  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  /  reflectUpToClass;	  testTransients    =    clazz.getSuperclass()    +    reflectUpToClass;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	74	None	replace
53	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  includeFields,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  includeFields  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  includeFields,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  includeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    refinderNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  includeFields	10	None	replace
54	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getClass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();	  	compilable	  [FE]  NullPointerException  	53	4	add
55	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getClass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();	  	compilable	  [FE]  NullPointerException  	53	4	add
56	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getSuperClass();  clazz  =  clazz.getClass();  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getSuperClass();  clazz  =  clazz.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getClass();    clazz  =  clazz.getSuperClass();  clazz  =  clazz.getClass();	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
57	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getClass();  clazz  =  clazz.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getClass();    clazz  =  clazz.getClass();  clazz  =  clazz.getClass();	  	compilable	  [FE]  NullPointerException  	53	4	add
58	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getClass();  clazz  =  clazz.getClass();  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getClass();  clazz  =  clazz.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getClass();    clazz  =  clazz.getClass();  clazz  =  clazz.getClass();	  	compilable	  [FE]  NullPointerException  	53	4	add
59	[BUG]  [BUGGY]  builder.append(':',  clazz);  [CE]  no  suitable  method  found  for  append(char,Class<CAP#1>)  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':',  clazz);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':',  clazz);	  builder.append(':');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Class<CAP#1>)	4	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append(':');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append(':');  }	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	2	replace
61	[BUG]  [BUGGY]  if(testTransients)  {  builder.append(':');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append(':');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append(':');  }	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	2	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':').append(initialNonZeroOddNumber);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append(':').append(initialNonZeroOddNumber);	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
63	[BUG]  [BUGGY]  builder.append(':').append(initialNonZeroOddNumber);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':').append(initialNonZeroOddNumber);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':').append(initialNonZeroOddNumber);	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
64	[BUG]  [BUGGY]  builder.append('#',  clazz);  [CE]  no  suitable  method  found  for  append(char,Class<CAP#1>)  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#',  clazz);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#',  clazz);	  builder.append('#');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Class<CAP#1>)	65	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#'  +  clazz.getName());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('#'  +  clazz.getName());	  builder.append('#');    	compilable	  [FE]  AssertionFailedError  	65	4	replace
66	[BUG]  [BUGGY]  builder.append('#'  +  clazz.getName());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#'  +  clazz.getName());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#'  +  clazz.getName());	  builder.append('#');    	compilable	  [FE]  AssertionFailedError  	65	4	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#').append(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('#').append(testTransients);	  builder.append('#');    	compilable	  [FE]  AssertionFailedError  	65	4	replace
68	[BUG]  [BUGGY]  builder.append('#').append(testTransients);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#').append(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#').append(testTransients);	  builder.append('#');    	compilable	  [FE]  AssertionFailedError  	65	4	replace
69	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  refiningNonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningNonZeroOddNumber,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  refiningNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  refiningNonZeroOddNumber	31	None	replace
70	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningUpToClass,  excludeFields);  [CE]  cannot  find  symbol  refiningUpToClass  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refiningUpToClass,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  refiningUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  refiningUpToClass	31	None	replace
71	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
72	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplyerNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplyerNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  multiplyerNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    refinctorNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	11	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  builder.append('n');  builder.append('n');  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	4	replace
74	[BUG]  [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('n');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  builder.append('n');  builder.append('n');  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	4	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	2	replace
76	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	2	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('n');  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	2	replace
78	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('n');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('n');  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	2	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    return    builder.toHashCode();    	compilable	  [FE]  AssertionFailedError  	30	2	replace
80	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    return    builder.toHashCode();    	compilable	  [FE]  AssertionFailedError  	30	2	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  builder.append(':');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append(':');    builder.append(':');	  	compilable	  [FE]  AssertionFailedError  	3	4	add
82	[BUG]  [BUGGY]  builder.append(':');  builder.append(':');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  builder.append(':');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    builder.append(':');	  	compilable	  [FE]  AssertionFailedError  	3	4	add
83	[BUG]  [BUGGY]  builder.append(':');  clazz.append(':');  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  clazz.append(':');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    clazz.append(':');	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  clazz  =  clazz.getSuperclass();  builder.append(':');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append(':');    clazz  =  clazz.getSuperclass();  builder.append(':');	  	compilable	  [FE]  NullPointerException  	3	4	add
85	[BUG]  [BUGGY]  builder.append(':');  clazz  =  clazz.getSuperclass();  builder.append(':');  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  clazz  =  clazz.getSuperclass();  builder.append(':');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    clazz  =  clazz.getSuperclass();  builder.append(':');	  	compilable	  [FE]  NullPointerException  	3	4	add
86	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append(':');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	3	4	add
87	[BUG]  [BUGGY]  builder.append(':');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	3	4	add
88	[BUG]  [BUGGY]  builder.append(':');  testTransients  =  clazz.getTarget();  builder.append(':');  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  testTransients  =  clazz.getTarget();  builder.append(':');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    testTransients  =  clazz.getTarget();  builder.append(':');	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
89	[BUG]  [BUGGY]  honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	honneurAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
90	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	aughtExceptionHandler.throwInternal();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	28	None	replace
91	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [CE]  cannot  find  symbol  excludedFields  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludedFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol  excludedFields	28	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N').append(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('N').append(testTransients);	  builder.append('N');    	compilable	  [FE]  AssertionFailedError  	6	4	replace
93	[BUG]  [BUGGY]  builder.append('N').append(testTransients);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N').append(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N').append(testTransients);	  builder.append('N');    	compilable	  [FE]  AssertionFailedError  	6	4	replace
94	[BUG]  [BUGGY]  builder.append('N',  '/');  [CE]  no  suitable  method  found  for  append(char,char)  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N',  '/');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N',  '/');	  builder.append('N');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	6	None	replace
95	[BUG]  [BUGGY]  builder.append('N',  clazz);  [CE]  no  suitable  method  found  for  append(char,Class<CAP#1>)  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N',  clazz);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N',  clazz);	  builder.append('N');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,Class<CAP#1>)	6	None	replace
96	[BUG]  [BUGGY]  clazz.append('n');  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz.append('n');	          builder.append('n');    clazz.append('n');    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
97	[BUG]  [BUGGY]  builder.append('n',  clazz.append('n');  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('n',  clazz.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('n',  clazz.append('n');	          builder.append('n');    clazz.append('n');    	non-compiled	[CE]  ')'  expected	14	None	replace
98	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	32	None	replace
99	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  reflectUpToClass,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  reflectUpToClass,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  false,  reflectUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	32	None	replace
100	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	32	None	replace
101	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  true,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	32	None	replace
102	[BUG]  [BUGGY]  clazz  =  builder.getRawClass();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  builder.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  builder.getRawClass();	  clazz    =    clazz.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
103	[BUG]  [BUGGY]  clazz  =  object.getRawClass();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  object.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  object.getRawClass();	  clazz    =    clazz.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
104	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass();  clazz  =  builder.getExterns();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass();  clazz  =  builder.getExterns();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass();  clazz  =  builder.getExterns();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getExterns();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  builder.append('N');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('N');    builder.append('N');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
106	[BUG]  [BUGGY]  builder.append('N');  builder.append('N');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  builder.append('N');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    builder.append('N');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
107	[BUG]  [BUGGY]  builder.append('N');  clazz.append('N');  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  clazz.append('N');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    clazz.append('N');	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
108	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('N');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('N');    clazz  =  clazz.getSuperclass();  builder.append('N');	  	compilable	  [FE]  NullPointerException  	5	4	add
109	[BUG]  [BUGGY]  builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('N');  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('N');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    clazz  =  clazz.getSuperclass();  builder.append('N');	  	compilable	  [FE]  NullPointerException  	5	4	add
110	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('N');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	5	4	add
111	[BUG]  [BUGGY]  builder.append('N');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	5	4	add
112	[BUG]  [BUGGY]  builder.append('N');  testTransients  =  clazz.getTarget();  builder.append('N');  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  testTransients  =  clazz.getTarget();  builder.append('N');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    testTransients  =  clazz.getTarget();  builder.append('N');	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('m');  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	2	replace
114	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('m');  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	2	replace
115	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  IllegalArgumentException  	78	4	replace
116	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  IllegalArgumentException  	78	4	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	2	replace
118	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	2	replace
119	[BUG]  [BUGGY]  Builder.append('n');  clazz  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  Builder  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Builder.append('n');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Builder.append('n');  clazz  =  clazz.getSuperclass();	          builder.append('n');    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  Builder	18	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	71	1	add
121	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	71	1	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
123	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
124	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZero  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZero  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZero	  	non-compiled	[CE]  ';'  expected	71	None	add
125	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }	  	non-compiled	[CE]  cannot  find  symbol	71	None	add
126	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }	  	compilable	timeout	71	1	add
127	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  timeout  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }	  	compilable	timeout	71	1	add
128	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
129	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
130	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
131	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('n');  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('N');  clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
132	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
133	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
134	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('n');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('n');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	15	4	add
135	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('n');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('n');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('n');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	15	4	add
136	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
137	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('n');  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');    builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('n');	  	compilable	  [FE]  NullPointerException  	15	4	add
138	[BUG]  [BUGGY]  clazz  =  builder.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  builder.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  builder.getDeclaredType();	  clazz    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
139	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    reflectUpToClass);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	9	None	replace
140	[BUG]  [BUGGY]  TestUtil.testTransients(clazz.getSuperclass(),  testTransients,  excludeFields);  [CE]  cannot  find  symbol  TestUtil  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestUtil.testTransients(clazz.getSuperclass(),  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestUtil.testTransients(clazz.getSuperclass(),  testTransients,  excludeFields);	  testTransients    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  cannot  find  symbol  TestUtil	48	None	replace
141	[BUG]  [BUGGY]  TestUtil.testTransients(clazz.getSuperclass(),  iConstant,  testTransients,  excludeFields);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestUtil.testTransients(clazz.getSuperclass(),  iConstant,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestUtil.testTransients(clazz.getSuperclass(),  iConstant,  testTransients,  excludeFields);	  testTransients    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	48	None	replace
142	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass(),  reflectUpToClass,  excludeFields;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass(),  reflectUpToClass,  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass(),  reflectUpToClass,  excludeFields;	  testTransients    =    clazz.getSuperclass(),    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	49	None	replace
143	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass(),  builder;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass(),  builder;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass(),  builder;	  testTransients    =    clazz.getSuperclass(),    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	49	None	replace
144	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass(),  reflectUpToClass,  excludeFields);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass(),  reflectUpToClass,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass(),  reflectUpToClass,  excludeFields);	  testTransients    =    clazz.getSuperclass(),    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	49	None	replace
145	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass(),  testTransients;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass(),  testTransients;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass(),  testTransients;	  testTransients    =    clazz.getSuperclass(),    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	49	None	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('n');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    builder.append('n');  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
147	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  builder.append('n');  builder.append('n');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('n');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    builder.append('n');  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	12	4	add
149	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	12	4	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    if(testTransients)  {  builder.append('n');  builder.append('n');  }	  	compilable	  [FE]  AssertionFailedError  	12	4	add
151	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    if(testTransients)  {  builder.append('n');  builder.append('n');  }	  	compilable	  [FE]  AssertionFailedError  	12	4	add
152	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  Object  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol  Object	12	None	add
153	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	12	4	add
154	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    if(testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	12	4	add
155	[BUG]  [BUGGY]  testTransients  =  clazz.getTestConstructor();  builder.append('n');  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getTestConstructor();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getTestConstructor();  builder.append('n');	          builder.append('n');    testTransients    =    clazz.getTestConstructor();    builder.append('n');    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
156	[BUG]  [BUGGY]  builder.append('n',  clazz.getTestConstructor());  builder.append('n');  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('n',  clazz.getTestConstructor());  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('n',  clazz.getTestConstructor());  builder.append('n');	          builder.append('n');    testTransients    =    clazz.getTestConstructor();    builder.append('n');    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
157	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	clazz  =  clazz.getSuperclass();  builder.append('n');	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  NullPointerException  	16	4	replace
158	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass();  builder.append('n');  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass();  builder.append('n');	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  NullPointerException  	16	4	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('n');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    builder.append('n');  builder.append('r');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
160	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  builder.append('n');  builder.append('r');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('n');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    builder.append('n');  builder.append('r');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	75	4	add
162	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  	compilable	  [FE]  AssertionFailedError  	75	4	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    if(testTransients)  {  builder.append('n');  builder.append('r');  }	  	compilable	  [FE]  AssertionFailedError  	75	4	add
164	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    if(testTransients)  {  builder.append('n');  builder.append('r');  }	  	compilable	  [FE]  AssertionFailedError  	75	4	add
165	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('r');	  	compilable	  [FE]  NullPointerException  	75	4	add
166	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('r');  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('r');	  	compilable	  [FE]  NullPointerException  	75	4	add
167	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  Object  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(Object,  clazz,  builder,  testTransients,  excludeFields);  }	  	non-compiled	[CE]  cannot  find  symbol  Object	75	None	add
168	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  &&  reflectUpToClass.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  &&  reflectUpToClass.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  &&  reflectUpToClass.getDeclaredType();	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
169	[BUG]  [BUGGY]  testTransients  =  reflectUpToClass.getDeclaredType()  ||  clazz.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  reflectUpToClass.getDeclaredType()  ||  clazz.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  reflectUpToClass.getDeclaredType()  ||  clazz.getDeclaredType();	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
170	[BUG]  [BUGGY]  mockUpToClass  =  clazz.getDeclaredType()  ||  reflectUpToClass.getDeclaredType();  [CE]  cannot  find  symbol  mockUpToClass  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  mockUpToClass  =  clazz.getDeclaredType()  ||  reflectUpToClass.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	mockUpToClass  =  clazz.getDeclaredType()  ||  reflectUpToClass.getDeclaredType();	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  mockUpToClass	91	None	replace
171	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	50	4	add
172	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	50	4	add
173	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperClass();  clazz  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperClass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperClass();  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
174	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	50	4	add
175	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	50	4	add
176	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();  clazz  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getInterface();  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
177	[BUG]  [BUGGY]  clazz  =  builder.getInterface();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  builder.getInterface();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  builder.getInterface();	  clazz    =    clazz.getInterface();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
178	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
179	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
180	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('N');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('N');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
181	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('N');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('N');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('N');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
182	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('m');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('m');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
183	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('m');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('m');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('m');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
184	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
185	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
186	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  true);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  true);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  true);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    false);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	68	None	replace
187	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  false);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  false);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  false);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    false);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	68	None	replace
188	[BUG]  [BUGGY]  while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getInterface()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getInterface();    }    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
189	[BUG]  [BUGGY]  while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while  (clazz.getInterface()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInterface();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getInterface()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getInterface();    }    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
190	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  reflectUpToClass,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  reflectUpToClass,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  reflectUpToClass,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    null,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	44	None	replace
191	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  multiplierNonZeroOddNumber,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  multiplierNonZeroOddNumber,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  multiplierNonZeroOddNumber,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    null,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	44	None	replace
192	[BUG]  [BUGGY]  testTransients  =  clazz,  builder.getDeclaredType();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz,  builder.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz,  builder.getDeclaredType();	  testTransients    =    clazz,    clazz.getDeclaredType();    	non-compiled	[CE]  ';'  expected	92	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('n');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    builder.append('n');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
194	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  builder.append('n');  builder.append('m');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('n');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    builder.append('n');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  if(testTransients)  {  builder.append('n');  builder.append('m');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    if(testTransients)  {  builder.append('n');  builder.append('m');  }	  	compilable	  [FE]  AssertionFailedError  	77	4	add
196	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  if(testTransients)  {  builder.append('n');  builder.append('m');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  if(testTransients)  {  builder.append('n');  builder.append('m');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    if(testTransients)  {  builder.append('n');  builder.append('m');  }	  	compilable	  [FE]  AssertionFailedError  	77	4	add
197	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('m');	  	compilable	  [FE]  NullPointerException  	77	4	add
198	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('m');  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    clazz  =  clazz.getSuperclass();  builder.append('n');  builder.append('m');	  	compilable	  [FE]  NullPointerException  	77	4	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('r');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    builder.append('r');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
200	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  builder.append('r');  builder.append('m');  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('r');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    builder.append('r');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
201	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	77	4	add
202	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	77	4	add
203	[BUG]  [BUGGY]  if(testTransients)  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	  ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
204	[BUG]  [BUGGY]  if(testTransients)  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
205	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  ReflectUpToClass  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    ReflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  ReflectUpToClass	37	None	replace
206	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass();  clazz  =  clazz,  clazz.getInterface();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass();  clazz  =  clazz,  clazz.getInterface();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass();  clazz  =  clazz,  clazz.getInterface();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getInterface();    	non-compiled	[CE]  ';'  expected	56	None	replace
207	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  &&  reflectUpToClass;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  &&  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  &&  reflectUpToClass;	  testTransients    =    clazz.getSuperclass()    ||    reflectUpToClass;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	85	None	replace
208	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  &&  reflectUpToClass;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass()  &&  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass()  &&  reflectUpToClass;	  testTransients    =    clazz.getSuperclass()    ||    reflectUpToClass;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	85	None	replace
209	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  IllegalArgumentException  	61	4	replace
210	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  IllegalArgumentException  	61	4	replace
211	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  builder,  testTransients,  excludeFields);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	61	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  AssertionFailedError  	61	2	replace
213	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  AssertionFailedError  	61	2	replace
214	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  iConstant);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  null,  iConstant);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	67	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	33	1	add
216	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  AssertionFailedError  	33	1	add
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	33	1	add
218	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	33	1	add
219	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
220	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  ReflectUpToClass  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	non-compiled	[CE]  cannot  find  symbol  ReflectUpToClass	33	None	add
221	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  2;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  +  2;	  testTransients    =    clazz.getDeclaredType()    +    1;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
222	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  *  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  *  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  *  1;	  testTransients    =    clazz.getDeclaredType()    +    1;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  builder.append('#');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('#');    builder.append('#');	  	compilable	  [FE]  AssertionFailedError  	64	4	add
224	[BUG]  [BUGGY]  builder.append('#');  builder.append('#');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  builder.append('#');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#');    builder.append('#');	  	compilable	  [FE]  AssertionFailedError  	64	4	add
225	[BUG]  [BUGGY]  builder.append('#');  clazz.append('#');  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  clazz.append('#');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#');    clazz.append('#');	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
226	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('#');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('#');    clazz  =  clazz.getSuperclass();  builder.append('#');	  	compilable	  [FE]  NullPointerException  	64	4	add
227	[BUG]  [BUGGY]  builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('#');  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  clazz  =  clazz.getSuperclass();  builder.append('#');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#');    clazz  =  clazz.getSuperclass();  builder.append('#');	  	compilable	  [FE]  NullPointerException  	64	4	add
228	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('#');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	64	4	add
229	[BUG]  [BUGGY]  builder.append('#');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	64	4	add
230	[BUG]  [BUGGY]  builder.append('#');  testTransients  =  clazz.getTestConstructor();  builder.append('#');  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  testTransients  =  clazz.getTestConstructor();  builder.append('#');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#');    testTransients  =  clazz.getTestConstructor();  builder.append('#');	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
231	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	60	4	add
232	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	60	4	add
233	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
234	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  constructer  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  constructer,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol  constructer	60	None	add
235	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  *  reflectUpToClass;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  *  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  *  reflectUpToClass;	  testTransients    =    clazz.getDeclaredType()    +    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
236	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  ReflectUpToClass;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  ReflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  +  ReflectUpToClass;	  testTransients    =    clazz.getDeclaredType()    +    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
237	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  reflectUpToClass,  excludeFields;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  reflectUpToClass,  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  +  reflectUpToClass,  excludeFields;	  testTransients    =    clazz.getDeclaredType()    +    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	62	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	25	2	add
239	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	25	2	add
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	25	2	add
241	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	25	2	add
242	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz  >=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz  >=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz  >=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	25	None	add
243	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  NullPointerException  	25	4	add
244	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  NullPointerException  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()  ==  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  NullPointerException  	25	4	add
245	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  refiveUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  refiveUpToClass  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  refiveUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  refiveUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	non-compiled	[CE]  cannot  find  symbol  refiveUpToClass	25	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('r');  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	2	replace
247	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('r');  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	2	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('r');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  builder.append('n');  builder.append('r');  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	4	replace
249	[BUG]  [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('r');  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('r');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  builder.append('n');  builder.append('r');  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	4	replace
250	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  IllegalArgumentException  	76	4	replace
251	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  IllegalArgumentException  	76	4	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	2	replace
253	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	2	replace
254	[BUG]  [BUGGY]  TestType  testTransients  =  clazz.getTestType();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestType  testTransients  =  clazz.getTestType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestType  testTransients  =  clazz.getTestType();	  TestType    testTransients    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
255	[BUG]  [BUGGY]  TestType  testTransients  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestType  testTransients  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestType  testTransients  =  clazz.getSuperclass();	  TestType    testTransients    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
256	[BUG]  [BUGGY]  TestType  testTransients  =  clazz.getReturnType();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestType  testTransients  =  clazz.getReturnType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestType  testTransients  =  clazz.getReturnType();	  TestType    testTransients    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
257	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  testTransients!=  clazz.getSuperclass())  {  clazz  =  clazz.getSuperclass();  }  [CE]  incomparable  types:  boolean  and  Class<CAP#1>  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  testTransients!=  clazz.getSuperclass())  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  testTransients!=  clazz.getSuperclass())  {  clazz  =  clazz.getSuperclass();  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    testTransients)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  incomparable  types:  boolean  and  Class<CAP#1>	29	None	replace
258	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  &&  reflectUpToClass;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  &&  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  &&  reflectUpToClass;	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
259	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass,  excludeFields;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass,  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass,  excludeFields;	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	93	None	replace
260	[BUG]  [BUGGY]  mockUpToClass  =  clazz.getDeclaredType()  ||  reflectUpToClass;  [CE]  cannot  find  symbol  mockUpToClass  [FE]                          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  mockUpToClass  =  clazz.getDeclaredType()  ||  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	mockUpToClass  =  clazz.getDeclaredType()  ||  reflectUpToClass;	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol  mockUpToClass	93	None	replace
261	[BUG]  [BUGGY]  testTransients  =  clazz.reflectUpToClass(testTransients);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.reflectUpToClass(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.reflectUpToClass(testTransients);	  testTransients    =    clazz.reflectUpToClass();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
262	[BUG]  [BUGGY]  testTransients  =  clazz.getReturnType();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getReturnType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getReturnType();	  testTransients    =    clazz.reflectUpToClass();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
263	[BUG]  [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend.append(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionAppend.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	90	None	replace
264	[BUG]  [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend.append(object,  clazz,  builder,  testTransients,  reflectUpToClass);	  ReflectionAppend.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	90	None	replace
265	[BUG]  [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend.append(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	  ReflectionAppend.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	90	None	replace
266	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	88	4	add
267	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	  	compilable	  [FE]  NullPointerException  	88	4	add
268	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.get  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.get  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.get	  	non-compiled	[CE]  ';'  expected	88	None	add
269	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	88	4	add
270	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	88	4	add
271	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialN  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialN  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialN	  	non-compiled	[CE]  ';'  expected	88	None	add
272	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperClass();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	52	None	replace
273	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Class  <?>  clazz  =  clazz.getSuperclass();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	52	None	replace
274	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	43	None	replace
275	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass,  multiplierNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	43	None	replace
276	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  &&  testTransients;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  &&  testTransients;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  &&  testTransients;	  testTransients    =    clazz.getDeclaredType()    ||    testTransients;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
277	[BUG]  [BUGGY]  TestTransients  testTransients  =  clazz.getDeclaredType()  ||  testTransients;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestTransients  testTransients  =  clazz.getDeclaredType()  ||  testTransients;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestTransients  testTransients  =  clazz.getDeclaredType()  ||  testTransients;	  testTransients    =    clazz.getDeclaredType()    ||    testTransients;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
278	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);	  ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
279	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields);	  ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
280	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  multiplierNonZeroOddNumber,  excludeFields);	  ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
281	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  refincNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  refincNonZeroOddNumber  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  refincNonZeroOddNumber,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  refincNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber,    reflectUpToClass);    	non-compiled	[CE]  cannot  find  symbol  refincNonZeroOddNumber	45	None	replace
282	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  timeout    	non-compiled	[CE]  illegal  start  of  expression	38	None	add
283	[BUG]  [BUGGY]  Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getInterface();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
284	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  3;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  +  3;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  +  3;	  testTransients    =    clazz.getDeclaredType()    +    1;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
285	[BUG]  [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [CE]  cannot  find  symbol  ReflectionAppend  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend.append(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend.append(object,  clazz,  builder,  testTransients,  excludeFields,  reflectUpToClass);	  ReflectionAppend.append(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  ReflectionAppend	90	None	replace
286	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refTransients,  excludeFields);  [CE]  cannot  find  symbol  refTransients  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  refTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  refTransients,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  refTransients	31	None	replace
287	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  null,  multiplierNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  null,  multiplierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  false,  null,  multiplierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    null,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	44	None	replace
288	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  +  reflectUpToClass  +  excludeFields;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  +  reflectUpToClass  +  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  +  reflectUpToClass  +  excludeFields;	  testTransients    =    clazz.getSuperclass()    +    reflectUpToClass;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	74	None	replace
289	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  *  reflectUpToClass;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  *  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  *  reflectUpToClass;	  testTransients    =    clazz.getSuperclass()    +    reflectUpToClass;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	74	None	replace
290	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperClass()  +  refrectUpToClass;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperClass()  +  refrectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperClass()  +  refrectUpToClass;	  testTransients    =    clazz.getSuperClass()    +    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
291	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
292	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber	  	non-compiled	[CE]  ';'  expected	71	None	add
293	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass);	  ReflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
294	[BUG]  [BUGGY]  builder.append(':');  testTransients  =  clazz.getSuperclass();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  testTransients  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    testTransients  =  clazz.getSuperclass();	  	non-compiled	[CE]  incompatible  types	3	None	add
295	[BUG]  [BUGGY]  Clazz  clazz  =  clazz.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Clazz  clazz  =  clazz.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Clazz  clazz  =  clazz.getDeclaredType();	  clazz    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
296	[BUG]  [BUGGY]  clazz  =  clazz.getDeclaredType()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getDeclaredType()  +  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getDeclaredType()  +  1;	  clazz    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('m');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  builder.append('n');  builder.append('m');  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	4	replace
298	[BUG]  [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('m');  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('m');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  builder.append('n');  builder.append('m');  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	4	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	4	replace
300	[BUG]  [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	4	replace
301	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('r');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('r');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
302	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('r');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('r');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('r');  clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	17	4	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    	compilable	  [FE]  AssertionFailedError  	26	2	replace
304	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    	compilable	  [FE]  AssertionFailedError  	26	2	replace
305	[BUG]  [BUGGY]  clazz  =  clazz.toInterface();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.toInterface();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.toInterface();	  clazz    =    clazz.getInterface();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
306	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectNonZeroOddNumber);  [CE]  cannot  find  symbol  reflectNonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  reflectNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  reflectNonZeroOddNumber	69	None	replace
307	[BUG]  [BUGGY]  TestType  testTransients  =  clazz.getDeclaredType(testTransients);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestType  testTransients  =  clazz.getDeclaredType(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestType  testTransients  =  clazz.getDeclaredType(testTransients);	  TestType    testTransients    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
308	[BUG]  [BUGGY]  TestType  testTransients  =  clazz.getDeclaringType();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestType  testTransients  =  clazz.getDeclaringType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestType  testTransients  =  clazz.getDeclaringType();	  TestType    testTransients    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
309	[BUG]  [BUGGY]  testTransients  =  clazz.getTestClass();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getTestClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getTestClass();	  testTransients    =    clazz,    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
310	[BUG]  [BUGGY]  testTransients  =  clazz.getTestType();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getTestType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getTestType();	  testTransients    =    clazz,    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':').append(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append(':').append(testTransients);	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
312	[BUG]  [BUGGY]  builder.append(':').append(testTransients);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':').append(testTransients);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':').append(testTransients);	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':'  +  clazz.getName());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append(':'  +  clazz.getName());	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
314	[BUG]  [BUGGY]  builder.append(':'  +  clazz.getName());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':'  +  clazz.getName());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':'  +  clazz.getName());	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('N');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    builder.append('N');  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
316	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  builder.append('N');  builder.append('n');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('N');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    builder.append('N');  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('m');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    builder.append('m');  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
318	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  builder.append('m');  builder.append('n');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('m');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    builder.append('m');  builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
320	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  builder.append('n');  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	12	4	add
321	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  testTransients)  {  clazz  =  clazz.getSuperclass();	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
322	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass  +  excludeFields;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass  +  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass  +  excludeFields;	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('m');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    builder.append('m');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
324	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  builder.append('m');  builder.append('m');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('m');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    builder.append('m');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('f');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    builder.append('f');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
326	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  builder.append('f');  builder.append('m');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('f');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    builder.append('f');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('h');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    builder.append('h');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
328	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  builder.append('h');  builder.append('m');  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('h');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    builder.append('h');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
329	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  ||  reflectUpToClass  +  excludeFields;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  ||  reflectUpToClass  +  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  ||  reflectUpToClass  +  excludeFields;	  testTransients    =    clazz.getSuperclass()    ||    reflectUpToClass;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	85	None	replace
330	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  NullPointerException  	51	4	replace
331	[BUG]  [BUGGY]  if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  NullPointerException  	51	4	replace
332	[BUG]  [BUGGY]  Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExterns();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExterns();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExterns();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getExterns();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  builder.append('K');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('N');    builder.append('K');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
334	[BUG]  [BUGGY]  builder.append('N');  builder.append('K');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  builder.append('K');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    builder.append('K');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  builder.append('M');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('N');    builder.append('M');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
336	[BUG]  [BUGGY]  builder.append('N');  builder.append('M');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  builder.append('M');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    builder.append('M');	  	compilable	  [FE]  AssertionFailedError  	5	4	add
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  AssertionFailedError  	61	2	replace
338	[BUG]  [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  else  {  return  builder.toHashCode();  }	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	compilable	  [FE]  AssertionFailedError  	61	2	replace
339	[BUG]  [BUGGY]  testTransients  =  clazz.reflectUpToClass()  +  reflectUpToClass;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.reflectUpToClass()  +  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.reflectUpToClass()  +  reflectUpToClass;	  testTransients    =    clazz.reflectUpToClass();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
340	[BUG]  [BUGGY]  testTransients  =  clazz.reflectUpToClass(expandUpToClass);  [CE]  cannot  find  symbol  expandUpToClass  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.reflectUpToClass(expandUpToClass);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.reflectUpToClass(expandUpToClass);	  testTransients    =    clazz.reflectUpToClass();    	non-compiled	[CE]  cannot  find  symbol  expandUpToClass	87	None	replace
341	[BUG]  [BUGGY]  atterns  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  atterns  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  atterns  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	atterns  =  clazz.getSuperclass();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol  atterns	28	None	replace
342	[BUG]  [BUGGY]  atterns  =  clazz.getRawClass();  [CE]  cannot  find  symbol  atterns  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  atterns  =  clazz.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	atterns  =  clazz.getRawClass();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol  atterns	28	None	replace
343	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplyerNonZeroOddNumber);  [CE]  cannot  find  symbol  multiplyerNonZeroOddNumber  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplyerNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplyerNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  multiplyerNonZeroOddNumber	83	None	replace
344	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multierNonZeroOddNumber);  [CE]  cannot  find  symbol  multierNonZeroOddNumber  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multierNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multierNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  multierNonZeroOddNumber	83	None	replace
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	4	replace
346	[BUG]  [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	4	replace
347	[BUG]  [BUGGY]  Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExternalClass();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExternalClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Clazz  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExternalClass();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getExternalClass();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(!testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	4	replace
349	[BUG]  [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(!testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(!testTransients)  {  builder.append('n');  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	          builder.append('n');    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	13	4	replace
350	[BUG]  [BUGGY]  builder.append('#'  +  clazz);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#'  +  clazz);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#'  +  clazz);	  builder.append('#');    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('>');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('>');	  builder.append('#');    	compilable	  [FE]  AssertionFailedError  	65	4	replace
352	[BUG]  [BUGGY]  builder.append('>');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('>');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('>');	  builder.append('#');    	compilable	  [FE]  AssertionFailedError  	65	4	replace
353	[BUG]  [BUGGY]  builder.append('N',  'T');  [CE]  no  suitable  method  found  for  append(char,char)  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N',  'T');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N',  'T');	  builder.append('N');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	6	None	replace
354	[BUG]  [BUGGY]  builder.append('N',  '-');  [CE]  no  suitable  method  found  for  append(char,char)  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N',  '-');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N',  '-');	  builder.append('N');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	6	None	replace
355	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  NullPointerException  	25	4	add
356	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  NullPointerException  	25	4	add
357	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
358	[BUG]  [BUGGY]  Clazz  clazz  =  clazz.getRawClass();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Clazz  clazz  =  clazz.getRawClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Clazz  clazz  =  clazz.getRawClass();	  clazz    =    clazz.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
359	[BUG]  [BUGGY]  clazz  =  clazz.getRawClass()  +  1;  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getRawClass()  +  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getRawClass()  +  1;	  clazz    =    clazz.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
360	[BUG]  [BUGGY]  builder.append('n',  clazz.toString());  [CE]  no  suitable  method  found  for  append(char,String)  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('n',  clazz.toString());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('n',  clazz.toString());	          builder.append('n');    clazz.append('n');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,String)	14	None	replace
361	[BUG]  [BUGGY]  builder.append('n',  clazz.getName());  [CE]  no  suitable  method  found  for  append(char,String)  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('n',  clazz.getName());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('n',  clazz.getName());	          builder.append('n');    clazz.append('n');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,String)	14	None	replace
362	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass(),  reflectUpToClass  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass(),  reflectUpToClass  +  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass(),  reflectUpToClass  +  1;	  testTransients    =    clazz.getSuperclass(),    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	49	None	replace
363	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  class  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  [CE]  <identifier>  expected  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getClass();  class  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getClass();    class  =  clazz.getSuperclass();  clazz  =  clazz.getClass();	  	non-compiled	[CE]  <identifier>  expected	53	None	add
364	[BUG]  [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [CE]  <identifier>  expected  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz        =        clazz.getSuperclass();        clazz    =    clazz.getSuperclass();    class  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  <identifier>  expected	50	None	add
365	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	35	None	add
366	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber	  	non-compiled	[CE]  ';'  expected	35	None	add
367	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  Builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  Builder  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  Builder,  testTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  Builder,  testTransients,  excludeFields);	  	non-compiled	[CE]  cannot  find  symbol  Builder	60	None	add
368	[BUG]  [BUGGY]  testTransients  =  clazz.getTestSuperClass();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getTestSuperClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getTestSuperClass();	  testTransients    =    clazz,    clazz.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
369	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  ReflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    ReflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
370	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  +  2;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  +  2;	  testTransients    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	replace
371	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  *  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  *  1;	  testTransients    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	48	None	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  AssertionFailedError  	54	2	replace
373	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  AssertionFailedError  	54	2	replace
374	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  NullPointerException  	54	4	replace
375	[BUG]  [BUGGY]  if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  NullPointerException  	54	4	replace
376	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz  ==  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
377	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass,  clazz.getDeclaredType();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass,  clazz.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass,  clazz.getDeclaredType();	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass.getDeclaredType();    	non-compiled	[CE]  ';'  expected	91	None	replace
378	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber,  iConstant);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  multiplierNonZeroOddNumber,  iConstant);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	23	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('[');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append('[');	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	4	replace
380	[BUG]  [BUGGY]  builder.append('[');  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('[');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('[');	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	4	replace
381	[BUG]  [BUGGY]  builder.append('#');  testTransients  =  clazz.getSuperclass();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  testTransients  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#');    testTransients  =  clazz.getSuperclass();	  	non-compiled	[CE]  incompatible  types	64	None	add
382	[BUG]  [BUGGY]  builder.append('#');  testTransients  =  clazz.getReturnType();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('#');  testTransients  =  clazz.getReturnType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('#');    testTransients  =  clazz.getReturnType();	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
383	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('m');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    builder.append('m');  builder.append('r');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
385	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  builder.append('m');  builder.append('r');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('m');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    builder.append('m');  builder.append('r');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('f');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    builder.append('f');  builder.append('r');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
387	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  builder.append('f');  builder.append('r');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('f');  builder.append('r');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    builder.append('f');  builder.append('r');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
389	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  builder.append('n');  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	75	4	add
390	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getInitialNonZeroOddNumber()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getInitialNonZeroOddNumber	  	non-compiled	[CE]  ';'  expected	88	None	add
391	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  }	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	59	None	replace
392	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass()  +  2;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass()  +  2;	  clazz    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	79	None	replace
393	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
394	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass()	  	non-compiled	[CE]  ';'  expected	60	None	add
395	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.get	  	non-compiled	[CE]  ';'  expected	60	None	add
396	[BUG]  [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass	  	non-compiled	[CE]  ';'  expected	60	None	add
397	[BUG]  [BUGGY]  clazz  =  clazz.reflectUpToClass();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.reflectUpToClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.reflectUpToClass();	  clazz    =    clazz.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
398	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  false);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  false);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  false);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    reflectUpToClass,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	43	None	replace
399	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  ref);  [CE]  cannot  find  symbol  ref  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  ref);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  ref);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  ref	69	None	replace
400	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);  [CE]  cannot  find  symbol  injectorNonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  injectorNonZeroOddNumber,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    multiplyerNonZeroOddNumber,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  injectorNonZeroOddNumber	31	None	replace
401	[BUG]  [BUGGY]  testTransients  =  clazz,  builder.getSuperClass();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz,  builder.getSuperClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz,  builder.getSuperClass();	  testTransients    =    clazz,    clazz.getSuperClass();    	non-compiled	[CE]  ';'  expected	80	None	replace
402	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  NullPointerException  	89	4	replace
403	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  clazz  =  clazz.getSuperclass();	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  NullPointerException  	89	4	replace
404	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('r');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	75	4	add
405	[BUG]  [BUGGY]          builder.append('n');    builder.append('r');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('r');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('r');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	75	4	add
406	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  mockUpToClass;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  mockUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  ||  mockUpToClass;	  testTransients    =    clazz.getDeclaredType()    ||    testTransients;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
407	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  testTransients,  excludeFields);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  ||  testTransients,  excludeFields);	  testTransients    =    clazz.getDeclaredType()    ||    testTransients;    	non-compiled	[CE]  ';'  expected	41	None	replace
408	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    return    builder.toHashCode();    	compilable	  [FE]  IllegalArgumentException  	30	4	replace
409	[BUG]  [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  return  builder.toHashCode();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    return    builder.toHashCode();    	compilable	  [FE]  IllegalArgumentException  	30	4	replace
410	[BUG]  [BUGGY]  testTransients  =  clazz.getReflectUpToClass();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getReflectUpToClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getReflectUpToClass();	  testTransients    =    clazz.reflectUpToClass();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
411	[BUG]  [BUGGY]  testTransients  =  clazz.reflectUpToClass(reflectUpToClass);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.reflectUpToClass(reflectUpToClass);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.reflectUpToClass(reflectUpToClass);	  testTransients    =    clazz.reflectUpToClass();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
412	[BUG]  [BUGGY]  testTransients  =  clazz,  clazz.getDeclaredType()  +  reflectUpToClass;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz,  clazz.getDeclaredType()  +  reflectUpToClass;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz,  clazz.getDeclaredType()  +  reflectUpToClass;	  testTransients    =    clazz.getDeclaredType()    +    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	62	None	replace
413	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]                NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getInterface();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getInterface();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	56	None	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append( ", ");  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append( ", ");	  builder.append('N');    	compilable	  [FE]  AssertionFailedError  	6	4	replace
415	[BUG]  [BUGGY]  builder.append( ", ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append( ", ");  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append( ", ");	  builder.append('N');    	compilable	  [FE]  AssertionFailedError  	6	4	replace
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  reflectUpToClass)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  reflectUpToClass)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	2	replace
417	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  reflectUpToClass)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  reflectUpToClass)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  reflectUpToClass)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  builder.append('n');  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	2	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null)  {  builder.append('n');  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	2	replace
419	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null)  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null)  {  builder.append('n');  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	2	replace
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append('n');  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	2	replace
421	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append('n');  }  [FE]  AssertionFailedError  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append('n');  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  builder.append('n');  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    builder.append('n');    	compilable	  [FE]  AssertionFailedError  	16	2	replace
422	[BUG]  [BUGGY]  clazz  =  clazz.getSuperClass();  clazz  =  clazz.getExterns();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperClass();  clazz  =  clazz.getExterns();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperClass();  clazz  =  clazz.getExterns();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getExterns();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
423	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	88	4	add
424	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	88	4	add
425	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  NullPointerException  	88	4	add
426	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  NullPointerException  	88	4	add
427	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  if(testTransients)  {  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    clazz  =  clazz.getSuperclass();  if(testTransients)  {  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        clazz    =    clazz.getSuperclass();    if(testTransients)  {  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
428	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  excludeFields);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  excludeFields);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	23	None	replace
429	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  refUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  refUpToClass  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  refUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  refUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	non-compiled	[CE]  cannot  find  symbol  refUpToClass	25	None	add
430	[BUG]  [BUGGY]  TestType  testTransients  =  clazz.reflectUpToClass.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestType  testTransients  =  clazz.reflectUpToClass.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestType  testTransients  =  clazz.reflectUpToClass.getDeclaredType();	  TestType    testTransients    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
431	[BUG]  [BUGGY]  TestType  testTransients  =  clazz,  clazz.getDeclaredType();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  TestType  testTransients  =  clazz,  clazz.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	TestType  testTransients  =  clazz,  clazz.getDeclaredType();	  TestType    testTransients    =    clazz.getDeclaredType();    	non-compiled	[CE]  ';'  expected	40	None	replace
432	[BUG]  [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperClass();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    clazz  =  clazz.getSuperclass();  builder.append('n');  clazz  =  clazz.getSuperClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        clazz    =    clazz.getSuperclass();    builder.append('n');  clazz  =  clazz.getSuperClass();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
433	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  aughtExceptionHandler.handleMissingClass(clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	aughtExceptionHandler.handleMissingClass(clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	28	None	replace
434	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  aughtExceptionHandler.handleMissingClass(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	aughtExceptionHandler.handleMissingClass(object,  clazz,  builder,  testTransients,  excludeFields);	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	28	None	replace
435	[BUG]  [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Class  <?  super  T>  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Class  <?  super  T>  clazz  =  clazz.getSuperclass();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	28	None	replace
436	[BUG]  [BUGGY]  Class  <?  super  T>  builder  =  clazz.getSuperclass();  [CE]  variable  builder  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Class  <?  super  T>  builder  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Class  <?  super  T>  builder  =  clazz.getSuperclass();	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    }    	non-compiled	[CE]  variable  builder  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	28	None	replace
437	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()?  reflectUpToClass  :  excludeFields;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()?  reflectUpToClass  :  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()?  reflectUpToClass  :  excludeFields;	  testTransients    =    clazz.getSuperclass()    ||    reflectUpToClass;    	non-compiled	[CE]  incompatible  types	85	None	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
439	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  builder.append('n');  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    builder.append('n');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('N');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('m');    builder.append('N');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
441	[BUG]  [BUGGY]          builder.append('n');    builder.append('m');  builder.append('N');  builder.append('m');  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('m');  builder.append('N');  builder.append('m');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('m');    builder.append('N');  builder.append('m');	  	compilable	  [FE]  AssertionFailedError  	77	4	add
442	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  initialNonZeroOddNumber);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  initialNonZeroOddNumber);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  reflectUpToClass,  excludeFields,  initialNonZeroOddNumber);	  reflectionAppend(object,    clazz,    builder,    testTransients,    reflectUpToClass,    excludeFields,    iConstant);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	83	None	replace
443	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass()!=  ';'	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	59	None	replace
444	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  >>  ';'  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass()  >>  ';'  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass()  >>  ';'	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	59	None	replace
445	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  expected  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass()!=  ';'  expected  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass()!=  ';'  expected	  if(testTransients)    {    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass()    	non-compiled	[CE]  ';'  expected	59	None	replace
446	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  IllegalArgumentException  	54	4	replace
447	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  IllegalArgumentException  	54	4	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  AssertionFailedError  	54	2	replace
449	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [FE]  AssertionFailedError  [FE]      NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getClass();  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getClass();    	compilable	  [FE]  AssertionFailedError  	54	2	replace
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  return  builder.toHashCode();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  return  builder.toHashCode();  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	2	replace
451	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  return  builder.toHashCode();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  return  builder.toHashCode();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('m');  }  else  {  return  builder.toHashCode();  }	          builder.append('n');    builder.append('m');    	compilable	  [FE]  AssertionFailedError  	78	2	replace
452	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  reflectNonZeroOddNumber  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  }	  while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  reflectNonZeroOddNumber	26	None	replace
453	[BUG]  [BUGGY]  réfléchiseUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  character:  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  réfléchiseUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	réfléchiseUpToClass(object,  clazz,  builder,  testTransients,  excludeFields);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  illegal  character:  	2	None	replace
454	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  IllegalArgumentException  	51	4	replace
455	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getSuperclass();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  IllegalArgumentException  	51	4	replace
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(clazz.getSuperclass()!=  null)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  AssertionFailedError  	18	2	replace
457	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null)  {  builder.append('n');  clazz  =  clazz.getSuperclass();  }	          builder.append('n');    clazz    =    clazz.getSuperclass();    	compilable	  [FE]  AssertionFailedError  	18	2	replace
458	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperclass()  +  1,  excludeFields);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperclass()  +  1,  excludeFields);  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperclass()  +  1,  excludeFields);	  testTransients    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  ';'  expected	48	None	replace
459	[BUG]  [BUGGY]  testTransients  &=  clazz.getSuperclass()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  &=  clazz.getSuperclass()  +  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  &=  clazz.getSuperclass()  +  1;	  testTransients    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	replace
460	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  nonZeroOddNumber,  reflectUpToClass);  [CE]  cannot  find  symbol  nonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  nonZeroOddNumber,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  nonZeroOddNumber,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields,    null,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol  nonZeroOddNumber	44	None	replace
461	[BUG]  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  reflectUpToClass);  [CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  reflectUpToClass);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectionAppend(object,  clazz,  builder,  testTransients,  false,  excludeFields,  reflectUpToClass);	  reflectionAppend(object,    clazz,    builder,    testTransients,    false,    excludeFields);    	non-compiled	[CE]  method  reflectionAppend  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	32	None	replace
462	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  }  [CE]  cannot  find  symbol  reflectNonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getClass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getClass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getClass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getClass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectNonZeroOddNumber)  {  clazz  =  clazz.getSuperclass();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  reflectNonZeroOddNumber	38	None	add
463	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  }  [CE]  <identifier>  expected  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  null)  {  clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    class    =    clazz.getSuperclass();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
464	[BUG]  [BUGGY]  if(clazz.getSuperclass()!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  }  [CE]  <identifier>  expected  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(clazz.getSuperclass()!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(clazz.getSuperclass()!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  class  =  clazz.getSuperclass();  }	          clazz    =    clazz.getSuperclass();    class    =    clazz.getSuperclass();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
465	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                builder.append('n');        builder.append('n');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	12	4	add
466	[BUG]  [BUGGY]          builder.append('n');    builder.append('n');  clazz  =  clazz.getSuperclass();  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          builder.append('n');    builder.append('n');  clazz  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                builder.append('n');        builder.append('n');    clazz  =  clazz.getSuperclass();	  	compilable	  [FE]  NullPointerException  	12	4	add
467	[BUG]  [BUGGY]  testTransients  =  clazz.getSuperClass()  +  reflectUpToClass,  excludeFields;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getSuperClass()  +  reflectUpToClass,  excludeFields;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getSuperClass()  +  reflectUpToClass,  excludeFields;	  testTransients    =    clazz.getSuperClass()    +    reflectUpToClass;    	non-compiled	[CE]  ';'  expected	81	None	replace
468	[BUG]  [BUGGY]  builder.append(':');  testTransients  =  clazz.getReturnType()  ==  Token.EXPR_RESULT;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  testTransients  =  clazz.getReturnType()  ==  Token.EXPR_RESULT;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    testTransients  =  clazz.getReturnType()  ==  Token.EXPR_RESULT;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
469	[BUG]  [BUGGY]  builder.append(':');  testTransients  =  clazz.getReturnType()  ==  Token.EXPR_RESTURN;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append(':');  testTransients  =  clazz.getReturnType()  ==  Token.EXPR_RESTURN;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append(':');    testTransients  =  clazz.getReturnType()  ==  Token.EXPR_RESTURN;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
470	[BUG]  [BUGGY]  builder.append('N');  testTransients  =  clazz.getSuperclass();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('N');  testTransients  =  clazz.getSuperclass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('N');    testTransients  =  clazz.getSuperclass();	  	non-compiled	[CE]  incompatible  types	5	None	add
471	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append( ": ");  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	builder.append( ": ");	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
472	[BUG]  [BUGGY]  builder.append( ": ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append( ": ");  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append( ": ");	  builder.append(':');    	compilable	  [FE]  AssertionFailedError  	4	4	replace
473	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExternalClass();  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]              NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExternalClass();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	Class  <?>  clazz  =  clazz.getSuperclass();  clazz  =  clazz.getExternalClass();	          clazz    =    clazz.getSuperclass();    clazz    =    clazz.getExternalClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	55	None	replace
474	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getSuperclass()  *  1;  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getSuperclass()  *  1;	  clazz    =    clazz.getSuperclass()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	79	None	replace
475	[BUG]  [BUGGY]  clazz  =  clazz.getInterface()  ||  clazz.getInterface();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  clazz.getInterface()  ||  clazz.getInterface();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  clazz.getInterface()  ||  clazz.getInterface();	  clazz    =    clazz.getInterface();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
476	[BUG]  [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass.isInterface();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass.isInterface();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	testTransients  =  clazz.getDeclaredType()  ||  reflectUpToClass.isInterface();	  testTransients    =    clazz.getDeclaredType()    ||    reflectUpToClass.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
478	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	35	1	add
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
480	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }	  	compilable	  [FE]  AssertionFailedError  	71	1	add
481	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz	  	non-compiled	[CE]  ';'  expected	71	None	add
482	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
483	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  cla  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  cla  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  cla	  	non-compiled	[CE]  ';'  expected	71	None	add
484	[BUG]  [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]          reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    while    (clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	                reflectionAppend(object,        clazz,        builder,        testTransients,        excludeFields);        while        (clazz.getSuperclass()!=        null        &&        clazz!=        reflectUpToClass)        {        clazz        =        clazz.getSuperclass();        }        while(clazz.getSuperclass()!=    null    &&    clazz!=    reflectUpToClass)    {    clazz    =    clazz.getSuperclass();    }    while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  }  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  return  builder.toHashCode();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	add	if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  return  builder.toHashCode();  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	2	replace
486	[BUG]  [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  return  builder.toHashCode();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  return  builder.toHashCode();  }  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	if(testTransients)  {  builder.append('n');  builder.append('r');  }  else  {  return  builder.toHashCode();  }	          builder.append('n');    builder.append('r');    	compilable	  [FE]  AssertionFailedError  	76	2	replace
487	[BUG]  [BUGGY]  clazz  =  object.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  clazz  =  object.getDeclaredType();  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	clazz  =  object.getDeclaredType();	  clazz    =    clazz.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
488	[BUG]  [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	reflectUpToClass(object,  clazz,  builder,  testTransients,  excludeFields,  excludeFields);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
489	[BUG]  [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	ReflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields,  excludeFields);	  reflectUpToClass(object,    clazz,    builder,    testTransients,    excludeFields,    multiplierNonZeroOddNumber);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
490	[BUG]  [BUGGY]  builder.append('n');  clazz  =  clazz.getTestConstructor();  builder.append('n');  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('n');  clazz  =  clazz.getTestConstructor();  builder.append('n');  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('n');  clazz  =  clazz.getTestConstructor();  builder.append('n');	          builder.append('n');    testTransients    =    clazz.getTestConstructor();    builder.append('n');    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
491	[BUG]  [BUGGY]  builder.append('n',  clazz.getTestConstructor());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  builder.append('n',  clazz.getTestConstructor());  [BUGGY]      reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	builder.append('n',  clazz.getTestConstructor());	          builder.append('n');    testTransients    =    clazz.getTestConstructor();    builder.append('n');    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
492	[BUG]  [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException(     "The  object  to  build  a  hash  code  for  must  not  be  null     ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();      [BUGGY]  while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]      }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	364	364	1	replace	while(clazz.getSuperclass()!=  null  &&  clazz!=  reflectUpToClass)  {  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);	          clazz    =    clazz.getSuperclass();    reflectionAppend(object,    clazz,    builder,    testTransients,    excludeFields);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
