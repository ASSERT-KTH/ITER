bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  clazz  =  clazz.getSuperClass();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]  clazz  =  clazz.getSuperClass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	clazz  =  clazz.getSuperClass();	clazz  =  clazz.getSuperclass();  	non-compiled	[CE]  cannot  find  symbol	37	None	replace
2	[BUG]  [BUGGY]  clazz  =  clazz.getSuperclass()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]  clazz  =  clazz.getSuperclass()  +  1;  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	clazz  =  clazz.getSuperclass()  +  1;	clazz  =  clazz.getSuperclass();  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	37	None	replace
3	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	add	  	clazz  =  clazz.getSuperclass();  	compilable	timeout	37	1	replace
4	[BUG]  [BUGGY]    timeout  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	  	clazz  =  clazz.getSuperclass();  	compilable	timeout	37	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	add	    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		compilable	  [FE]  AssertionFailedError  	38	4	add
6	[BUG]  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		compilable	  [FE]  AssertionFailedError  	38	4	add
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	add	    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		compilable	  [FE]  NullPointerException  	38	3	add
8	[BUG]  [BUGGY]    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [FE]  NullPointerException  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		compilable	  [FE]  NullPointerException  	38	3	add
9	[BUG]  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass);		non-compiled	[CE]  cannot  find  symbol	38	None	add
10	[BUG]  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	38	None	add
11	[BUG]  [BUGGY]    Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]            AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    Class  <?>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	38	None	add
12	[BUG]  [BUGGY]  clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]  clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);	clazz  =  clazz.getSuperclass();  	non-compiled	[CE]  cannot  find  symbol	37	None	replace
13	[BUG]  [BUGGY]  clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]  clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  excludeFields);	clazz  =  clazz.getSuperclass();  	non-compiled	[CE]  cannot  find  symbol	37	None	replace
14	[BUG]  [BUGGY]  clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]  clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	clazz  =  clazz.reflectUpToClass(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  reflectUpToClass,  excludeFields);	clazz  =  clazz.getSuperclass();  	non-compiled	[CE]  cannot  find  symbol	37	None	replace
15	[BUG]  [BUGGY]    ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	38	None	add
16	[BUG]  [BUGGY]    ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    ReflectionHashCodeBuilder  builder  =  new  ReflectionHashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	38	None	add
17	[BUG]  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    ReflectionBuilder  builder  =  new  ReflectionBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber,  testTransients,  reflectUpToClass,  excludeFields);		non-compiled	[CE]  cannot  find  symbol	38	None	add
18	[BUG]  [BUGGY]    Class  <?  super  T>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    Class  <?  super  T>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    Class  <?  super  T>  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	38	None	add
19	[BUG]  [BUGGY]    Class  <?  super  T>  clazz  =  object.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]    Class  <?  super  T>  clazz  =  object.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  [BUGGY]  clazz  =  clazz.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	    Class  <?  super  T>  clazz  =  object.getSuperclass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);		non-compiled	[CE]  variable  clazz  is  already  defined  in  method  <T>reflectionHashCode(int,int,T,boolean,Class<?  super  T>,String[])	38	None	add
20	[BUG]  [BUGGY]  clazz  =  clazz.reflectUpToClass();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]  clazz  =  clazz.reflectUpToClass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	clazz  =  clazz.reflectUpToClass();	clazz  =  clazz.getSuperclass();  	non-compiled	[CE]  cannot  find  symbol	37	None	replace
21	[BUG]  [BUGGY]  clazz  =  object.getSuperclass();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  <T>  int  reflectionHashCode(int  initialNonZeroOddNumber,  int  multiplierNonZeroOddNumber,  T  object,  boolean  testTransients,  Class<?  super  T>  reflectUpToClass,  String[]  excludeFields)  {  if  (object  ==  null)  {  throw  new  IllegalArgumentException( "The  object  to  build  a  hash  code  for  must  not  be  null ");  }  HashCodeBuilder  builder  =  new  HashCodeBuilder(initialNonZeroOddNumber,  multiplierNonZeroOddNumber);  Class<?>  clazz  =  object.getClass();  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  while  (clazz.getSuperclass()  !=  null  &&  clazz  !=  reflectUpToClass)  {  [BUGGY]  clazz  =  object.getSuperclass();  [BUGGY]  reflectionAppend(object,  clazz,  builder,  testTransients,  excludeFields);  }  return  builder.toHashCode();  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionHashCode  [RETURN_TYPE]  <T>  int  initialNonZeroOddNumber  int  multiplierNonZeroOddNumber  T  object  boolean  testTransients  Class<?  super  T>  reflectUpToClass  String[]  excludeFields  [VARIABLES]  boolean  testTransients  T  object  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Class  clazz  reflectUpToClass  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	363	363	1	replace	clazz  =  object.getSuperclass();	clazz  =  clazz.getSuperclass();  	non-compiled	[CE]  cannot  find  symbol	37	None	replace
