bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  UnsupportedOperationException.register(object,  builder);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(object,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(object,  builder);	  UnsupportedOperationException.register(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
2	[BUG]  [BUGGY]  UnsupportedOperationException.register(object,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(object,  constructor);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(object,  constructor);	  UnsupportedOperationException.register(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  constructor	86	None	replace
3	[BUG]  [BUGGY]  UnsupportedOperationException.register(field,  object);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(field,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(field,  object);	  UnsupportedOperationException.register(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  field	86	None	replace
4	[BUG]  [BUGGY]  unregister(object,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  constructor);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  constructor);	  unregister(object,    constructer);    	non-compiled	[CE]  cannot  find  symbol  constructor	111	None	replace
5	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(builder,  object);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().unregisterChild(builder,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(builder,  object);	  ThreadLocal.getInstance().unregisterChild(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
6	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(object,  builder,  fieldValue);	  ThreadLocal.getInstance().unregisterChild(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	109	None	replace
7	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(object,  builder,  iConstant);	  ThreadLocal.getInstance().unregisterChild(object,    builder);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	109	None	replace
8	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  field);  [CE]  cannot  find  symbol  field  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(object,  builder,  field);	  ThreadLocal.getInstance().unregisterChild(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  field	109	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fields  =  clazz.getFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fields  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(object);    Field[]  fields  =  clazz.getFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	add
10	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Object[]  fields  =  clazz.getFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Object[]  fields  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(object);    Object[]  fields  =  clazz.getFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	add
11	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  String[]  fields  =  clazz.getFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  String[]  fields  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(object);    String[]  fields  =  clazz.getFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	add
12	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Integer[]  fields  =  clazz.getFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Integer[]  fields  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(object);    Integer[]  fields  =  clazz.getFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	add
13	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;	  junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
14	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	  junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
15	[BUG]  [BUGGY]  validate(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  fieldValue);	  validate(object,    e);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	72	None	replace
16	[BUG]  [BUGGY]  validate(object,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  iConstant);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  iConstant);	  validate(object,    e);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	72	None	replace
17	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b	          junit.framework.AssertionFailedError:    Expected:    {    null    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	57	None	replace
18	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	          junit.framework.AssertionFailedError:    Expected:    {    null    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	57	None	replace
19	[BUG]  [BUGGY]  Annotated:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Annotated:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Annotated:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	          junit.framework.AssertionFailedError:    Expected:    {    null    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	57	None	replace
20	[BUG]  [BUGGY]  unregister(object,  builder,  clazz,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  clazz,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  clazz,  fieldValue);	  unregister(object,    builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	26	None	replace
21	[BUG]  [BUGGY]  unregister(object,  builder,  clazz,  e);  [CE]  cannot  find  symbol  e  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  clazz,  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  clazz,  e);	  unregister(object,    builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  e	26	None	replace
22	[BUG]  [BUGGY]  unregister(object,  builder,  clazz,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  clazz,  iConstant);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  clazz,  iConstant);	  unregister(object,    builder,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	26	None	replace
23	[BUG]  [BUGGY]  unregister(object,  builder,  clazz,  excludeFields);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  clazz,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  clazz,  excludeFields);	  unregister(object,    builder,    clazz);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	26	None	replace
24	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    	non-compiled	[CE]  incompatible  types	50	None	replace
25	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  fieldValue);	  ThreadLocal.getInstance(builder,    field);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	77	None	replace
26	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  iConstant);	  ThreadLocal.getInstance(builder,    field);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	77	None	replace
27	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getFieldValues();  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fieldValues  =  clazz.getFieldValues();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fieldValues  =  clazz.getFieldValues();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    >=    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
28	[BUG]  [BUGGY]  Field[]  fieldValues  =  clazz.getClasses();  [CE]  incompatible  types  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fieldValues  =  clazz.getClasses();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fieldValues  =  clazz.getClasses();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    >=    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  incompatible  types	25	None	replace
29	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	add
30	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    String[]  fields  =  clazz.getDeclaredFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	add
31	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    Object[]  fields  =  clazz.getDeclaredFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	add
32	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	add
33	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(threadLocal);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(threadLocal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  object.unregister(threadLocal);	  ThreadLocal    threadLocal    =    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
34	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(thenLocal);  [CE]  cannot  find  symbol  thenLocal  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(thenLocal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  object.unregister(thenLocal);	  ThreadLocal    threadLocal    =    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol  thenLocal	89	None	replace
35	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(throwLocal);  [CE]  cannot  find  symbol  throwLocal  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(throwLocal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  object.unregister(throwLocal);	  ThreadLocal    threadLocal    =    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol  throwLocal	89	None	replace
36	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(thresholdLocal);  [CE]  cannot  find  symbol  thresholdLocal  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  object.unregister(thresholdLocal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  object.unregister(thresholdLocal);	  ThreadLocal    threadLocal    =    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol  thresholdLocal	89	None	replace
37	[BUG]  [BUGGY]  UnregisteredField(object,  builder);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnregisteredField(object,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnregisteredField(object,  builder);	  UnregisteredField(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
38	[BUG]  [BUGGY]  UnregisteredField(object,  clazz);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnregisteredField(object,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnregisteredField(object,  clazz);	  UnregisteredField(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
39	[BUG]  [BUGGY]  UnregisteredField(object,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnregisteredField(object,  constructor);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnregisteredField(object,  constructor);	  UnregisteredField(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  constructor	102	None	replace
40	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  this.threadLocal.getThreadLocal();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  this.threadLocal.getThreadLocal();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  this.threadLocal.getThreadLocal();	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocal();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	96	None	replace
41	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocals.getThreadLocal();  [CE]  cannot  find  symbol  threadLocals  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocals.getThreadLocal();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocals.getThreadLocal();	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocal();    	non-compiled	[CE]  cannot  find  symbol  threadLocals	96	None	replace
42	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  clazz.getThreadLocal();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  clazz.getThreadLocal();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  clazz.getThreadLocal();	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocal();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
43	[BUG]  [BUGGY]  unregister(object,  builder,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  iTotal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  iTotal);	  unregister(object,    builder,    iConstant);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	71	None	replace
44	[BUG]  [BUGGY]  UnsupportedOperationException.register(builder,  object);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(builder,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(builder,  object);	  UnsupportedOperationException.register(builder,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
45	[BUG]  [BUGGY]  UnsupportedOperationException.register(builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(builder,  iConstant);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(builder,  iConstant);	  UnsupportedOperationException.register(builder,    fieldValue);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	13	None	replace
46	[BUG]  [BUGGY]  UnsupportedOperationException.register(builder,  clazz);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(builder,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(builder,  clazz);	  UnsupportedOperationException.register(builder,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
47	[BUG]  [BUGGY]  field[]  fields  =  clazz.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	field[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
48	[BUG]  [BUGGY]  String[]  fields  =  clazz.getFields();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  String[]  fields  =  clazz.getFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	String[]  fields  =  clazz.getFields();	          Field[]    fields    =    clazz.getFields();    String[]    fields    =    clazz.getFields();    	non-compiled	[CE]  incompatible  types	53	None	replace
49	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(object,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(object,  fieldValue);	  ThreadLocal.getInstance().reportCodeChange(e,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	20	None	replace
50	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(fieldValue,  iConstant);  [CE]  cannot  find  symbol  fieldValue  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(fieldValue,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(fieldValue,  iConstant);	  ThreadLocal.getInstance().reportCodeChange(e,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	20	None	replace
51	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(fieldValue,  iTotal);  [CE]  cannot  find  symbol  fieldValue  [FE]                          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(fieldValue,  iTotal);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(fieldValue,  iTotal);	  ThreadLocal.getInstance().reportCodeChange(e,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	20	None	replace
52	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(builder,  fieldValue);	  ThreadLocal.getInstance().reportCodeChange(e,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	20	None	replace
53	[BUG]  [BUGGY]  UnsupportedOperationException.register(object,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(object,  iTotal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(object,  iTotal);	  UnsupportedOperationException.register(fieldValue,    iTotal);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	85	None	replace
54	[BUG]  [BUGGY]  UnsupportedOperationException.register(iTotal,  fieldValue);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(iTotal,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(iTotal,  fieldValue);	  UnsupportedOperationException.register(fieldValue,    iTotal);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	85	None	replace
55	[BUG]  [BUGGY]  UnsupportedOperationException.register(iConstant,  iTotal);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(iConstant,  iTotal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(iConstant,  iTotal);	  UnsupportedOperationException.register(fieldValue,    iTotal);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	85	None	replace
56	[BUG]  [BUGGY]  ThreadLocal.getInstance(object,  builder);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(object,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(object,  builder);	  ThreadLocal.getInstance(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
57	[BUG]  [BUGGY]  ThreadLocal.getInstance(object,  clazz,  builder);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(object,  clazz,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(object,  clazz,  builder);	  ThreadLocal.getInstance(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
58	[BUG]  [BUGGY]  ThreadLocal.getInstance(object,  builder,  clazz);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(object,  builder,  clazz);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(object,  builder,  clazz);	  ThreadLocal.getInstance(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
59	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0	  junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	15	None	replace
60	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b	  junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	15	None	replace
61	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocals.getThreadLocals();  [CE]  cannot  find  symbol  threadLocals  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocals.getThreadLocals();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocals.getThreadLocals();	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocals();    	non-compiled	[CE]  cannot  find  symbol  threadLocals	97	None	replace
62	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  this.threadLocals.getThreadLocals();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  this.threadLocals.getThreadLocals();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  this.threadLocals.getThreadLocals();	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocals();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	97	None	replace
63	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocals(false);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocals(false);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocals(false);	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocals();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
64	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
65	[BUG]  [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
66	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
67	[BUG]  [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
68	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
69	[BUG]  [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
70	[BUG]  [BUGGY]  validate(object,  clazz,  e);  [CE]  cannot  find  symbol  e  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  clazz,  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  clazz,  e);	  validate(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol  e	74	None	replace
71	[BUG]  [BUGGY]  validate(object,  clazz,  builder);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  clazz,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  clazz,  builder);	  validate(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
72	[BUG]  [BUGGY]  validate(object,  clazz,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  clazz,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  clazz,  fieldValue);	  validate(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	74	None	replace
73	[BUG]  [BUGGY]  catch(Throwable  ne)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(Throwable  ne)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(Throwable  ne)  {  throw  new  IllegalStateException( " ");  }	  try    {    [Delete]    catch(NoClassCastException    ne)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	115	None	replace
74	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	throw  new  IllegalStateException( " ");	  try    {    [Delete]    catch(NoClassCastException    ne)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	4	replace
75	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	throw  new  IllegalStateException( " ");	  try    {    [Delete]    catch(NoClassCastException    ne)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	115	4	replace
76	[BUG]  [BUGGY]  try  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  try  {  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	try  {	  try    {    [Delete]    catch(NoClassCastException    ne)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	115	None	replace
77	[BUG]  [BUGGY]  while(!useTransients)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  while(!useTransients)  {  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	while(!useTransients)  {	  try    {    [Delete]    catch(NoClassCastException    ne)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
78	[BUG]  [BUGGY]  int  fieldCount  =  field.get(object);  [CE]  cannot  find  symbol  field  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  fieldCount  =  field.get(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  fieldCount  =  field.get(object);	  int    objectCount    =    field.get(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  field	75	None	replace
79	[BUG]  [BUGGY]  int  fieldValueCount  =  field.get(object);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  fieldValueCount  =  field.get(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  fieldValueCount  =  field.get(object);	  int    objectCount    =    field.get(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  field	75	None	replace
80	[BUG]  [BUGGY]  int  fieldValueCount  =  field.get(field);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  fieldValueCount  =  field.get(field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  fieldValueCount  =  field.get(field);	  int    objectCount    =    field.get(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  field	75	None	replace
81	[BUG]  [BUGGY]  int  fieldCount  =  field.get(iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  fieldCount  =  field.get(iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  fieldCount  =  field.get(iConstant);	  int    objectCount    =    field.get(fieldValue);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	75	None	replace
82	[BUG]  [BUGGY]  unregister(object,  builder,  fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  fieldValue,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  fieldValue,  excludeFields);	  unregister(object,    builder,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	68	None	replace
83	[BUG]  [BUGGY]  unregister(object,  builder,  excludeFields,  e);  [CE]  cannot  find  symbol  e  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  excludeFields,  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  excludeFields,  e);	  unregister(object,    builder,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  e	68	None	replace
84	[BUG]  [BUGGY]  unregister(object,  builder,  excludeFields,  useTransients);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  excludeFields,  useTransients);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  excludeFields,  useTransients);	  unregister(object,    builder,    excludeFields);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	68	None	replace
85	[BUG]  [BUGGY]  unregister(object,  builder,  fields,  excludeFields);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  fields,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  fields,  excludeFields);	  unregister(object,    builder,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fields	68	None	replace
86	[BUG]  [BUGGY]  int  objectCount  =  this.fields.get(object);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  this.fields.get(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  this.fields.get(object);	  int    objectCount    =    fields.get(object);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	47	None	replace
87	[BUG]  [BUGGY]  int  objectCount  =  clazz.get(object);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  clazz.get(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  clazz.get(object);	  int    objectCount    =    fields.get(object);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
88	[BUG]  [BUGGY]  catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ");  }	  try    {    [Delete]    catch(NoClassCastException    e)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
89	[BUG]  [BUGGY]  catch(Throwable  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(Throwable  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(Throwable  e)  {  throw  new  IllegalStateException( " ");  }	  try    {    [Delete]    catch(NoClassCastException    e)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
90	[BUG]  [BUGGY]  catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ",  e);  }  [CE]  [FE]            IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ",  e);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ",  e);  }	  try    {    [Delete]    catch(NoClassCastException    e)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
91	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclassFields(excludeFields);	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
92	[BUG]  [BUGGY]  Field[]  fields  =  object.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  object.getSuperclassFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  object.getSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
93	[BUG]  [BUGGY]  unregister(object,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  iTotal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  iTotal);	  unregister(object,    iConstant);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	4	None	replace
94	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iTotal]);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iTotal]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iTotal]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	51	None	replace
95	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[object]);  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[object]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[object]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  incompatible  types	51	None	replace
96	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[objectValue]);  [CE]  cannot  find  symbol  objectValue  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[objectValue]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[objectValue]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  cannot  find  symbol  objectValue	51	None	replace
97	[BUG]  [BUGGY]  allowNonZeroOddNumber(object,  builder);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  allowNonZeroOddNumber(object,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(object,  builder);	  allowNonZeroOddNumber(object);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
98	[BUG]  [BUGGY]  allowNonZeroOddNumber(object,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]            IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  allowNonZeroOddNumber(object,  iTotal);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(object,  iTotal);	  allowNonZeroOddNumber(object);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	39	None	replace
99	[BUG]  [BUGGY]  allowNonZeroOddNumber(initialNonZeroOddNumber);  [CE]  cannot  find  symbol  initialNonZeroOddNumber  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  allowNonZeroOddNumber(initialNonZeroOddNumber);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(initialNonZeroOddNumber);	  allowNonZeroOddNumber(object);    	non-compiled	[CE]  cannot  find  symbol  initialNonZeroOddNumber	39	None	replace
100	[BUG]  [BUGGY]  allowNonZeroOddNumber(initialNonZeroOddNumber,  object);  [CE]  cannot  find  symbol  initialNonZeroOddNumber  [FE]                IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  allowNonZeroOddNumber(initialNonZeroOddNumber,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(initialNonZeroOddNumber,  object);	  allowNonZeroOddNumber(object);    	non-compiled	[CE]  cannot  find  symbol  initialNonZeroOddNumber	39	None	replace
101	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	66	None	add
102	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	66	None	add
103	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	66	None	add
104	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	66	None	add
105	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	66	None	add
106	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(object);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(object);	  Field[]    fields    =    clazz.getDeclaredFields(fieldValue);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	95	None	replace
107	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(objectValue);  [CE]  cannot  find  symbol  objectValue  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(objectValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(objectValue);	  Field[]    fields    =    clazz.getDeclaredFields(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  objectValue	95	None	replace
108	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(iConstant);	  Field[]    fields    =    clazz.getDeclaredFields(fieldValue);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	95	None	replace
109	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[iTotal]);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[iTotal]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[iTotal]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	37	None	replace
110	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[0]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[iConstant]);    	compilable	  [FE]  NullPointerException  	37	4	replace
111	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[0]);  [FE]  NullPointerException  [FE]                            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[0]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[iConstant]);    	compilable	  [FE]  NullPointerException  	37	4	replace
112	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[object]);  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[object]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[object]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  incompatible  types	37	None	replace
113	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[objectValue]);  [CE]  cannot  find  symbol  objectValue  [FE]                                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[objectValue]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[objectValue]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  cannot  find  symbol  objectValue	37	None	replace
114	[BUG]  [BUGGY]  ThreadLocal.getInstance(class,  clazz,  builder);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(class,  clazz,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(class,  clazz,  builder);	  ThreadLocal.getInstance(class,    clazz);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
115	[BUG]  [BUGGY]  ThreadLocal.getInstance(class,  object);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(class,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(class,  object);	  ThreadLocal.getInstance(class,    clazz);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
116	[BUG]  [BUGGY]  ThreadLocal.getInstance(class,  fieldValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(class,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(class,  fieldValue);	  ThreadLocal.getInstance(class,    clazz);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
117	[BUG]  [BUGGY]  ThreadLocal.getInstance(class,  builder);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(class,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(class,  builder);	  ThreadLocal.getInstance(class,    clazz);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
118	[BUG]  [BUGGY]  unregister(object,  clazz,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  constructor);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  constructor);	  unregister(object,    clazz,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  constructor	27	None	replace
119	[BUG]  [BUGGY]  unregister(object,  clazz,  value);  [CE]  cannot  find  symbol  value  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  value);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  value);	  unregister(object,    clazz,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  value	27	None	replace
120	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields(fieldValue,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	83	None	replace
121	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(object,  excludeFields);  [CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields(object,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields(object,  excludeFields);	  Field[]    fields    =    clazz.getFields(excludeFields);    	non-compiled	[CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;	83	None	replace
122	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(iConstant,  excludeFields);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields(iConstant,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields(iConstant,  excludeFields);	  Field[]    fields    =    clazz.getFields(excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	83	None	replace
123	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(field,  excludeFields);  [CE]  cannot  find  symbol  field  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields(field,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields(field,  excludeFields);	  Field[]    fields    =    clazz.getFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
124	[BUG]  [BUGGY]  UnsupportedOperation.checkState(object  ==  null);  [CE]  cannot  find  symbol  UnsupportedOperation  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkState(object  ==  null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkState(object  ==  null);	  UnsupportedOperation.checkState(fieldValue    ==    null);    	non-compiled	[CE]  cannot  find  symbol  UnsupportedOperation	14	None	replace
125	[BUG]  [BUGGY]  UnsupportedOperation.checkState(object!=  null);  [CE]  cannot  find  symbol  UnsupportedOperation  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkState(object!=  null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkState(object!=  null);	  UnsupportedOperation.checkState(fieldValue    ==    null);    	non-compiled	[CE]  cannot  find  symbol  UnsupportedOperation	14	None	replace
126	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  object,  clazz);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  object,  clazz);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  object,  clazz);	  ThreadLocal.getInstance(builder,    object);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
127	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  object,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  object,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  object,  iConstant);	  ThreadLocal.getInstance(builder,    object);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	98	None	replace
128	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  object,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  object,  fieldValue);	  ThreadLocal.getInstance(builder,    object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	98	None	replace
129	[BUG]  [BUGGY]  allowNonZeroOddNumber(iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  allowNonZeroOddNumber(iTotal);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(iTotal);	  allowNonZeroOddNumber(fieldValue);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	41	None	replace
130	[BUG]  [BUGGY]  allowNonZeroOddNumber(iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  allowNonZeroOddNumber(iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(iConstant);	  allowNonZeroOddNumber(fieldValue);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	41	None	replace
131	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4c06fe04  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Object[]  fields  =  clazz.getFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Object[]  fields  =  clazz.getFields();	          Field[]    fields    =    clazz.getFields();    Object[]    fields    =    clazz.getFields();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4c06fe04  	54	3	replace
132	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getFields();  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4c06fe04  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Object[]  fields  =  clazz.getFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Object[]  fields  =  clazz.getFields();	          Field[]    fields    =    clazz.getFields();    Object[]    fields    =    clazz.getFields();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4c06fe04  	54	3	replace
133	[BUG]  [BUGGY]  catch(NoClassDefFoundError  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(NoClassDefFoundError  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(NoClassDefFoundError  e)  {  throw  new  IllegalStateException( " ");  }	  try    {    [Delete]    catch(NoClassDefFoundError    e)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	114	None	replace
134	[BUG]  [BUGGY]  int  objectCount  =  field.get(initialNonZeroOddNumber);  [CE]  cannot  find  symbol  initialNonZeroOddNumber  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  field.get(initialNonZeroOddNumber);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  field.get(initialNonZeroOddNumber);	  int    objectCount    =    field.get(iConstant);    	non-compiled	[CE]  cannot  find  symbol  initialNonZeroOddNumber	46	None	replace
135	[BUG]  [BUGGY]  int  objectCount  =  field.get(iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  field.get(iTotal);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  field.get(iTotal);	  int    objectCount    =    field.get(iConstant);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	46	None	replace
136	[BUG]  [BUGGY]  int  objectCount  =  fieldValue.get(iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  fieldValue.get(iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  fieldValue.get(iConstant);	  int    objectCount    =    field.get(iConstant);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	46	None	replace
137	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(null,  fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(null,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(null,  fieldValue);	  Class    <?>    object    =    clazz.getSuperclass(null);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	78	None	replace
138	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(object);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(object);	  Class    <?>    object    =    clazz.getSuperclass(null);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	78	None	replace
139	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(iConstant);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(iConstant);	  Class    <?>    object    =    clazz.getSuperclass(null);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	78	None	replace
140	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    	non-compiled	[CE]  incompatible  types	94	None	replace
141	[BUG]  [BUGGY]  ThreadLocal.unregister(builder,  object);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.unregister(builder,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.unregister(builder,  object);	  ThreadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
142	[BUG]  [BUGGY]  ThreadLocal.unregister(object,  builder,  e);  [CE]  cannot  find  symbol  e  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.unregister(object,  builder,  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.unregister(object,  builder,  e);	  ThreadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  e	31	None	replace
143	[BUG]  [BUGGY]  ThreadLocal.unregister(object,  builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.unregister(object,  builder,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.unregister(object,  builder,  fieldValue);	  ThreadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	31	None	replace
144	[BUG]  [BUGGY]  ThreadLocal.unregister(object,  builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.unregister(object,  builder,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.unregister(object,  builder,  excludeFields);	  ThreadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
145	[BUG]  [BUGGY]  unregister(object,  clazz,  null);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  null);	  unregister(object,    clazz,    iConstant);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	92	None	replace
146	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(fieldValue);	  ThreadLocal.getInstance().reportCodeChange(e);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
147	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(object);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(object);	  ThreadLocal.getInstance().reportCodeChange(e);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
148	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(this,  fieldValue);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(this,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(this,  fieldValue);	  ThreadLocal.getInstance().reportCodeChange(e);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	18	None	replace
149	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  field);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
150	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  object);  [CE]  no  suitable  method  found  for  append(String[],Object)  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  object);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  append(String[],Object)	35	None	replace
151	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  value);  [CE]  cannot  find  symbol  value  [FE]                          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  value);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  value);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  value	35	None	replace
152	[BUG]  [BUGGY]  validate(object,  builder,  e);  [CE]  cannot  find  symbol  e  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  builder,  e);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  builder,  e);	  validate(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  e	73	None	replace
153	[BUG]  [BUGGY]  validate(object,  builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  builder,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  builder,  excludeFields);	  validate(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
154	[BUG]  [BUGGY]  validate(object,  builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  builder,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  builder,  fieldValue);	  validate(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	73	None	replace
155	[BUG]  [BUGGY]  validate(object,  builder,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  builder,  iTotal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  builder,  iTotal);	  validate(object,    builder);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	73	None	replace
156	[BUG]  [BUGGY]  Class  <?>  object  =  builder.getClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  builder.getClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  builder.getClass();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	24	None	replace
157	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	          junit.framework.AssertionFailedError:    Expected:    <    object>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
158	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0	          junit.framework.AssertionFailedError:    Expected:    <    object>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	90	None	replace
159	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0b	          junit.framework.AssertionFailedError:    Expected:    <    object>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	90	None	replace
160	[BUG]  [BUGGY]  ThreadLocal.getInstance(fieldValue,  builder);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(fieldValue,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(fieldValue,  builder);	  ThreadLocal.getInstance(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	6	None	replace
161	[BUG]  [BUGGY]  ThreadLocal.getInstance(this.fieldValue);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(this.fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(this.fieldValue);	  ThreadLocal.getInstance(fieldValue);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
162	[BUG]  [BUGGY]  ThreadLocal.getInstance(baseValue);  [CE]  cannot  find  symbol  baseValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(baseValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(baseValue);	  ThreadLocal.getInstance(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  baseValue	6	None	replace
163	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i].getName());  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i].getName());  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i].getName());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i].getName());    	non-compiled	[CE]  cannot  find  symbol  i	108	None	replace
164	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4e175b05  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0].getName());  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0].getName());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i].getName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4e175b05  	108	4	replace
165	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0].getName());  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4e175b05  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0].getName());  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0].getName());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i].getName());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@4e175b05  	108	4	replace
166	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iConstant].getName());  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iConstant].getName());  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iConstant].getName());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i].getName());    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	108	None	replace
167	[BUG]  [BUGGY]  unregister(object,  constructer,  clazz);  [CE]  cannot  find  symbol  constructer  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  constructer,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  constructer,  clazz);	  unregister(object,    clazz,    builder);    	non-compiled	[CE]  cannot  find  symbol  constructer	28	None	replace
168	[BUG]  [BUGGY]  unregister(builder,  clazz,  object);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(builder,  clazz,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(builder,  clazz,  object);	  unregister(object,    clazz,    builder);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	28	None	replace
169	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getReferences();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getReferences();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getReferences();	          Field[]    fields    =    clazz.getFields();    Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
170	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	String[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  incompatible  types	58	None	replace
171	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getReferenceFields();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getReferenceFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getReferenceFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
172	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue[0]);  [CE]  cannot  find  symbol  fieldValue  [FE]    NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue[0]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	67	None	replace
173	[BUG]  [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    	non-compiled	[CE]  incompatible  types	67	None	replace
174	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[0]);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields[0]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
175	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  e);  [CE]  cannot  find  symbol  e  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  e);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(builder,  e);	  ThreadLocal.getInstance().reportCodeChange(builder);    	non-compiled	[CE]  cannot  find  symbol  e	87	None	replace
176	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  field);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(builder,  field);	  ThreadLocal.getInstance().reportCodeChange(builder);    	non-compiled	[CE]  cannot  find  symbol  field	87	None	replace
177	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(field,  builder);  [CE]  cannot  find  symbol  field  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(field,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(field,  builder);	  ThreadLocal.getInstance().reportCodeChange(builder);    	non-compiled	[CE]  cannot  find  symbol  field	87	None	replace
178	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0aeb  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0aeb  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0aeb	          junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@3end0aeb    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
179	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0b  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0b  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0b	          junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@3end0aeb    	non-compiled	[CE]  not  a  statement	110	None	replace
180	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  while(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	while(object!=  null)  {  throw  new  IllegalStateException( " ");  }	  While(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	38	4	replace
181	[BUG]  [BUGGY]  while(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  while(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	while(object!=  null)  {  throw  new  IllegalStateException( " ");  }	  While(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	38	4	replace
182	[BUG]  [BUGGY]  While(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  While(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	While(object  ==  null)  {  throw  new  IllegalStateException( " ");  }	  While(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
183	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object!=  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	21	4	add
184	[BUG]  [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object!=  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object!=  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	21	4	add
185	[BUG]  [BUGGY]  String[]  fields  =  clazz.getFields();  builder.append(fieldValue);  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  String[]  fields  =  clazz.getFields();  builder.append(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	String[]  fields  =  clazz.getFields();  builder.append(fieldValue);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields);    	non-compiled	[CE]  incompatible  types	34	None	replace
186	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getDeclaredFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  clazz  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  clazz  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	60	None	replace
187	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclassFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclassFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclassFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	60	None	replace
188	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Object[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	60	None	replace
189	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(excludeFields);    Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	33	None	add
190	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  String[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  String[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(excludeFields);    String[]  fields  =  clazz.getFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	33	None	add
191	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Object[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Object[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(excludeFields);    Object[]  fields  =  clazz.getFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	33	None	add
192	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Integer[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Integer[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(excludeFields);    Integer[]  fields  =  clazz.getFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	33	None	add
193	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	add
194	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[1]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[1]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[1]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	add
195	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    String[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	add
196	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    Object[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	add
197	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	49	None	add
198	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@6b428b70  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Object[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Object[]    fields    =    clazz.getDeclaredFields();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@6b428b70  	61	3	replace
199	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@6b428b70  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Object[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Object[]    fields    =    clazz.getDeclaredFields();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@6b428b70  	61	3	replace
200	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Object[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  incompatible  types	61	None	replace
201	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	10	None	replace
202	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(object,  excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(object,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(object,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	10	None	replace
203	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(iConstant,  excludeFields);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(iConstant,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(iConstant,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	10	None	replace
204	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field,  excludeFields);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(field,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(field,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
205	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0],  excludeFields[1]);  [CE]  no  suitable  method  found  for  append(Field,String)  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0],  excludeFields[1]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0],  excludeFields[1]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i],    excludeFields[i]);    	non-compiled	[CE]  no  suitable  method  found  for  append(Field,String)	107	None	replace
206	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i],  fieldValue[i]);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i],  fieldValue[i]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i],  fieldValue[i]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i],    excludeFields[i]);    	non-compiled	[CE]  cannot  find  symbol  i	107	None	replace
207	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0],  excludeFields[0]);  [CE]  no  suitable  method  found  for  append(Field,String)  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0],  excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0],  excludeFields[0]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i],    excludeFields[i]);    	non-compiled	[CE]  no  suitable  method  found  for  append(Field,String)	107	None	replace
208	[BUG]  [BUGGY]  UnsupportedOperation  object  =  createUnsupportedOperation(object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  object  =  createUnsupportedOperation(object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  object  =  createUnsupportedOperation(object);	  UnsupportedOperation    obj    =    createUnsupportedOperation(object);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
209	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  builder);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(object,  builder);	  UnsupportedOperation    obj    =    createUnsupportedOperation(object);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
210	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  constructor);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  constructor);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(object,  constructor);	  UnsupportedOperation    obj    =    createUnsupportedOperation(object);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
211	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  fieldValue);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(object,  fieldValue);	  UnsupportedOperation    obj    =    createUnsupportedOperation(object);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
212	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  ThreadLocal.getInstance();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  ThreadLocal.getInstance();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  ThreadLocal.getInstance();	  ThreadLocal    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
213	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  ThreadLocal.getInstance(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  ThreadLocal.getInstance(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  ThreadLocal.getInstance(fieldValue);	  ThreadLocal    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	32	None	replace
214	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  ThreadLocal.getInstance(object);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  ThreadLocal.getInstance(object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  ThreadLocal.getInstance(object);	  ThreadLocal    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
215	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(field);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(field);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(exclusionFields);    	non-compiled	[CE]  cannot  find  symbol  field	76	None	replace
216	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(exclusionFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	76	None	replace
217	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.unregister(object,  builder);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.unregister(object,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.unregister(object,  builder);	  threadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
218	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  builder.unregister(object,  object);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  builder.unregister(object,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  builder.unregister(object,  object);	  threadLocal.unregister(object,    builder);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	30	None	replace
219	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  builder.unregister(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  builder.unregister(object,  fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  builder.unregister(object,  fieldValue);	  threadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	30	None	replace
220	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getRawClass(iConstant);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getRawClass(iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getRawClass(iConstant);	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
221	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getReturnType();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getReturnType();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getReturnType();	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
222	[BUG]  [BUGGY]  unregister(object,  fieldValue,  builder);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  fieldValue,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  fieldValue,  builder);	  unregister(field,    object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	99	None	replace
223	[BUG]  [BUGGY]  unregister(object,  object,  builder);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  object,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  object,  builder);	  unregister(field,    object,    builder);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	99	None	replace
224	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  clazz  =  clazz.getSuperclass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	81	None	replace
225	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getSuperclass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	81	None	replace
226	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclass();  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclass();  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclass();  Class  <?>  clazz  =  clazz.getSuperclass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  incompatible  types	81	None	replace
227	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclasses(excludeFields);	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
228	[BUG]  [BUGGY]  Field[]  fields  =  object.getSuperclasses();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  object.getSuperclasses();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  object.getSuperclasses();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
229	[BUG]  [BUGGY]  unregister(object,  clazz,  fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  fieldValue,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  fieldValue,  excludeFields);	  unregister(object,    clazz,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	91	None	replace
230	[BUG]  [BUGGY]  unregister(object,  clazz,  builder,  excludeFields);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  builder,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  builder,  excludeFields);	  unregister(object,    clazz,    excludeFields);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	91	None	replace
231	[BUG]  [BUGGY]  unregister(object,  clazz,  excludeFields,  useTransients);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  excludeFields,  useTransients);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  excludeFields,  useTransients);	  unregister(object,    clazz,    excludeFields);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	91	None	replace
232	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	63	None	add
233	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    String[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	63	None	add
234	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	63	None	add
235	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	63	None	add
236	[BUG]  [BUGGY]  ThreadLocal.getInstance(base,  object);  [CE]  cannot  find  symbol  base  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(base,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(base,  object);	  ThreadLocal.getInstance(base,    clazz);    	non-compiled	[CE]  cannot  find  symbol  base	2	None	replace
237	[BUG]  [BUGGY]  threadLocal.unregister(field);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  threadLocal.unregister(field);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	threadLocal.unregister(field);	  threadLocal.unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  field	88	None	replace
238	[BUG]  [BUGGY]  threadLocal.unregister(throwable);  [CE]  cannot  find  symbol  throwable  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  threadLocal.unregister(throwable);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	threadLocal.unregister(throwable);	  threadLocal.unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  throwable	88	None	replace
239	[BUG]  [BUGGY]  UnsupportedOperation.checkNotNull(object);  [CE]  cannot  find  symbol  UnsupportedOperation  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkNotNull(object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkNotNull(object);	  UnsupportedOperation.checkNotNull(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  UnsupportedOperation	84	None	replace
240	[BUG]  [BUGGY]  UnsupportedOperation.checkNotNull(objectValue);  [CE]  cannot  find  symbol  objectValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkNotNull(objectValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkNotNull(objectValue);	  UnsupportedOperation.checkNotNull(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  objectValue	84	None	replace
241	[BUG]  [BUGGY]  UnsupportedOperation.checkNotNull(baseValue);  [CE]  cannot  find  symbol  baseValue  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkNotNull(baseValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkNotNull(baseValue);	  UnsupportedOperation.checkNotNull(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  baseValue	84	None	replace
242	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getFields();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Integer[]  fields  =  clazz.getFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Integer[]  fields  =  clazz.getFields();	          Field[]    fields    =    clazz.getFields();    Integer[]    fields    =    clazz.getFields();    	non-compiled	[CE]  incompatible  types	80	None	replace
243	[BUG]  [BUGGY]  int[]  fields  =  clazz.getFields();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int[]  fields  =  clazz.getFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int[]  fields  =  clazz.getFields();	          Field[]    fields    =    clazz.getFields();    Integer[]    fields    =    clazz.getFields();    	non-compiled	[CE]  incompatible  types	80	None	replace
244	[BUG]  [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Integer[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Integer[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Integer[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  incompatible  types	82	None	replace
245	[BUG]  [BUGGY]  int[]  fields  =  clazz.getDeclaredFields();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Integer[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  incompatible  types	82	None	replace
246	[BUG]  [BUGGY]  ThreadLocal.getInstance(clazz,  builder);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(clazz,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(clazz,  builder);	  ThreadLocal.getInstance(builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
247	[BUG]  [BUGGY]  ThreadLocal.getInstance(base,  builder,  clazz);  [CE]  cannot  find  symbol  base  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(base,  builder,  clazz);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(base,  builder,  clazz);	  ThreadLocal.getInstance(builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  base	79	None	replace
248	[BUG]  [BUGGY]  Class  <?>  clazz  =  clazz.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  clazz  =  clazz.getRawClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  clazz  =  clazz.getRawClass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	55	None	replace
249	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getRawClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getRawClass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	55	None	replace
250	[BUG]  [BUGGY]  String[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  String[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	String[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  incompatible  types	55	None	replace
251	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  object);  [CE]  no  suitable  method  found  for  append(String[],Object)  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  object);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  append(String[],Object)	65	None	replace
252	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  field);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  field);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  field	65	None	replace
253	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  value);  [CE]  cannot  find  symbol  value  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  value);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  value);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  value	65	None	replace
254	[BUG]  [BUGGY]  field[]  fields  =  clazz.getFields();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  field[]  fields  =  clazz.getFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	field[]  fields  =  clazz.getFields();	          Field[]    fields    =    clazz.getFields();    field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
255	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(field);  [CE]  cannot  find  symbol  field  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(field);	  Field[]    fields    =    clazz.getFields();    builder.append(exclusionFields);    	non-compiled	[CE]  cannot  find  symbol  field	36	None	replace
256	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  constructer.append(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  constructer.append(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  constructer.append(fieldValue);	  Field[]    fields    =    clazz.getFields();    builder.append(exclusionFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	36	None	replace
257	[BUG]  [BUGGY]  UnsupportedOperation  object  =  createUnsupportedOperation();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  object  =  createUnsupportedOperation();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  object  =  createUnsupportedOperation();	  UnsupportedOperation    obj    =    createUnsupportedOperation();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
258	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(fieldValue);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(fieldValue);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(fieldValue);	  UnsupportedOperation    obj    =    createUnsupportedOperation();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
259	[BUG]  [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
260	[BUG]  [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  [FE]            IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(Throwable  t)  {  throw  new  IllegalStateException( " ".getMessage());  }	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
261	[BUG]  [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ",  e);  }  [CE]  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ",  e);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(Throwable  t)  {  throw  new  IllegalStateException( " ",  e);  }	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
262	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  builder);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(fieldValue,  builder);	  Class    <?>    object    =    clazz.getSuperclass(fieldValue);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	44	None	replace
263	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  useTransients);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  useTransients);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(fieldValue,  useTransients);	  Class    <?>    object    =    clazz.getSuperclass(fieldValue);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	44	None	replace
264	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  constructor);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  constructor);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(fieldValue,  constructor);	  Class    <?>    object    =    clazz.getSuperclass(fieldValue);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	44	None	replace
265	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperClass(fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperClass(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperClass(fieldValue);	  Class    <?>    object    =    clazz.getSuperClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	42	None	replace
266	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(object,  field);  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(object,  field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(object,  field);	  ThreadLocal.getInstance().reportCodeChange(e,    field);    	non-compiled	[CE]  cannot  find  symbol  field	19	None	replace
267	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(field,  e);  [CE]  cannot  find  symbol  field  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(field,  e);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(field,  e);	  ThreadLocal.getInstance().reportCodeChange(e,    field);    	non-compiled	[CE]  cannot  find  symbol  field	19	None	replace
268	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(field,  iConstant);  [CE]  cannot  find  symbol  field  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(field,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(field,  iConstant);	  ThreadLocal.getInstance().reportCodeChange(e,    field);    	non-compiled	[CE]  cannot  find  symbol  field	19	None	replace
269	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@10ff4564  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getFields();  builder.append(fields);	  Field[]    fields    =    clazz.getFields();    builder.append(exclusionFields);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@10ff4564  	36	3	replace
270	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fields);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@10ff4564  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fields);	  Field[]    fields    =    clazz.getFields();    builder.append(exclusionFields);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@10ff4564  	36	3	replace
271	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]                          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getFields();    builder.append(exclusionFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	36	None	replace
272	[BUG]  [BUGGY]  unregister(object,  builder,  fields);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  fields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  fields);	  unregister(object,    builder,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  fields	71	None	replace
273	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassesArray();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclassesArray();	  Field[]    fields    =    clazz.getSuperclasses();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
274	[BUG]  [BUGGY]  unregister(object,  clazz,  fields);  [CE]  cannot  find  symbol  fields  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  fields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  fields);	  unregister(object,    clazz,    iConstant);    	non-compiled	[CE]  cannot  find  symbol  fields	92	None	replace
275	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocal(null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocal(null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocal(null);	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocal();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
276	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocal(false);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocal(false);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocal(false);	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocal();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
277	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  field.getThreadLocal();  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  field.getThreadLocal();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  field.getThreadLocal();	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocal();    	non-compiled	[CE]  cannot  find  symbol  field	96	None	replace
278	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.get();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.get();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.get();	  ThreadLocal    threadLocal.unregister(object);    	non-compiled	[CE]  incompatible  types	32	None	replace
279	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@2be0aeb  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@2be0aeb  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@2be0aeb	  junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@2be0aeb    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
280	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  clazz);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  clazz);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(object,  builder,  clazz);	  ThreadLocal.getInstance().unregisterChild(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
281	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(object,  builder,  excludeFields);	  ThreadLocal.getInstance().unregisterChild(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
282	[BUG]  [BUGGY]  Field[]  fields  =  clazz.withSuperclassFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.withSuperclassFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.withSuperclassFields();	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
283	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  clazz);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(object,  clazz);	  UnsupportedOperation    obj    =    createUnsupportedOperation(object);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
284	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getReferences();  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getReferences();  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getReferences();  Class  <?>  clazz  =  clazz.getSuperclass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
285	[BUG]  [BUGGY]  ThreadLocal.getInstance(clazz,  object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(clazz,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(clazz,  object);	  ThreadLocal.getInstance(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
286	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  clazz,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  clazz,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  clazz,  iConstant);	  ThreadLocal.getInstance(builder,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	79	None	replace
287	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  clazz,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  clazz,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  clazz,  fieldValue);	  ThreadLocal.getInstance(builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	79	None	replace
288	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  clazz,  iTotal);  [CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  clazz,  iTotal);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  clazz,  iTotal);	  ThreadLocal.getInstance(builder,    clazz);    	non-compiled	[CE]  non-static  variable  iTotal  cannot  be  referenced  from  a  static  context	79	None	replace
289	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0	          junit.framework.AssertionFailedError:    Expected:    {    null    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	57	None	replace
290	[BUG]  [BUGGY]  ThreadLocal.getInstance(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(fieldValue,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(fieldValue,  object);	  ThreadLocal.getInstance(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	7	None	replace
291	[BUG]  [BUGGY]  unregister(object,  fieldValue,  clazz,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  fieldValue,  clazz,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  fieldValue,  clazz,  excludeFields);	  unregister(object,    clazz,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	91	None	replace
292	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    Class    <?>    clazz    =    clazz.getDeclaredFields();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	60	None	replace
293	[BUG]  [BUGGY]  UnsupportedOperation.checkState(objectValue!=  null);  [CE]  cannot  find  symbol  objectValue  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkState(objectValue!=  null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkState(objectValue!=  null);	  UnsupportedOperation.checkState(fieldValue!=    null);    	non-compiled	[CE]  cannot  find  symbol  objectValue	12	None	replace
294	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  field.unregister(threadLocal);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  field.unregister(threadLocal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  field.unregister(threadLocal);	  ThreadLocal    threadLocal    =    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol  field	89	None	replace
295	[BUG]  [BUGGY]  validate(object,  constructer);  [CE]  cannot  find  symbol  constructer  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  constructer);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  constructer);	  validate(object,    e);    	non-compiled	[CE]  cannot  find  symbol  constructer	72	None	replace
296	[BUG]  [BUGGY]  int  objectCount  =  fieldValues.get(object);  [CE]  cannot  find  symbol  fieldValues  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  fieldValues.get(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  fieldValues.get(object);	  int    objectCount    =    fields.get(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValues	47	None	replace
297	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    Integer[]  fields  =  clazz.getDeclaredFields();  builder.append(object);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	add
298	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(excludeFields,  builder);  [CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields(excludeFields,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getFields(excludeFields);    	non-compiled	[CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;	83	None	replace
299	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(fields,  excludeFields);  [CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields(fields,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields(fields,  excludeFields);	  Field[]    fields    =    clazz.getFields(excludeFields);    	non-compiled	[CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;	83	None	replace
300	[BUG]  [BUGGY]  unregister(object,  fieldValue,  builder,  clazz);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  fieldValue,  builder,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  fieldValue,  builder,  clazz);	  unregister(object,    builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	26	None	replace
301	[BUG]  [BUGGY]  unregister(object,  constructer,  clazz,  excludeFields);  [CE]  cannot  find  symbol  constructer  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  constructer,  clazz,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  constructer,  clazz,  excludeFields);	  unregister(object,    builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  constructer	26	None	replace
302	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldType);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldType);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldType	35	None	replace
303	[BUG]  [BUGGY]  enableNonZeroOddNumber(object,  builder);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  enableNonZeroOddNumber(object,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	enableNonZeroOddNumber(object,  builder);	  allowNonZeroOddNumber(object);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
304	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocals(null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocals(null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocals(null);	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocals();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
305	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  field.getThreadLocals();  [CE]  cannot  find  symbol  field  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  field.getThreadLocals();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  field.getThreadLocals();	  ThreadLocal    threadLocal    =    threadLocal.getThreadLocals();    	non-compiled	[CE]  cannot  find  symbol  field	97	None	replace
306	[BUG]  [BUGGY]  unregister(fieldValue,  object,  builder);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(fieldValue,  object,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(fieldValue,  object,  builder);	  unregister(field,    object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	99	None	replace
307	[BUG]  [BUGGY]  unregister(fieldValue,  clazz,  builder);  [CE]  cannot  find  symbol  fieldValue  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(fieldValue,  clazz,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(fieldValue,  clazz,  builder);	  unregister(object,    clazz,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	28	None	replace
308	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldType);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldType);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldType	65	None	replace
309	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getRawClass(fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getRawClass(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getRawClass(fieldValue);	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
310	[BUG]  [BUGGY]  threadLocal.unregister(fieldValue,  builder);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  threadLocal.unregister(fieldValue,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	threadLocal.unregister(fieldValue,  builder);	  threadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	30	None	replace
311	[BUG]  [BUGGY]  threadLocal.unregister(object,  builder,  excludeFields);  [CE]  cannot  find  symbol  threadLocal  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  threadLocal.unregister(object,  builder,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	threadLocal.unregister(object,  builder,  excludeFields);	  threadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  threadLocal	30	None	replace
312	[BUG]  [BUGGY]  unregister(object,  builder,  excludeFields,  clazz);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  excludeFields,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  excludeFields,  clazz);	  unregister(object,    builder,    excludeFields);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	68	None	replace
313	[BUG]  [BUGGY]  unregister(object,  fieldValue,  clazz);  [CE]  cannot  find  symbol  fieldValue  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  fieldValue,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  fieldValue,  clazz);	  unregister(object,    clazz,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	27	None	replace
314	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  fieldValue,  useTransients);  [CE]  cannot  find  symbol  e  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  fieldValue,  useTransients);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(e,  fieldValue,  useTransients);	  ThreadLocal.getInstance().reportCodeChange(e,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  e	20	None	replace
315	[BUG]  [BUGGY]  UnregisteredField(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnregisteredField(fieldValue,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnregisteredField(fieldValue,  object);	  UnregisteredField(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	102	None	replace
316	[BUG]  [BUGGY]  UnregisteredField(object,  constructer);  [CE]  cannot  find  symbol  constructer  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnregisteredField(object,  constructer);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnregisteredField(object,  constructer);	  UnregisteredField(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  constructer	102	None	replace
317	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object!=  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	21	4	add
318	[BUG]  [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object!=  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object!=  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	21	4	add
319	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(exclusionFields);  [CE]  cannot  find  symbol  exclusionFields  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(exclusionFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(exclusionFields);	  Field[]    fields    =    clazz.getDeclaredFields(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	95	None	replace
320	[BUG]  [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ",  t);  }  [CE]  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ",  t);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(Throwable  t)  {  throw  new  IllegalStateException( " ",  t);  }	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
321	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7380fd9  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(exclusionFields);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7380fd9  	76	4	replace
322	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7380fd9  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(exclusionFields);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7380fd9  	76	4	replace
323	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(exclusionFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	76	None	replace
324	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(null);	  UnsupportedOperation    obj    =    createUnsupportedOperation();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
325	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  System.arraycopy(excludeFields,  0,  field,  0,  clazz.getDeclaredFields());  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  System.arraycopy(excludeFields,  0,  field,  0,  clazz.getDeclaredFields());  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  System.arraycopy(excludeFields,  0,  field,  0,  clazz.getDeclaredFields());	          Field[]    fields    =    clazz.getDeclaredFields();    field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  field	62	None	replace
326	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  this.fields[]  fields  =  clazz.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  this.fields[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  this.fields[]  fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
327	[BUG]  [BUGGY]  validate(object,  builder,  clazz);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  builder,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  builder,  clazz);	  validate(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
328	[BUG]  [BUGGY]  int  objectCount  =  field.get(includeFields);  [CE]  cannot  find  symbol  includeFields  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  field.get(includeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  field.get(includeFields);	  int    objectCount    =    field.get(iConstant);    	non-compiled	[CE]  cannot  find  symbol  includeFields	46	None	replace
329	[BUG]  [BUGGY]  int  objectCount  =  field.get(excludeFields);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  field.get(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  field.get(excludeFields);	  int    objectCount    =    field.get(iConstant);    	non-compiled	[CE]  cannot  find  symbol  field	46	None	replace
330	[BUG]  [BUGGY]  validate(object,  clazz,  excludeFields);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  validate(object,  clazz,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  clazz,  excludeFields);	  validate(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
331	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
332	[BUG]  [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  fieldValue  [FE]            IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	if(fieldValue  ==  null)  {  throw  new  IllegalStateException( " ");  }	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    >=    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldValue	25	None	replace
333	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7fccc2d  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    >=    null)    {    throw    new    IllegalStateException(       "       ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7fccc2d  	25	3	replace
334	[BUG]  [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7fccc2d  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	if(object  ==  null)  {  throw  new  IllegalStateException( " ");  }	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    >=    null)    {    throw    new    IllegalStateException(       "       ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7fccc2d  	25	3	replace
335	[BUG]  [BUGGY]  Class  <?>  object  =  fieldValue.getClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  fieldValue.getClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  fieldValue.getClass();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    >=    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	25	None	replace
336	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getStaticFields(excludeFields);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getStaticFields(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getStaticFields(excludeFields);	  Field[]    fields    =    clazz.getStaticFields();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
337	[BUG]  [BUGGY]  catch(NoClassCastException  ne)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  catch(NoClassCastException  ne)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	catch(NoClassCastException  ne)  {  throw  new  IllegalStateException( " ");  }	  try    {    [Delete]    catch(NoClassCastException    ne)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	115	None	replace
338	[BUG]  [BUGGY]  AnnotatedException:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  AnnotatedException:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	AnnotatedException:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;	  junit.framework.AssertionFailedError:    Expected:    <    null>    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
339	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclasses();  builder.append(excludeFields);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
340	[BUG]  [BUGGY]  UnsupportedOperationException.register(objectValue,  iTotal);  [CE]  cannot  find  symbol  objectValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(objectValue,  iTotal);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(objectValue,  iTotal);	  UnsupportedOperationException.register(fieldValue,    iTotal);    	non-compiled	[CE]  cannot  find  symbol  objectValue	85	None	replace
341	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields,  builder);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	10	None	replace
342	[BUG]  [BUGGY]  ThreadLocal.unregister(object,  builder,  clazz);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.unregister(object,  builder,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.unregister(object,  builder,  clazz);	  ThreadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
343	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  object,  excludeFields);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(builder,  object,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  object,  excludeFields);	  ThreadLocal.getInstance(builder,    object);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
344	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(excludeFields);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(excludeFields);	  Class    <?>    object    =    clazz.getSuperclass(null);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	78	None	replace
345	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(class,  field);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(class,  field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(class,  field);	  ThreadLocal.getInstance().reportCodeChange(e,    field);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
346	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Field[]  clazz  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Field[]  clazz  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    Field[]  clazz  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	66	None	add
347	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0].getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0].getName());  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0].getName());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i].getName());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
348	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@61fa8588  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  final  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	final  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@61fa8588  	64	4	replace
349	[BUG]  [BUGGY]  final  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@61fa8588  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  final  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	final  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@61fa8588  	64	4	replace
350	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(builder,  iConstant);	  ThreadLocal.getInstance().reportCodeChange(builder);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	87	None	replace
351	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  excludeFields);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(builder,  excludeFields);	  ThreadLocal.getInstance().reportCodeChange(builder);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
352	[BUG]  [BUGGY]  UnsupportedOperationException.register(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(fieldValue,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(fieldValue,  object);	  UnsupportedOperationException.register(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	86	None	replace
353	[BUG]  [BUGGY]  UnsupportedOperationException.register(object,  clazz);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(object,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(object,  clazz);	  UnsupportedOperationException.register(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
354	[BUG]  [BUGGY]  UnsupportedOperationException.register(object,  constructer);  [CE]  cannot  find  symbol  constructer  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(object,  constructer);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(object,  constructer);	  UnsupportedOperationException.register(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  constructer	86	None	replace
355	[BUG]  [BUGGY]  UnsupportedOperation.checkNotNull(excludeFields);  [CE]  cannot  find  symbol  UnsupportedOperation  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkNotNull(excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkNotNull(excludeFields);	  UnsupportedOperation.checkNotNull(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  UnsupportedOperation	84	None	replace
356	[BUG]  [BUGGY]  While(object!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  While(object!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	While(object!=  null)  {  if(!useTransients)  {  throw  new  IllegalStateException( " ");  }	  While(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
357	[BUG]  [BUGGY]  While(object!=  null)  {  unregister(object);  }  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  While(object!=  null)  {  unregister(object);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	While(object!=  null)  {  unregister(object);  }	  While(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	38	None	replace
358	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    Object[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[1]);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	66	None	add
359	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[itotal]);  [CE]  cannot  find  symbol  itotal  [FE]                          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[itotal]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[itotal]);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  cannot  find  symbol  itotal	37	None	replace
360	[BUG]  [BUGGY]  while(!useTransients)  {  if(t)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  while(!useTransients)  {  if(t)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	while(!useTransients)  {  if(t)  {  throw  new  IllegalStateException( " ");  }	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
361	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	          junit.framework.AssertionFailedError:    Expected:    {    null    but    was:    [org.apache.commons.lang3.builder.IDKey@3be0aeb    	non-compiled	[CE]  not  a  statement	57	None	replace
362	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  append(String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  useTransients);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  append(String[],boolean)	65	None	replace
363	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  field,  excludeFields);  [CE]  cannot  find  symbol  e  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  field,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(e,  field,  excludeFields);	  ThreadLocal.getInstance().reportCodeChange(e,    field);    	non-compiled	[CE]  cannot  find  symbol  e	19	None	replace
364	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  fieldValue,  excludeFields);  [CE]  cannot  find  symbol  e  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  fieldValue,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(e,  fieldValue,  excludeFields);	  ThreadLocal.getInstance().reportCodeChange(e,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  e	20	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fieldValues  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]    fields    =    clazz.getFields();    builder.append(object);    Field[]  fieldValues  =  clazz.getFields();  builder.append(object);	  	compilable	  [FE]  AssertionFailedError  	100	4	add
366	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fieldValues  =  clazz.getFields();  builder.append(object);  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fieldValues  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(object);    Field[]  fieldValues  =  clazz.getFields();  builder.append(object);	  	compilable	  [FE]  AssertionFailedError  	100	4	add
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fieldValue  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]    fields    =    clazz.getFields();    builder.append(object);    Field[]  fieldValue  =  clazz.getFields();  builder.append(object);	  	compilable	  [FE]  AssertionFailedError  	100	4	add
368	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fieldValue  =  clazz.getFields();  builder.append(object);  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fieldValue  =  clazz.getFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(object);    Field[]  fieldValue  =  clazz.getFields();  builder.append(object);	  	compilable	  [FE]  AssertionFailedError  	100	4	add
369	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  Field[]  fields  =  clazz.getFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(object);    Field[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	100	None	add
370	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(field,  builder);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().unregisterChild(field,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(field,  builder);	  ThreadLocal.getInstance().unregisterChild(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  field	109	None	replace
371	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getDeclaredClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getDeclaredClass();	  Class    <?>    object    =    clazz.getRawClass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	43	None	replace
372	[BUG]  [BUGGY]  threadLocal.unregister(field,  builder);  [CE]  cannot  find  symbol  field  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  threadLocal.unregister(field,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	threadLocal.unregister(field,  builder);	  threadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  field	30	None	replace
373	[BUG]  [BUGGY]  unregister(fieldValue,  object);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(fieldValue,  object);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(fieldValue,  object);	  unregister(object,    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	3	None	replace
374	[BUG]  [BUGGY]  ThreadLocal.getInstance(baseUri,  object);  [CE]  cannot  find  symbol  baseUri  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(baseUri,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(baseUri,  object);	  ThreadLocal.getInstance(object);    	non-compiled	[CE]  cannot  find  symbol  baseUri	7	None	replace
375	[BUG]  [BUGGY]  ThreadLocal.unregister(field,  builder);  [CE]  cannot  find  symbol  field  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.unregister(field,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.unregister(field,  builder);	  ThreadLocal.unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  field	31	None	replace
376	[BUG]  [BUGGY]  unregister(object,  constructer,  fieldValue,  excludeFields);  [CE]  cannot  find  symbol  constructer  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  constructer,  fieldValue,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  constructer,  fieldValue,  excludeFields);	  unregister(object,    builder,    excludeFields);    	non-compiled	[CE]  cannot  find  symbol  constructer	68	None	replace
377	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@87a2913  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  if(clazz!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	if(clazz!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  }	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@87a2913  	50	4	replace
378	[BUG]  [BUGGY]  if(clazz!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@87a2913  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  if(clazz!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	if(clazz!=  null)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  }	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[0]);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@87a2913  	50	4	replace
379	[BUG]  [BUGGY]  allowNonZeroOddNumber(object,  clazz);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  allowNonZeroOddNumber(object,  clazz);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(object,  clazz);	  allowNonZeroOddNumber(object);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
380	[BUG]  [BUGGY]  unregister(object,  clazz,  field);  [CE]  cannot  find  symbol  field  [FE]                        AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  clazz,  field);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  field);	  unregister(object,    clazz,    e);    	non-compiled	[CE]  cannot  find  symbol  field	29	None	replace
381	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Field[]  fields  =  clazz.getFields();  builder.append(exclusionFields);  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  Field[]  fields  =  clazz.getFields();  builder.append(exclusionFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getFields();    builder.append(excludeFields);    Field[]  fields  =  clazz.getFields();  builder.append(exclusionFields);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	33	None	add
382	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fields[i].getName());  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fields[i].getName());  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fields[i].getName());	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i].getName());    	non-compiled	[CE]  cannot  find  symbol  i	108	None	replace
383	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue,  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(fieldValue,  fieldValue);	  Class    <?>    object    =    clazz.getSuperclass(fieldValue);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	44	None	replace
384	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  this.fields  =  clazz.getDeclaredFields();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  this.fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  this.fields  =  clazz.getDeclaredFields();	          Field[]    fields    =    clazz.getDeclaredFields();    field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	62	None	replace
385	[BUG]  [BUGGY]  int  objectCount  =  excludeFields.get(object);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  objectCount  =  excludeFields.get(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  excludeFields.get(object);	  int    objectCount    =    fields.get(object);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
386	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(this,  object);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(this,  object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(this,  object);	  ThreadLocal.getInstance().reportCodeChange(e);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	18	None	replace
387	[BUG]  [BUGGY]  While(object!=  null)  {  builder.append( " ");  }  [CE]  [FE]        IllegalStateException      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  While(object!=  null)  {  builder.append( " ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	While(object!=  null)  {  builder.append( " ");  }	  While(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	38	None	replace
388	[BUG]  [BUGGY]  UnsupportedOperationException.register(fieldValue,  iTotal,  excludeFields);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperationException.register(fieldValue,  iTotal,  excludeFields);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(fieldValue,  iTotal,  excludeFields);	  UnsupportedOperationException.register(fieldValue,    iTotal);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	85	None	replace
389	[BUG]  [BUGGY]  Object[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Object[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Object[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();	          Field[]    fields    =    clazz.getFields();    Class    <?>    clazz    =    clazz.getRawClass();    	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	55	None	replace
390	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@751f7b49  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  fieldValue  =  object.getClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Class  <?>  fieldValue  =  object.getClass();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@751f7b49  	22	3	replace
391	[BUG]  [BUGGY]  Class  <?>  fieldValue  =  object.getClass();  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@751f7b49  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  fieldValue  =  object.getClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  fieldValue  =  object.getClass();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@751f7b49  	22	3	replace
392	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getComponentType();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getComponentType();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getComponentType();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	22	None	replace
393	[BUG]  [BUGGY]  Class  <?>[]  fieldValue  =  object.getClass();  [CE]  incompatible  types  [FE]        IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>[]  fieldValue  =  object.getClass();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>[]  fieldValue  =  object.getClass();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  incompatible  types	22	None	replace
394	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(objectValue,  excludeFields);  [CE]  cannot  find  symbol  objectValue  [FE]          AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(objectValue,  excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(objectValue,  excludeFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  objectValue	10	None	replace
395	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludedFields);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludedFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue,  excludedFields);	  Field[]    fields    =    clazz.getDeclaredFields(excludeFields);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	10	None	replace
396	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
397	[BUG]  [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	23	4	add
398	[BUG]  [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  }  [CE]  class,  interface,  or  enum  expected  [FE]      IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]          if(object!=    null)    {    throw    new    IllegalStateException(     "     ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(     "     ");  }  if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	                if(object!=        null)        {        throw        new        IllegalStateException(       "       ");        }        if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object!=  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException( "   ");  }  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  	compilable	  [FE]  AssertionFailedError  	63	4	add
400	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields);    Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(excludeFields);	  	compilable	  [FE]  AssertionFailedError  	63	4	add
401	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  useTransients);  [CE]  no  suitable  method  found  for  append(String[],boolean)  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  useTransients);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  useTransients);	  Field[]    fields    =    clazz.getFields();    builder.append(excludeFields,    fieldValue);    	non-compiled	[CE]  no  suitable  method  found  for  append(String[],boolean)	35	None	replace
402	[BUG]  [BUGGY]  ThreadLocal.getInstance(object,  clazz,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(object,  clazz,  iConstant);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(object,  clazz,  iConstant);	  ThreadLocal.getInstance(object,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	1	None	replace
403	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(field);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(field);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(field);	  Class    <?>    object    =    clazz.getSuperclass(null);    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	78	None	replace
404	[BUG]  [BUGGY]  ThreadLocal.getInstance(baseUri);  [CE]  cannot  find  symbol  baseUri  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(baseUri);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(baseUri);	  ThreadLocal.getInstance(builder);    	non-compiled	[CE]  cannot  find  symbol  baseUri	8	None	replace
405	[BUG]  [BUGGY]  ThreadLocal.getInstance(baseUri,  builder);  [CE]  cannot  find  symbol  baseUri  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance(baseUri,  builder);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(baseUri,  builder);	  ThreadLocal.getInstance(builder);    	non-compiled	[CE]  cannot  find  symbol  baseUri	8	None	replace
406	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[0]);  [CE]  cannot  find  symbol  fieldValue  [FE]    NullPointerException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[0]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue,  excludeFields[0]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[0]);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	67	None	replace
407	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getSuperclasses();  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>[]  fields  =  clazz.getSuperclasses();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>[]  fields  =  clazz.getSuperclasses();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
408	[BUG]  [BUGGY]  Class  <?>[]  fields  =  clazz.getComponents();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Class  <?>[]  fields  =  clazz.getComponents();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>[]  fields  =  clazz.getComponents();	          if(object!=    null)    {    throw    new    IllegalStateException(       "       ");    }    if(object    ==    null)    {    throw    new    IllegalStateException(       "       ");    }    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
409	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder,  this);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(builder,  this);	  ThreadLocal.getInstance().reportCodeChange(builder);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	87	None	replace
410	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(Object.class);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(Object.class);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(Object.class);	  UnsupportedOperation    obj    =    createUnsupportedOperation();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
411	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7eeb167e  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  if(!useTransients)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	if(!useTransients)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  }	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7eeb167e  	94	4	replace
412	[BUG]  [BUGGY]  if(!useTransients)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7eeb167e  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  if(!useTransients)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  }  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	if(!useTransients)  {  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  }	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7eeb167e  	94	4	replace
413	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[itotal]);  [CE]  cannot  find  symbol  itotal  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[itotal]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[itotal]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[iConstant]);    	non-compiled	[CE]  cannot  find  symbol  itotal	51	None	replace
414	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue[i]);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue[i]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fieldValue[i]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[i]);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	48	None	replace
415	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i],  fieldValue);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i],  fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i],  fieldValue);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(excludeFields[i]);    	non-compiled	[CE]  cannot  find  symbol  i	48	None	replace
416	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fields[i],  excludeFields[i]);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fields[i],  excludeFields[i]);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  constructer.append(fields[i],  excludeFields[i]);	  Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i],    excludeFields[i]);    	non-compiled	[CE]  cannot  find  symbol  i	107	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(object);	  	compilable	  [FE]  AssertionFailedError  	93	4	add
418	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(object);  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    Field[]  fieldValue  =  clazz.getDeclaredFields();  builder.append(object);	  	compilable	  [FE]  AssertionFailedError  	93	4	add
419	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5    [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]    fields    =    clazz.getDeclaredFields();    builder.append(object);    Field[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	93	None	add
420	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(exclusionFields);  [CE]  cannot  find  symbol  exclusionFields  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields(exclusionFields);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclassFields(exclusionFields);	  Field[]    fields    =    clazz.getSuperclassFields();    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	11	None	replace
421	[BUG]  [BUGGY]  unregister(object,  builder,  fieldValue,  clazz);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(object,  builder,  fieldValue,  clazz);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  fieldValue,  clazz);	  unregister(object,    builder,    clazz);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	26	None	replace
422	[BUG]  [BUGGY]  int  fieldValueCount  =  field.get(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  fieldValueCount  =  field.get(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  fieldValueCount  =  field.get(fieldValue);	  int    objectCount    =    field.get(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	75	None	replace
423	[BUG]  [BUGGY]  int  fieldCount  =  field.get(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  int  fieldCount  =  field.get(fieldValue);  [BUGGY]      unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  fieldCount  =  field.get(fieldValue);	  int    objectCount    =    field.get(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	75	None	replace
424	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocalMillis();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocalMillis();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocalMillis();	  ThreadLocal    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
425	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocalState();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocalState();  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocalState();	  ThreadLocal    threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
426	[BUG]  [BUGGY]  unregister(field,  clazz,  builder);  [CE]  cannot  find  symbol  field  [FE]                      AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  unregister(field,  clazz,  builder);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(field,  clazz,  builder);	  unregister(object,    clazz,    builder);    	non-compiled	[CE]  cannot  find  symbol  field	28	None	replace
427	[BUG]  [BUGGY]  UnsupportedOperation.checkState(baseValue  ==  null);  [CE]  cannot  find  symbol  baseValue  [FE]                AssertionFailedError      [CONTEXT]      Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(     "Unexpected  IllegalAccessException     ");  }  }  }  }  finally  {      [BUGGY]  UnsupportedOperation.checkState(baseValue  ==  null);  [BUGGY]      }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkState(baseValue  ==  null);	  UnsupportedOperation.checkState(fieldValue    ==    null);    	non-compiled	[CE]  cannot  find  symbol  baseValue	14	None	replace
