bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ThreadLocal.getInstance(object,  clazz);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(object,  clazz);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(object,  clazz);	      ThreadLocal.getInstance(field,    clazz);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
2	[BUG]  [BUGGY]  ThreadLocal.getInstance(base,  clazz);  [CE]  cannot  find  symbol  base  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(base,  clazz);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(base,  clazz);	      ThreadLocal.getInstance(field,    clazz);    	non-compiled	[CE]  cannot  find  symbol  base	18	None	replace
3	[BUG]  [BUGGY]  unregister(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  fieldValue);	  unregister(object,    e);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	1	None	replace
4	[BUG]  [BUGGY]  unregister(object,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  iConstant);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  iConstant);	  unregister(object,    e);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	1	None	replace
5	[BUG]  [BUGGY]  ThreadLocal.getInstance(class,  clazz);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(class,  clazz);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(class,  clazz);	      ThreadLocal.getInstance(fieldValue,    clazz);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
6	[BUG]  [BUGGY]  ThreadLocal.getInstance(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(fieldValue);	      ThreadLocal.getInstance();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	17	None	replace
7	[BUG]  [BUGGY]  ThreadLocal.getInstance(object);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(object);	      ThreadLocal.getInstance();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
8	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(builder);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder);	      ThreadLocal.getInstance();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getSuperclasses();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclasses();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(excludeFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  method  getDeclaredFields  in  class  Class<T>  cannot  be  applied  to  given  types;	8	None	replace
11	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getSuperclassFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getSuperclassFields();	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
12	[BUG]  [BUGGY]  UnsupportedOperation.checkState(fieldValue!=  null);  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperation.checkState(fieldValue!=  null);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkState(fieldValue!=  null);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	14	None	replace
13	[BUG]  [BUGGY]  UnsupportedOperationException.register(builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperationException.register(builder,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(builder,  fieldValue);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	14	None	replace
14	[BUG]  [BUGGY]  UnsupportedOperation.checkState(fieldValue  ==  null);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperation.checkState(fieldValue  ==  null);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkState(fieldValue  ==  null);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	14	None	replace
15	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	      	non-compiled	[CE]  not  a  statement	6	None	replace
16	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@2be0aeb  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@2be0aeb  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@2be0aeb	      	non-compiled	[CE]  not  a  statement	6	None	replace
17	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getStaticFields();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getStaticFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getStaticFields();	      Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
18	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e);  [CE]  cannot  find  symbol  e  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(e);	      ThreadLocal.getInstance().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  e	12	None	replace
19	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  field);  [CE]  cannot  find  symbol  e  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  field);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(e,  field);	      ThreadLocal.getInstance().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  e	12	None	replace
20	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  fieldValue);  [CE]  cannot  find  symbol  e  [FE]                  AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance().reportCodeChange(e,  fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(e,  fieldValue);	      ThreadLocal.getInstance().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  e	12	None	replace
21	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	        if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	20	4	add
22	[BUG]  [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	20	4	add
23	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	        if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	20	4	add
24	[BUG]  [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object  ==  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(object  ==  null)  {  throw  new  IllegalStateException(   "   ");  }	  	compilable	  [FE]  IllegalStateException  	20	4	add
25	[BUG]  [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object  >=  null)  {  throw  new  IllegalStateException(   "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]        IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      if(object!=  null)  {  throw  new  IllegalStateException(   "   ");  }  if(object  >=  null)  {  throw  new  IllegalStateException(   "   ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    if(object  >=  null)  {  throw  new  IllegalStateException(   "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	20	None	add
26	[BUG]  [BUGGY]  unregister(object,  builder,  clazz);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  builder,  clazz);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  clazz);	  unregister(object,    clazz);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	4	None	replace
27	[BUG]  [BUGGY]  unregister(object,  clazz,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  clazz,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  fieldValue);	  unregister(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	4	None	replace
28	[BUG]  [BUGGY]  unregister(object,  clazz,  builder);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  clazz,  builder);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  builder);	  unregister(object,    clazz);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	4	None	replace
29	[BUG]  [BUGGY]  unregister(object,  clazz,  e);  [CE]  cannot  find  symbol  e  [FE]                    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  clazz,  e);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  e);	  unregister(object,    clazz);    	non-compiled	[CE]  cannot  find  symbol  e	4	None	replace
30	[BUG]  [BUGGY]  threadLocal.unregister(object,  builder);  [CE]  cannot  find  symbol  threadLocal  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  threadLocal.unregister(object,  builder);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	threadLocal.unregister(object,  builder);	  threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol  threadLocal	3	None	replace
31	[BUG]  [BUGGY]  ThreadLocal.unregister(object,  builder);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.unregister(object,  builder);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.unregister(object,  builder);	  threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
32	[BUG]  [BUGGY]  ThreadLocal  threadLocal.unregister(object);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal  threadLocal.unregister(object);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal.unregister(object);	  threadLocal.unregister(object);    	non-compiled	[CE]  ';'  expected	3	None	replace
33	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55  	13	4	replace
34	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@14c54c55  	13	4	replace
35	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields,  fieldValue);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	13	None	replace
36	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(exclusionFields);  [CE]  cannot  find  symbol  exclusionFields  [FE]                    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(exclusionFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(exclusionFields);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	13	None	replace
37	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[iConstant]);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                      AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[iConstant]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(excludeFields[iConstant]);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	13	None	replace
38	[BUG]  [BUGGY]  While(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  While(object!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	While(object!=  null)  {  throw  new  IllegalStateException( " ");  }	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
39	[BUG]  [BUGGY]  allowNonZeroOddNumber(object);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  allowNonZeroOddNumber(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(object);	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
40	[BUG]  [BUGGY]  allowNonZeroOddNumber(objectValue);  [CE]  cannot  find  symbol  objectValue  [FE]        IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  allowNonZeroOddNumber(objectValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(objectValue);	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  objectValue	21	None	replace
41	[BUG]  [BUGGY]  allowNonZeroOddNumber(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]          IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  allowNonZeroOddNumber(fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	allowNonZeroOddNumber(fieldValue);	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldValue	21	None	replace
42	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Class  <?>  object  =  clazz.getSuperClass();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperClass();	      Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	22	None	replace
43	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getRawClass();  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Class  <?>  object  =  clazz.getRawClass();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getRawClass();	      Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	22	None	replace
44	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(fieldValue);	      Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	22	None	replace
45	[BUG]  [BUGGY]  int  objectCount  =  fieldValue.get(object);  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  int  objectCount  =  fieldValue.get(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  fieldValue.get(object);	      int    objectCount    =    field.get(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	16	None	replace
46	[BUG]  [BUGGY]  int  objectCount  =  field.get(iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  int  objectCount  =  field.get(iConstant);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  field.get(iConstant);	      int    objectCount    =    field.get(object);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	16	None	replace
47	[BUG]  [BUGGY]  int  objectCount  =  fields.get(object);  [CE]  cannot  find  symbol  fields  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  int  objectCount  =  fields.get(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  fields.get(object);	      int    objectCount    =    field.get(object);    	non-compiled	[CE]  cannot  find  symbol  fields	16	None	replace
48	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i]);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[i]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i]);    	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
49	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i]);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e  	23	4	replace
50	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[0]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i]);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@7a98178e  	23	4	replace
51	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iConstant]);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iConstant]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[iConstant]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i]);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	23	None	replace
52	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getFields();  Field[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getFields();  Field[]  fields  =  clazz.getFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getFields();    Field[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
53	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getFields();  String[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getFields();  String[]  fields  =  clazz.getFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getFields();    String[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
54	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getFields();  Object[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getFields();  Object[]  fields  =  clazz.getFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getFields();    Object[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
55	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getRawClass();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getFields();    Class  <?>  clazz  =  clazz.getRawClass();	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
56	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getFields();  field[]  fields  =  clazz.getFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getFields();  field[]  fields  =  clazz.getFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getFields();    field[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
57	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        junit.framework.AssertionFailedError:  Expected:  {  null  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	  	non-compiled	[CE]  not  a  statement	5	None	add
58	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getDeclaredFields();    Field[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	add
59	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  String[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  String[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getDeclaredFields();    String[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	add
60	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Class  <?>  clazz  =  clazz.getDeclaredFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getDeclaredFields();    Class  <?>  clazz  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	add
61	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Object[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Object[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getDeclaredFields();    Object[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	add
62	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  field[]  fields  =  clazz.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  field[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getDeclaredFields();    field[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
63	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803  	11	4	replace
64	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@b5b6803  	11	4	replace
65	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields,  fieldValue);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	11	None	replace
66	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	compilable	  [FE]  NullPointerException  	11	4	replace
67	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [FE]  NullPointerException  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(excludeFields[0]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	compilable	  [FE]  NullPointerException  	11	4	replace
68	[BUG]  [BUGGY]  unregister(object,  builder,  excludeFields);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  builder,  excludeFields);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  excludeFields);	  unregister(object,    builder);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	2	None	replace
69	[BUG]  [BUGGY]  unregister(object,  builder,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  builder,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  fieldValue);	  unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	2	None	replace
70	[BUG]  [BUGGY]  unregister(object,  builder,  e);  [CE]  cannot  find  symbol  e  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  builder,  e);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  e);	  unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  e	2	None	replace
71	[BUG]  [BUGGY]  unregister(object,  builder,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  builder,  iConstant);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  builder,  iConstant);	  unregister(object,    builder);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	2	None	replace
72	[BUG]  [BUGGY]  validate(object,  e);  [CE]  cannot  find  symbol  e  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  validate(object,  e);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  e);	  validate(object);    	non-compiled	[CE]  cannot  find  symbol  e	15	None	replace
73	[BUG]  [BUGGY]  validate(object,  builder);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  validate(object,  builder);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  builder);	  validate(object);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
74	[BUG]  [BUGGY]  validate(object,  clazz);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  validate(object,  clazz);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	validate(object,  clazz);	  validate(object);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
75	[BUG]  [BUGGY]  int  objectCount  =  field.get(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  int  objectCount  =  field.get(fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  field.get(fieldValue);	      int    objectCount    =    field.get(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	16	None	replace
76	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(exclusionFields);  [CE]  cannot  find  symbol  exclusionFields  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(exclusionFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(exclusionFields);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  exclusionFields	11	None	replace
77	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  field);  [CE]  cannot  find  symbol  field  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(builder,  field);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  field);	      ThreadLocal.getInstance();    	non-compiled	[CE]  cannot  find  symbol  field	17	None	replace
78	[BUG]  [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(null);  [CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Class  <?>  object  =  clazz.getSuperclass(null);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Class  <?>  object  =  clazz.getSuperclass(null);	      Class    <?>    object    =    clazz.getSuperclass();    	non-compiled	[CE]  variable  object  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	22	None	replace
79	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  clazz);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(builder,  clazz);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  clazz);	      ThreadLocal.getInstance(field,    clazz);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
80	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getFields();  Integer[]  fields  =  clazz.getFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getFields();  Integer[]  fields  =  clazz.getFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getFields();    Integer[]  fields  =  clazz.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
81	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getSuperclass();  [CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]      AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getFields();  Class  <?>  clazz  =  clazz.getSuperclass();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getFields();    Class  <?>  clazz  =  clazz.getSuperclass();	  	non-compiled	[CE]  variable  clazz  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	9	None	add
82	[BUG]  [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Integer[]  fields  =  clazz.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      Field[]  fields  =  clazz.getDeclaredFields();  Integer[]  fields  =  clazz.getDeclaredFields();  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        Field[]    fields    =    clazz.getDeclaredFields();    Integer[]  fields  =  clazz.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  reflectionAppend(Object,Class<?>,HashCodeBuilder,boolean,String[])	7	None	add
83	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields(excludeFields);  [CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields(excludeFields);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields(excludeFields);	      Field[]    fields    =    clazz.getFields();    	non-compiled	[CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;	10	None	replace
84	[BUG]  [BUGGY]  UnsupportedOperation.checkNotNull(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperation.checkNotNull(fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation.checkNotNull(fieldValue);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	14	None	replace
85	[BUG]  [BUGGY]  UnsupportedOperationException.register(fieldValue,  iTotal);  [CE]  cannot  find  symbol  fieldValue  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperationException.register(fieldValue,  iTotal);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(fieldValue,  iTotal);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	14	None	replace
86	[BUG]  [BUGGY]  UnsupportedOperationException.register(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperationException.register(object,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperationException.register(object,  fieldValue);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	14	None	replace
87	[BUG]  [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance().reportCodeChange(builder);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().reportCodeChange(builder);	      ThreadLocal.getInstance().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
88	[BUG]  [BUGGY]  threadLocal.unregister(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  threadLocal.unregister(fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	threadLocal.unregister(fieldValue);	  threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	3	None	replace
89	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.unregister(object);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.unregister(object);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.unregister(object);	  threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
90	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        junit.framework.AssertionFailedError:  Expected:  <  object>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb	  	non-compiled	[CE]  not  a  statement	5	None	add
91	[BUG]  [BUGGY]  unregister(object,  clazz,  excludeFields);  [CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  clazz,  excludeFields);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  excludeFields);	  unregister(object,    clazz);    	non-compiled	[CE]  method  unregister  in  class  HashCodeBuilder  cannot  be  applied  to  given  types;	4	None	replace
92	[BUG]  [BUGGY]  unregister(object,  clazz,  iConstant);  [CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  clazz,  iConstant);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  clazz,  iConstant);	  unregister(object,    clazz);    	non-compiled	[CE]  non-static  variable  iConstant  cannot  be  referenced  from  a  static  context	4	None	replace
93	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5  	11	4	replace
94	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(object);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@177d00c5  	11	4	replace
95	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]    AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields(fieldValue);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields(fieldValue);	      Field[]    fields    =    clazz.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	8	None	replace
96	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocal();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocal();  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocal();	  threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
97	[BUG]  [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocals();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal  threadLocal  =  threadLocal.getThreadLocals();  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal  threadLocal  =  threadLocal.getThreadLocals();	  threadLocal.unregister(object);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
98	[BUG]  [BUGGY]  ThreadLocal.getInstance(builder,  object);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance(builder,  object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance(builder,  object);	      ThreadLocal.getInstance();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
99	[BUG]  [BUGGY]  unregister(field,  object,  builder);  [CE]  cannot  find  symbol  field  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(field,  object,  builder);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(field,  object,  builder);	  unregister(object,    builder);    	non-compiled	[CE]  cannot  find  symbol  field	2	None	replace
100	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	add	Field[]  fields  =  clazz.getFields();  builder.append(object);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b  	13	4	replace
101	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b  [FE]                AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getFields();  builder.append(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getFields();  builder.append(object);	      Field[]    fields    =    clazz.getFields();    builder.append(fieldValue);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@366e523b  	13	4	replace
102	[BUG]  [BUGGY]  UnregisteredField(object,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnregisteredField(object,  fieldValue);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnregisteredField(object,  fieldValue);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	14	None	replace
103	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation();  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation();	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
104	[BUG]  [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  UnsupportedOperation  obj  =  createUnsupportedOperation(object);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	UnsupportedOperation  obj  =  createUnsupportedOperation(object);	  unregister(fieldValue);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
105	[BUG]  [BUGGY]  int  objectCount  =  this.field.get(object);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  int  objectCount  =  this.field.get(object);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	int  objectCount  =  this.field.get(object);	      int    objectCount    =    field.get(object);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	16	None	replace
106	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb;	      	non-compiled	[CE]  not  a  statement	6	None	replace
107	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[i],  excludeFields[i]);  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[i],  excludeFields[i]);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[i],  excludeFields[i]);	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i]);    	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
108	[BUG]  [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[i].getName());  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[i].getName());  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	Field[]  fields  =  clazz.getDeclaredFields();  builder.append(fields[i].getName());	      Field[]    fields    =    clazz.getDeclaredFields();    builder.append(fields[i]);    	non-compiled	[CE]  cannot  find  symbol  i	23	None	replace
109	[BUG]  [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  ThreadLocal.getInstance().unregisterChild(object,  builder);  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	ThreadLocal.getInstance().unregisterChild(object,  builder);	      ThreadLocal.getInstance().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
110	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0aeb  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  <null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3be0aeb    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]      junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0aeb  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	        junit.framework.AssertionFailedError:  Expected:  <  null>  but  was:  [org.apache.commons.lang3.builder.IDKey@3end0aeb	  	non-compiled	[CE]  not  a  statement	5	None	add
111	[BUG]  [BUGGY]  unregister(object,  constructer);  [CE]  cannot  find  symbol  constructer  [FE]        AssertionFailedError    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  unregister(object,  constructer);  [BUGGY]    }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	unregister(object,  constructer);	  unregister(object,    e);    	non-compiled	[CE]  cannot  find  symbol  constructer	1	None	replace
112	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  try  {  [Delete]  catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	try  {  [Delete]  catch(NoClassCastException  e)  {  throw  new  IllegalStateException( " ");  }	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
113	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	try  {  [Delete]  catch(Throwable  t)  {  throw  new  IllegalStateException( " ");  }	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
114	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoClassDefFoundError  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  try  {  [Delete]  catch(NoClassDefFoundError  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	try  {  [Delete]  catch(NoClassDefFoundError  e)  {  throw  new  IllegalStateException( " ");  }	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
115	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoClassCastException  ne)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    Object  fieldValue  =  field.get(object);  builder.append(fieldValue);  }  catch  (IllegalAccessException  e)  {    throw  new  InternalError(   "Unexpected  IllegalAccessException   ");  }  }  }  }  finally  {    [BUGGY]  try  {  [Delete]  catch(NoClassCastException  ne)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    unregister(object);  }  }  [CLASS]  HashCodeBuilder  1  [METHOD]  reflectionAppend  [RETURN_TYPE]  void  Object  object  Class<?>  clazz  HashCodeBuilder  builder  boolean  useTransients  String[]  excludeFields  [VARIABLES]  Field  field  boolean  useTransients  ThreadLocal  REGISTRY  HashCodeBuilder  builder  Object  fieldValue  object  Class  clazz  String[]  excludeFields  int  iConstant  iTotal  initialNonZeroOddNumber  multiplierNonZeroOddNumber  Field[]  fields  IllegalAccessException  e  	projects/Lang32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java	0.5	196	196	1	replace	try  {  [Delete]  catch(NoClassCastException  ne)  {  throw  new  IllegalStateException( " ");  }	      if(object!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
